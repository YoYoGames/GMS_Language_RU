<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Функции и переменные сценария</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of scripts to create functions and global variables and macros" />
  <meta name="rh-index-keywords" content="Script Functions And Variables" />
  <meta name="search-keywords" content="user defined functions,script functions,gmcallback_,gmcallback" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Функции и переменные сценария</h1>
  <p>Активы сценария - это, по сути, набор одной или нескольких функций или переменных, определенных пользователем, которые вы сами записываете в виде фрагментов кода в <a href="../../The_Asset_Editors/Scripts.htm">редакторе сценариев</a>. Функции, которые вы определяете в сценарии, могут
    разрешать выражения, возвращать значения или делать все остальное, что позволяет <span class="notranslate">язык GameMaker</span>, как и встроенные <a href="Runtime_Functions.htm">функции<span class="notranslate">времени выполнения</span></a>.</p>
  <p>Функции сценария обычно используются, если у вас есть блок кода, который вы используете в нескольких местах или объектах, или когда вы хотите, чтобы блок кода использовался в нескольких объектах модульно. Использование скриптов для определения функций означает, что
    вы можете изменить функцию только один раз, когда это необходимо, и изменение будет &quot;подхвачено&quot; каждым объектом, в котором есть вызов функции.</p>
  <p>Скрипты также могут быть очень удобны с организационной точки зрения, так как они позволяют создавать группы функций, относящихся к определенной категории - например, у вас может быть несколько функций, связанных со столкновениями между экземплярами в вашей
    Например, у вас может быть несколько функций, связанных со столкновениями между экземплярами в вашей игре, тогда вы создадите скрипт &quot;<span class="inline">Collision_Functions</span>&quot; и будете хранить в нем все эти функции вместе.</p>
  <h2>Создание функций</h2>
  <p>При создании сценария с функциями в нем, функции должны быть созданы с использованием следующих форматов:</p>
  <p class="code"><span>function &lt;name&gt;( &lt;parameter1&gt;, &lt;parameter2&gt;, etc... )<br>
{</span><br>
    <span>    &lt;statement1&gt;;</span><br>
    <span>    &lt;statement1&gt;;</span><br>
    <span>    ...</span><br>
    <span>}</span></p>
  <p>или:</p>
  <p class="code"><span><span>&lt;имя&gt; = </span>function( &lt;параметр1&gt;, &lt;параметр2&gt;, и т.д... )</span><br>
    <span>{</span><br>
    <span>    &lt;statement1&gt;;</span><br>
    <span>    &lt;statement1&gt;;</span><br>
    <span>    ...</span><br>
    <span>}</span></p>
  <p>В общем случае, однако, для скриптовых функций следует использовать <em>первую </em>форму, так как она определяет функцию именно как скриптовую, то есть она будет <strong>глобальной </strong>по <a href="Variables_And_Variable_Scope.htm">области применения</a>,
    ей будет присвоен <strong>индекс скрипта</strong>, и не потребуется префикс <span class="inline">global</span> для ее идентификации, поскольку компилятор распознает ее как скрипт-функцию. При использовании второй формы вместо этого будет создана глобальная область видимости
   <a href="Method_Variables.htm">переменную метода</a>, и как таковая она <em>не </em>будет распознана IDE как функция сценария и потребует использования префикса <span class="inline">global</span> при ссылке на нее в вашем коде.</p>
  <p class="note"><strong>ПРИМЕЧАНИЕ</strong>: Вы можете проверить это, используя обе формы в сценарии, а затем вызвав функцию <a href="../GML_Reference/Variable_Functions/typeof.htm">typeof()</a> <span class="notranslate">для</span> каждой из них. Одна из них будет классифицирована как &quot;число&quot; - поскольку
    она возвращает идентификатор индекса сценария, а другая будет классифицирована как &quot;метод&quot;.</p>
  <h2>Аргументы</h2>
  <p>Вы можете определить собственные параметры/аргументы для функции, которые будут доступны функции как локальные переменные и могут быть использованы любым образом:</p>
  <p class="code">function move<strong>(spd, dir</strong>)<br> {
    <br> скорость = <strong>spd</strong>;<br> направление = <strong>dir</strong>;<br> }
  </p>
  <p>Эта функция принимает два аргумента и применяет их значения к переменным <tt>скорости и</tt> <tt>направления</tt> движения экземпляра. Теперь ее можно вызывать как любую функцию <span class="notranslate">времени выполнения</span> и передавать в нее аргументы:</p>
  <p class="code">var _mouse_dir = point_direction(x, y, mouse_x, mouse_y);<br>
    <br>
   <strong>move(4, _mouse_dir);</strong></p>
  <p>Обратите внимание, что если аргумент не передан функции, его значение будет <tt>неопределенным</tt>. Вы можете использовать это для определения <em>необязательных</em> аргументов и проверять, передан аргумент или нет, проверяя, равен ли он <tt>undefined</tt>. Однако,
    вы также можете определить значение по умолчанию для аргумента, которое будет использоваться вместо <tt>undefined</tt>, если он не передан.</p>
  <p>Вы можете присвоить такое значение по умолчанию параметру с помощью знака равенства<tt>(=</tt>), сделав его необязательной переменной:</p>
  <p class="code">function move(spd, <strong>dir = 90</strong>)<br> {
    <br> скорость = spd;<br> направление = dir;<br> }
  </p>
  <p>Если аргумент <tt>dir</tt> не передан при вызове вышеуказанной функции, то его значение по умолчанию будет равно <tt>90</tt>, что приведет к перемещению экземпляра в направлении вверх.</p>
  <p>Значением по умолчанию необязательной переменной может быть выражение, поэтому, например, при определении необязательной переменной можно использовать переменные и вызывать функции. Обратите внимание, что такое выражение будет выполнено только в том случае, если его необязательный аргумент не указан
    в вызове функции. См. следующий пример функции протоколирования:</p>
  <p class="code">function log(text = &quot;Log&quot;, object = object_index, time = date_datetime_string(date_current_datetime()))<br> {
    <br> var _string = &quot;[&quot; + string(time) + &quot;] &quot;;<br> _string += object_get_name(object) + &quot;: &quot;;<br> _string += text;<br>     <br> show_debug_message(_string);<br> }
  </p>
  <p>Эта функция принимает три аргумента, где первый аргумент по умолчанию является строковой константой, второй аргумент по умолчанию является переменной экземпляра (в области видимости вызывающего экземпляра), а третий аргумент по умолчанию является выражением, вызывающим функцию
    для получения текущей даты и времени. Теперь эта функция может быть вызвана с тремя аргументами, как показано в следующем примере:</p>
  <p class="code">log();<br> // Prints: [09-Jun-21 12:34:37 PM] Object1: Log<br>
    <br> log(&quot;Player Shot&quot;, obj_player, 10);<br> // Prints: [10] obj_player: Выстрел игрока</p>
  <h2>JSDoc</h2>
  <p>Мы также рекомендуем добавлять комментарии для определения свойств функции (подробнее см. раздел " <a href="../../The_Asset_Editors/Code_Editor_Properties/JSDoc_Script_Comments.htm">Комментарии JSDoc"</a> ), например, простой сценарий может выглядеть следующим образом
    выглядел следующим образом:</p>
  <p class="code">/// @function log(message);<br> /// @param {string} message Сообщение для показа<br> /// @description Показывайте сообщение при каждом вызове функции.<br>
    <br> function log(message)<br> {
    <br> show_debug_message(message);
    <br> }
  </p>
  <p>Дополнительные функции для скрипта могут быть добавлены в том же формате, как показано выше, одна за другой внутри актива скрипта.</p>
  <p><img alt="Multiple Functions In One Script" class="center" src="../../assets/Images/Scripting_Reference/GML/Overview/Multiple_Functions_Scripts.png" /></p>
  <h2>Возвращаемое значение</h2>
  <p>Функции в сценариях также могут возвращать значение, как и функции <span class="notranslate">времени выполнения</span>, и поэтому их можно использовать в выражениях. Для этого вы можете использовать <a href="Language_Features/return.htm"><tt>return</tt></a> оператор:</p>
  <p class="code">вернуть &lt;выражение</p>
  <p>Следует заметить, что в качестве параметра возврата используется <strong><i>выполнение функции заканчивается на операторе return</i></strong>означает, что любой код, пришедший после вызова <strong>return </strong>, <i>не будет выполнен</i>. Вот короткий пример функции из
    функция под названием &quot;<span class="inline">sqr_calc</span>&quot;, которая вычисляет квадрат любого переданного ей значения, и в случае, если данное значение не является действительным числом, она использует return для досрочного <strong>завершения</strong> функции, так что фактическое вычисление никогда не выполняется.
    вычисление никогда не выполняется:</p>
  <p class="code">/// @function sqr_calc(val);<br> /// @param {real} val Значение для вычисления квадрата<br> /// @description Вычисление квадрата заданного значения<br>
    <br> function sqr_calc(val)<br> {
    <br> if !is_real(val)<br> {
    <br> return 0;<br> }
    <br>
    <br> return (val * val);<br> }
  </p>
  <p>Обратите внимание, что если вы создадите функцию скрипта <em>без</em> возвращаемого значения, а затем в своем коде проверите его наличие, то по умолчанию вы получите значение <span class="inline">undefined</span>.</p>
  <p>Чтобы вызвать функцию скрипта из кода, просто используйте ее так же, как и при вызове любой функции <span class="notranslate">времени выполнения</span> - то есть напишите имя функции со значениями параметров в круглых скобках. Таким образом, приведенный выше сценарий будет вызываться следующим образом:</p>
  <p class="code">if keyboard_check_pressed(vk_enter)<br> {
    <br> val = scr_sqr(amount);<br> }
  </p>
  <p class="note"><strong>ПРИМЕЧАНИЕ</strong>: При использовании собственных функций из скриптов в редакторе кода можно нажать кнопку<span> <img alt="F1 Icon" class="icon" height="20" src="../../assets/Images/Icons/Icon_f1.png" width="55"></span> или нажать среднюю кнопку мыши <span><img alt="MMB Icon" class="icon" src="../../assets/Images/Icons/Icon_MMB.png"> </span>на
    на имени функции, чтобы открыть содержащий ее сценарий для редактирования.</p>
  <h2>Имена сценариев в сравнении с именами функций</h2>
  <p>Важно понимать, что <i>имена</i> скриптов <b>не зависят от функций, которые они содержат</b>, поэтому вы можете называть свои скрипты более &quot;здравым&quot; образом, т.е.: все ваши функции AI могут находиться в скрипте &quot;<span class="inline">Enemy_AI</span>&quot;.
    (следуя стандартным соглашениям об именовании активов, состоящим только из буквенно-цифровых символов и символа &quot;_&quot;). Однако, вы все еще можете вызывать скрипты в вашей игре - и вы можете называть скрипты так же, как и функции, которые вы определяете в них - что
    может привести к возникновению проблем из-за способа хранения ссылок на активы в <span class="notranslate">GameMaker Studio 2</span>. Для примера рассмотрим этот код, вызываемый из экземпляра:</p>
  <p class="code">function indirectCall(func, arg)<br> {
    <br> func(arg);
    <br> }
    <br>
    <br> indirectCall(myscript, arg);</p>
  <p>Приведенный выше код пытается вызвать сценарий под названием &quot;myscript&quot; внутри метода, что в данном случае приведет к неудаче. Это происходит потому, что встроенная функция фактически использует <em>индекс</em> для актива скрипта, а <strong>не </strong>фактически
    например: если индекс скрипта разрешается в &quot;4&quot;, то, по сути, функция вызывает 4(arg); , <tt>что</tt> не имеет смысла. Вместо этого код должен быть структурирован одним из следующих двух способов:</p>
  <p class="code">function indirectCall(func, arg)<br> {
    <br> func(arg);
    <br> }
    <br>
    <br> indirectCall(method(undefined, myscript), arg);<br>
    <br> // ИЛИ<br>
    <br> function indirectCall(func, arg)<br> {
    <br> script_execute(func, arg);<br> }
    <br>
    <br> indirectCall(myscript, arg);</p>
  <p>Это важно отметить, особенно при работе со старыми проектами, где скрипты содержат одну единственную функцию, и функция называется так же, как и скрипт. Однако на самом деле так делать <em>никогда не</em> следует, и ваши скрипты должны иметь имена
    независимо от функций, которые они содержат.</p>
  <h2>Объем сценария</h2>
  <p>Это подводит нас к последней и самой важной вещи, которую необходимо знать о скриптах и функциях, которые они содержат: скрипты анализируются на <b>глобальном</b> уровне и <strong>компилируются в самом начале игры</strong>. Это означает, что <em>технически</em> все функции в скрипте являются &quot;несвязанными&quot; <a href="Method_Variables.htm">переменными</a> метода <a href="Method_Variables.htm">, а любые</a> переменные, объявленные вне функции в скрипте, будут считаться глобальными <a href="Variables/Global_Variables.htm">переменными.</a>
    Например, рассмотрим этот скрипт:</p>
  <p class="code">function Foo()<br> {
    <br> // Сделайте что-нибудь<br> }
    <br> blah = 10;<br> function Bar()<br> {
    <br> // Сделайте что-нибудь еще<br> }
  </p>
  <p>В приведенном выше случае мы определили не только функции <tt>Foo</tt> и <tt>Bar</tt>, но и переменную <tt>blah</tt>, и все они считаются созданными в <b>глобальной</b> области видимости. Для распознавания функций не требуется ключевое слово <tt>global</tt>, так как компилятор понимает, что эти функции являются частью сценария, но если бы вы захотели получить доступ к blah, то вам пришлось бы это сделать:</p>
  <p class="code">val = global.blah;</p>
  <p>Тем не менее, мы рекомендуем <b>всегда явно указывать глобальные переменные</b> при их создании в скриптах, чтобы избежать проблем в дальнейшем. Сценарии также являются идеальным местом для определения любых <strong>макросов</strong> или <strong>Enums</strong><a href="Variables/Constants.htm">(констант</a>),
    поскольку добавление их в скрипт вне функции означает, что они будут созданы для использования до того, как код игры начнет выполняться. Ниже приведен пример скрипта, который создает различные значения глобальной области видимости для игры:</p>
  <p class="code">/// Инициализация всех глобальных значений и констант<br> global.player_score = 0;<br> global.player_hp = 100;<br> global.pause = false;<br> global.music = true;<br> global.sound = true;<br>
    <br> enum rainbowcolors<br> {
    <br> красный,<br> оранжевый,<br> желтый,<br> зеленый,<br> синий,<br> индиго,<br> фиолетовый<br> }
    <br>
    <br> #macro weapon_num 3<br> #macro weapon_gun 0<br> #macro weapon_bomb 1<br> #macro weapon_knife 2</p>
  <p>Обратите внимание, что все эти константы устанавливаются вне вызова любой функции, что означает, что они будут инициализированы до всего остального и в <em>глобальной </em>области видимости. Это означает, что если вы хотите использовать скрипт для инициализации переменных в области видимости <em>экземпляра </em>
    то вы должны обернуть их в функцию, например:</p>
  <p class="code">/// @function init_enemy();<br> /// @description Initialise enemy instance vars<br>
    <br> function init_enemy()<br> {
    <br> hp = 100;<br> dmg = 5;<br> mana = 50;<br> }
  </p>
  <p>Так, скрипты можно использовать для создания макросов, перечислений и глобальных переменных до начала игры, чтобы они были готовы к использованию в любое время, а также для создания &quot;несвязанных&quot; методов (функций, определяемых пользователем), которые можно использовать в вашей игре
    как функции <span class="notranslate">времени выполнения</span> <span class="notranslate">GML</span>.</p>
  <p>И последнее, что следует отметить о функциях скриптов: если вы разрабатываете для <strong>Web </strong>(т.е. ориентируетесь на <strong>HTML5</strong>), то существует дополнительный протокол функций, который вы можете использовать при добавлении функций в скрипты, а именно
    префикс имени функции с <tt>gmcallback_</tt>, например:</p>
  <p class="code">gmcallback_create_button</p>
  <p>Использование приведенного выше имени функции означает, что функция <tt>gmcallback_create_button()</tt> не будет обфусцирована и поэтому может быть использована в расширениях JavaScript и других областях вашей игры, например, при использовании <a href="../GML_Reference/Web_And_HTML5/Web_And_HTML5.htm"><tt>clickable_*</tt></a> функции.</p>
  <h2>Статические переменные</h2>
  <p>Функции также могут использовать статические переменные, которые сохраняют свои значения при каждом вызове функции. Для получения дополнительной информации <a href="Functions/Static_Variables.htm">прочтите эту страницу</a>.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="GML_Overview.htm">Обзор<span class="notranslate">GML</span></a></div>
        <div style="float:right">Следующий: <a href="Method_Variables.htm">Переменные метода</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions
User Defined Functions
function
gmcallback
-->
  <!-- TAGS
script_functions
-->
</body>
</html>