<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Местные переменные</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining local variables" />
  <meta name="rh-index-keywords" content="var,Local Variables" />
  <meta name="search-keywords" content="local variables,local,var,local scope" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Местные переменные</h1>
  <p> <strong>Локальная</strong> переменная - это переменная, которую мы создаем <i>только</i> для определенного <strong>события</strong> или <strong>функции</strong>, а затем отбрасываем после завершения события или функции. Если она создана в пользовательской функции, то локальная переменная
    доступна только для этой функции, а затем отбрасывается по ее завершении. Зачем они нам нужны? Переменные занимают место в памяти, и может случиться так, что мы будем использовать их только для одной операции или функции, и в этом случае нам нужно иметь их в памяти только для
    в этом случае нам нужно держать ее в памяти только на то короткое время, пока она используется. Это позволяет поддерживать чистоту и порядок в кодовой базе, а также оптимизировать пространство памяти для тех вещей, которые действительно в ней нуждаются. Чтобы объявить локальную переменную, мы используем оператор <span class="inline"><strong><tt>var</tt></strong></span>.
    следующим образом:</p>
  <p class="code">var _i, _num, _str;<br> _i = 0;<br> _num = 24.5;<br> _str = &quot;Hello World&quot;;<br>
    <br> // или<br>
    <br> var _i = 0, _num = 24.5, _str = &quot;Hello World&quot;;<br>
    <br> // или<br>
    <br> var _i = 0;<br> var _num = 24.5;<br> var _str = &quot;Hello World&quot;;</p>
  <p>Все переменные, созданные таким образом, будут &quot;забыты&quot; (т.е. удалены из памяти) в конце события (или функции), в котором они были созданы. Вы должны быть внимательны, чтобы имя, которое вы даете всем объявленным переменным <tt>var</tt>, не совпадало с именем другой переменной экземпляра в объекте, выполняющем функцию.
    не совпадает с именем другой переменной экземпляра в объекте, выполняющем код, а также убедитесь, что у вас нет намерения использовать значение, хранящееся в этой переменной, за пределами события или функции, в которой вы ее объявили (в примерах выше, все
    объявленные переменные <tt>var</tt> были определены с подчеркиванием &quot;_&quot; перед именем переменной, но это не обязательно и сделано просто для того, чтобы сделать более очевидным в коде, что мы имеем дело с локальной переменной). При этом,
    если вы окажетесь в ситуации, когда вам кажется, что локальная переменная <em>должна</em> быть такой же, как и переменная экземпляра, то вы можете использовать <a href="../Instance_Keywords.htm">ключевое слово</a> <span class="inline">self</span>, чтобы идентифицировать переменную экземпляра как отдельную.
    как отдельную, например:</p>
  <p class="code">var hp = 10;<br> with (obj_Enemy)<br> {
    <br> self.hp -= hp;<br> }
  </p>
  <p>Локальные переменные часто используются в программах, особенно в циклах для подсчета <a class="glossterm" data-glossterm="итерация" href="#">итераций</a>, или когда значение используется несколько раз в одной операции, которая не собирается
    не будет повторяться снова. Вот еще пара примеров:</p>
  <p class="code">var _i = 0;<br> repeat (10)<br> {
    <br> inventory[_i] = 0;<br> _i += 1;<br> }
  </p>
  <p>Приведенный выше код создает локальную переменную под названием &quot;<span class="inline">_i</span>&quot; и устанавливает ее в 0, и все это в одной строке. Обратите внимание, что в предыдущих версиях <i><span class="notranslate">GameMaker</span></i> нужно было сначала объявлять локальные переменные, а <i>затем</i> присваивать им значения.
    но в этой версии вы можете объявлять <i>и</i> присваивать им значение одновременно. В приведенном выше коде эта переменная используется для инициализации <a href="../Arrays.htm">массива</a>. Поскольку переменная &quot;<span class="inline">_i</span>&quot;
    не будет использоваться ни для каких других функций в экземпляре, кроме этой, она может быть локальной по области видимости. Приведем еще один пример:</p>
  <p class="code">var _x, _y;<br> _x = x - 32 + irandom(64);<br> _y = y - 32 + irandom(64);<br> instance_create_layer(_x, _y, &quot;Effects&quot;, obj_blood);</p>
  <p>Здесь мы использовали локальные переменные &quot;<span class="inline">_x</span>&quot; и &quot;<span class="inline">_y</span>&quot; для хранения некоторых случайных координат, которые мы затем используем для создания экземпляра. В этом примере вы можете видеть, что использование этих переменных не является строго
    но для удобства чтения и простоты использования мы используем эти переменные. Намного понятнее и очевиднее, что мы делаем, чем если бы мы использовали этот код:</p>
  <p class="code">instance_create_layer(x - 32 + irandom(64), y - 32 + irandom(64), &quot;Effects&quot;, obj_guts);</p>
  <p>Следует отметить еще одну вещь о локальных переменных, объявленных <tt>var</tt>... Поскольку они уникальны для события или функции, которая их запускает, они могут быть использованы в любых других экземплярах кода! Это означает, что мы можем использовать эти переменные для установки
    и изменять что-то в других экземплярах, используя конструкцию &quot;<span class="inline">with()</span>&quot; ( <a href="../Variables_And_Variable_Scope.htm">более подробную</a> информацию смотрите в разделе об <a href="../Variables_And_Variable_Scope.htm">области видимости</a> переменных). Фактический код будет выглядеть примерно так
    примерно так:</p>
  <p class="code">var num = instance_number(obj_Enemy);<br> with (obj_Enemy)<br> {
    <br> if num&gt;10 instance_destroy();<br> }
  </p>
  <p>Приведенный выше код работает, потому что объявленная переменная <tt>var</tt> является локальной для <i>события</i> (или функции), в котором она содержится, а не для экземпляра или игрового мира, и поэтому может использоваться в любой функции в любом объекте, если она находится в том же блоке кода.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="../Variables_And_Variable_Scope.htm">Переменные и область применения переменных</a></div>
        <div style="float:right">Следующее: <a href="Instance_Variables.htm">Переменные экземпляра</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
local variables
var
-->
  <!-- TAGS
var
local_variables
-->

</body></html>