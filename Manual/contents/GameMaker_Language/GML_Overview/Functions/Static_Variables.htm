<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Статические переменные</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of Static Variables" />
  <meta name="rh-index-keywords" content="Static Variables" />
  <meta name="search-keywords" content="Static Variables,static" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Статические переменные</h1>
  <p>Интересной особенностью <a href="../Script_Functions.htm">функций сценария</a> и <a href="../Method_Variables.htm">переменных метода</a> является то, что они могут иметь <strong>статические переменные</strong>. Статическая переменная - это переменная, которая определяется в первый раз, когда
    при первом вызове функции и сохраняет свое значение в дальнейшем. Чтобы создать статическую переменную, необходимо определить ее с помощью ключевого слова <span class="inline">static</span>, как показано в этом простом примере:</p>
  <p class="code">counter = function()<br> {
    <br> static num = 0;<br> return num++;<br> }
  </p>
  <p>В приведенном выше примере переменная <span class="inline">num</span> является статической переменной, поэтому при первом вызове функции она будет определена как <tt>0</tt>, но при каждом последующем вызове функции инициализация переменной будет игнорироваться.
    игнорируется. Поэтому, если вы вызовете эту функцию следующим образом:</p>
  <p class="code">for (var i = 0; i &lt; 10; ++i;)<br> {
    <br> show_debug_message(counter());<br> }
  </p>
  <p>Выходные данные будут такими:</p>
  <p class="code">0<br> 1
    <br> 2
    <br> 3
    <br> 4
    <br> 5
    <br> 6
    <br> 7
    <br> 8
    <br> 9
  </p>
  <p>Если бы вы не использовали здесь ключевое слово <span class="inline">static</span>, то на выходе был бы просто 0 <tt>для</tt> каждой итерации цикла, так как переменная <span class="inline">num</span> будет определяться как 0 каждый раз, когда
    функция вызывается перед возвратом. Обратите внимание, что статическая переменная может быть изменена только внутри исходной функции, и возврат ее просто даст вам копию ее значения - по сути, общая статическая переменная может быть изменена только той
    функция, которая ее содержит.</p>
  <p>Статическая переменная всегда инициализируется в верхней части функции, поэтому независимо от того, где вы определяете статическую переменную в функции, она всегда будет доступна для чтения и изменения на протяжении всей функции (даже если она используется до того, как была определена).
    См. следующий пример:</p>
  <p class="code">function add_health()<br> {
    <br> my_health++;<br> show_debug_message(my_health);<br> static my_health = 1;<br> }
  </p>
  <p>Здесь статическая переменная &quot; my_health<tt>&quot;</tt> изменяется и выводится в вывод компилятора до <em>инициализации</em>. Хотя это выглядит неправильно, это совершенно нормально, потому что статические переменные инициализируются <em>до </em>выполнения любого
    кода функции. Обратите внимание, что если в функции несколько статических переменных, то при их инициализации сверху сохраняется порядок, в котором они были определены.</p>
  <p>Вы также можете использовать ключевое слово <span class="inline">static</span> внутри функции для создания <strong>статической функции</strong>, что - как и в случае с переменными - просто означает, что функция будет определена только один раз, то есть при первом вызове функции.
    вызывается, например:</p>
  <p class="code">function(_x, _y) Vector2 constructor<br> {
    <br> x = _x;<br> y = _y;<br>
    <br> static Add = function( _other )<br> {<br> x += _other.x;<br> y += _other.y;<br> } <br> }
  </p>
  <p>В приведенном выше примере функция конструктора <tt><span class="inline">Vector2</span></tt> может быть использована для создания структуры, а структура будет иметь несколько переменных, одной из которых является переменная метода <tt><span class="inline">Add</span></tt>. Поскольку
    эта переменная была определена как статическая, функция, которую она содержит, будет инициализирована только <em>один раз </em>при первом вызове функции <span class="inline">Vector2</span>, и все последующие структуры, созданные с помощью этого конструктора, будут ссылаться на функцию , которая была создана изначально, вместо того, чтобы создавать новую функцию.
    на функцию <span class="inline">Add</span>, которая была создана изначально, вместо того, чтобы создавать новую функцию для каждой структуры (более подробную информацию о структурах и ключевом слове <span class="inline">constructor</span> можно найти <a href="../Structs.htm">здесь</a>).</p>
  <p>При использовании наследования с конструкторами любые статические переменные в дочернем конструкторе будут инициализированы только после выполнения родительского конструктора, поэтому статические переменные дочернего конструктора не будут переопределять статические переменные родительского конструктора.
    переменные. Смотрите следующий пример:</p>
  <p class="code">function Parent() constructor<br> {
    <br> show_debug_message(value);<br> static value = 10;<br> }
    <br>
    <br> function Child() : Parent() constructor<br> {
    <br> show_debug_message(value);<br> static value = 20;<br> }
    <br>
    <br> var _child = new Child();</p>
  <p>Вызов конструктора <tt>Child()</tt> выводит это в журнал вывода:</p>
  <p class="code">10<br> 20
  </p>
  <p>Первое значение - из родительского конструктора, а второе - из дочернего конструктора. Это показывает, что <tt>значение</tt> статической переменной дочернего конструктора не <tt>было</tt> инициализировано до завершения работы родительского конструктора, и что в каждом конструкторе
    статическая переменная была инициализирована до вызова <tt>show_debug_message()</tt>.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="../GML_Overview.htm">Обзор<span class="notranslate">GML</span></a></div>
        <div style="float:right">Следующее: <a href="../Structs.htm">Структуры</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
Static Variables
static
-->
  <!-- TAGS
static
-->
</body>
</html>