<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>делать / пока</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the do / until functions" />
  <meta name="rh-index-keywords" content="do,until" />
  <meta name="search-keywords" content="do,until" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>делать / пока</h1>
  <p>Функция <tt>do</tt> - это еще один способ многократной итерации одного или нескольких<span class="glossextra">утверждений</span>, и на самом деле это утверждение типа &quot;do...<tt>until&quot;</tt>.
    вы не можете иметь одно без другого, поскольку вы говорите <span class="notranslate">GameMaker Studio 2</span> делать что-то до тех пор, пока определенное <a class="glossterm" data-glossterm="выражение" href="#">выражение</a> не станет <tt>истинным</tt>. Оно имеет следующую форму:</p>
  <p class="code">сделать<br> {
    <br> &lt;высказывание&gt;;
    <br> &lt;утверждение&gt;;
    <br> ...
    <br> }
    <br> until (&lt;выражение&gt;);</p>
  <p>Оператор (который может быть блоком кода из нескольких операторов в фигурных скобках <tt>{}</tt>) выполняется до тех пор, пока выражение не будет признано <tt>истинным</tt>, а начальный оператор <strong>всегда выполняется хотя бы один раз</strong>. Ниже вы
    приведен пример типичного способа использования <tt>do... until</tt>:</p>
  <p class="code">сделать<br> {
    <br> x = random(room_width);<br> y = random(room_height);<br> }
    <br> until (place_free(x, y));</p>
  <p>Приведенный выше код пытается поместить текущий объект в свободную позицию и устанавливает переменные x/y по крайней мере один раз, а затем выполняет столько <a class="glossterm" data-glossterm="итерация" href="#">итераций</a>, сколько необходимо
    пока выражение <tt>place_free()</tt> не вернет <tt>true</tt>.</p>
  <p><strong>Когда следует использовать цикл <span class="inline">do</span> / <span class="inline">until</span>?</strong> Его следует использовать в любом случае, когда вы хотите повторить одно или несколько утверждений, но не знаете, сколько раз они должны повториться, и хотите
    убедиться, что утверждения будут выполнены <em>хотя бы один раз</em> до завершения цикла.</p>
  <p>Вы также можете использовать <a href="break.htm"><span class="inline">break</span></a> и <a href="continue.htm"><span class="inline">continue</span></a> в циклах <span class="inline">do</span>. Использование <span class="inline">break</span> позволит
    немедленно выйти из цикла и перейти к любому коду, который находится в событии или функции после того, как цикл должен был завершиться, например:</p>
  <p class="code">var _id = noone;<br> do
    <br> {<br> _id = list[| 0];<br> if instance_exists(_id)<br> {<br> _break;<br> } <br> ds_list_delete(list, 0);<br> } <br> until (ds_list_empty(list));<br> target = _id;</p>
  <p>В приведенном выше коде мы создаем локальную переменную и устанавливаем ее для хранения ключевого слова <a href="../Instance_Keywords.htm">noone</a>. Затем мы выполняем цикл <span class="inline">do / until</span>, проверяя первую позицию списка DS, чтобы узнать, содержит ли она действительный
    ID экземпляра, и если это так, то мы <span class="inline">break</span> цикл, в противном случае значение для позиции списка удаляется. После завершения цикла (либо по команде <span class="inline">break</span>, либо потому, что список пуст) значение локальной переменной
    значение локальной переменной присваивается переменной экземпляра <span class="inline">target</span>.</p>
  <p>Примером использования continue в цикле <span class="inline">do / until</span> может быть:</p>
  <p class="code">сделать<br> {
    <br> var _x = random(room_width);<br> var _y = random(room_height);<br> if (instance_position(_x, y, obj_Enemy)<br> {
    <br> continue;
    <br> }
    <br> instance_create_layer(_x, _y, &quot;Instances&quot;, obj_Enemy);<br> }
    <br> until (instance_count(obj_Enemy) &gt;= 10);</p>
  <p>Этот код генерирует случайную позицию комнаты, затем проверяет, существует ли в этой позиции экземпляр объекта <span class="inline">obj_Enemy</span>. Если да, то текущая итерация цикла завершается с помощью <span class="inline">continue</span> и начинается новая итерация.
    и начинается новая итерация, а если нет, то в случайной позиции создается экземпляр объекта <span class="inline">obj_Enemy</span>. Цикл завершится только тогда, когда в комнате будет 10 или более экземпляров объекта.</p>
  <p>И последнее замечание: будьте осторожны с циклами <tt>do</tt>, так как вы легко можете сделать их вечными, и тогда ваша игра зависнет и больше не будет реагировать на ввод пользователя, и ему придется принудительно закрыть ее.</p>
  <p>Другие примеры ключевых слов цикла см. в разделах <a href="repeat.htm"><tt>повторить</tt></a>, <a href="while.htm"><tt>пока</tt></a>, и <a href="for.htm"><tt>for</tt></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="../Language_Features.htm">Особенности языка</a></div>
        <div style="float:right">Далее: <a href="for.htm">для</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
do
until
-->
  <!-- TAGS
do
until
-->

</body></html>