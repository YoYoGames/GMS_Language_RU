<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Планирование движения</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference section for Motion Planning functions and variables" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Motion Planning,mp,mp funtions" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Планирование движения</h1>
  <p>Во многих играх вы хотите, чтобы противники, NPC, враги и т.д... взаимодействовали с игроком и проявляли определенный интеллект при передвижении, т.е. вы хотите, чтобы они избегали препятствий, планировали маршруты и вообще не натыкались на все на своем пути! Чтобы помочь в
    В <span class="notranslate">GameMaker Studio 2</span> есть ряд функций, которые занимаются планированием движения. Обратите внимание, что хотя они предназначены для таких вещей, как игровые враги, их можно использовать для самых разных вещей, например, для создания плавного способа
    для введения текста, или для создания переходов и т.д.. Однако, что бы вы ни решили использовать из приведенного ниже списка в своей игре, следует отметить, что во многих ситуациях один набор функций не даст вам идеального решения, и что вам придется
    &quot;смешивать и сочетать&quot; функции, используя то одну, то другую в зависимости от ситуации в вашей игре.</p>
  <p>Планированием движения в <span class="notranslate">GameMaker Studio 2</span> занимаются функции <b>mp_</b>, которые делятся на следующие три группы:</p>
  <p> </p>
  <h2><label for="one">Линейные функции</label></h2>
  <p>Такая функция пытается вычислить путь без столкновений для экземпляра. После вычисления этого пути вы можете назначить его экземпляру для движения к цели. Вычисление пути займет некоторое время, но после этого выполнение
    пути будет быстрым. Конечно, это справедливо только в том случае, если за прошедшее время ситуация не изменилась. Например, при изменении препятствий вам, возможно, придется заново вычислять путь. Снова обратите внимание, что эти функции могут не сработать, и путь может быть не найден.
    не будет найден для данного экземпляра.</p>
  <p> </p>
  <ul class="colour">
    <li><a href="mp_linear_step.htm">mp_linear_step</a></li>
    <li><a href="mp_linear_step_object.htm">mp_linear_step_object</a></li>
    <li><a href="mp_linear_path.htm">mp_linear_path</a></li>
    <li><a href="mp_linear_path_object.htm">mp_linear_path_object</a></li>
  </ul>
  <p> </p>
  <h2><label for="three">Потенциальные функции</label></h2>
  <p> </p>
  <p>Это базовые функции избегания, которые подходят для простого ИИ. Они работают, заставляя экземпляр делать шаг к определенной цели, стараясь идти прямо, если это возможно, но при необходимости выбирая другое направление. Эти функции должны
    должны использоваться в <b>событии Step Event</b> экземпляра.</p>
  <p> </p>
  <ul class="colour">
    <li><a href="mp_potential_settings.htm">mp_potential_settings</a></li>
    <li><a href="mp_potential_step.htm">mp_potential_step</a></li>
    <li><a href="mp_potential_step_object.htm">mp_potential_step_object</a></li>
    <li><a href="mp_potential_path.htm">mp_potential_path</a></li>
    <li><a href="mp_potential_path_object.htm">mp_potential_path_object</a></li>
  </ul>
  <p> </p>
  <h2><label for="two">Функции сетки</label></h2>
  <p> </p>
  <p>Последний тип функции использует гораздо более сложный механизм, основанный на подходе на основе сетки (иногда называемый алгоритмом A*). Он будет гораздо успешнее в поиске путей (хотя все равно может потерпеть неудачу) и будет находить кратчайшие возможные пути
    но для его настройки требуется больше работы с вашей стороны.</p>
  <p>Общая идея заключается в следующем - сначала мы создаем сетку, которая покрывает комнату (или соответствующую ее часть). Вы можете выбрать мелкую сетку, которая будет медленнее, или крупную сетку, но обе они должны быть основаны на разрешении комнаты
    чтобы поиск пути был как можно более точным. Например, если у вас есть комната размером 400x200 пикселей, то разрешение сетки может быть 40, или 20, или 10... все зависит от того, насколько точным должен быть путь и как много обработки вы хотите
   <span class="notranslate">GameMaker</span> для ее создания.</p>
  <p>Далее, для всех соответствующих объектов, которых мы хотим избежать, нужно определить ячейки сетки, которые они перекрывают (основываясь либо на их ограничивающих границах, либо на их точном спрайте), и пометить эти ячейки как запрещенные. Таким образом, ячейка будет помечена как полностью запрещенная,
    даже если препятствие перекрывается лишь частично.</p>
  <p>Наконец, мы указываем начальную позицию и позицию цели, обе из которых <i>должны</i> лежать в свободных клетках, после чего функция вычисляет кратчайший путь между этими двумя позициями. Путь будет проходить между центрами всех свободных ячеек, поэтому
    Если ячейки достаточно велики, чтобы экземпляр, помещенный в их центр, полностью лежал внутри них, это будет успешным. Затем этот путь назначается экземпляру для прохождения с помощью функций <a href="../../Asset_Management/Paths/Paths.htm"><tt>путь_*</tt></a> функции.
    Вы должны понять, насколько важен для этого размер ячейки, поскольку ячейки должны быть достаточно большими, чтобы движущийся объект, помещенный в центр ячейки, <i>полностью</i> находился внутри нее. (Будьте внимательны к положению начала координат
    объекта. Также помните, что вы можете сместить траекторию, если начало объекта находится не в его центре!) С другой стороны, чем меньше ячейки, тем больше возможных путей. Если сделать ячейки слишком большими, проемы между препятствиями могут оказаться закрытыми
    потому что все ячейки пересекают препятствие.</p>
  <p> </p>
  <ul class="colour">
    <li><a href="mp_grid_create.htm">mp_grid_create</a></li>
    <li><a href="mp_grid_destroy.htm">mp_grid_destroy</a></li>
    <li><a href="mp_grid_path.htm">mp_grid_path</a></li>
    <li><a href="mp_grid_add_cell.htm">mp_grid_add_cell</a></li>
    <li><a href="mp_grid_add_instances.htm">mp_grid_add_instances</a></li>
    <li><a href="mp_grid_add_rectangle.htm">mp_grid_add_rectangle</a></li>
    <li><a href="mp_grid_get_cell.htm">mp_grid_get_cell</a></li>
    <li><a href="mp_grid_clear_all.htm">mp_grid_clear_all</a></li>
    <li><a href="mp_grid_clear_cell.htm">mp_grid_clear_cell</a></li>
    <li><a href="mp_grid_clear_rectangle.htm">mp_grid_clear_rectangle</a></li>
    <li><a href="mp_grid_to_ds_grid.htm">mp_grid_to_ds_grid</a></li>
    <li><a href="mp_grid_draw.htm">mp_grid_draw</a></li>
  </ul>
  <p> </p>
  <p>Подход на основе сетки является очень мощным (и используется во многих профессиональных играх), но он требует от вас тщательного мышления, поскольку вы должны определить, какая площадь и размер ячеек достаточно хороши для решения игры. Кроме того, вы должны определить, каких объектов
    следует избегать и важна ли точная проверка. Все эти параметры сильно влияют на эффективность подхода. Вы также должны решить, действительно ли это необходимо, так как, возможно, одна из менее дорогостоящих функций <span class="inline">mp_*</span>.
    может справиться с задачей не хуже.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="../Movement_And_Collisions.htm">Движение и столкновения</a></div>
        <div style="float:right">Следующий: <a href="../Collisions/Collisions.htm">Коллизии</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
Motion Planning
MP Functions
Motion Planning Functions
-->
  <!-- TAGS
mp_functions
-->
</body>
</html>