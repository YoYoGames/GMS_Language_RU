<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>get_login_async</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for get_login_async" />
  <meta name="rh-index-keywords" content="get_login_async" />
  <meta name="search-keywords" content="get_login_async" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>get_login_async</h1>
  <p>Эта функция открывает окно, в котором пользователю предлагается ввести имя пользователя и пароль. Эти аргументы могут быть заданы как пустая строка или вы можете сохранить ранее введенные значения, чтобы использовать их при желании. Это асинхронная функция, и поэтому <span class="notranslate">GameMaker Studio</span>
    2 <i>не</i> блокирует устройство, на котором она выполняется, в ожидании ответа, а продолжает выполнять события в обычном режиме. После того как пользователь ввел данные и нажал кнопку &quot;Ок&quot;, запускается асинхронное <b>событие</b> User Interaction (Взаимодействие с пользователем).
    запускается асинхронное событие взаимодействия с пользователем, которое <i>только</i> на время этого события будет иметь карту DS, хранящуюся в переменной <a href="../../../GML_Overview/Variables/Builtin_Global_Variables/async_load.htm"><tt>async_load</tt></a>.</p>
  <p>Эта карта будет содержать два ключа, &quot; username<strong>&quot; и</strong>&quot;password&quot;, с соответствующим<strong>вводом</strong> пользователя, хранящимся в каждом из них. Поскольку была создана карта DS Map, она может быть использована, например, командой
    <a href="../../File_Handling/Encoding_And_Hashing/json_encode.htm"><tt>json_encode()</tt></a> функции, готовой к отправке на сервер или записи в файл на выбранном устройстве.</p>
  <p>Эта функция вернет индексный номер для сработавшего асинхронного события, который затем может быть проверен в соответствующем событии, чтобы вы могли &quot;нацелиться&quot; на конкретные данные в случае, если вы ожидаете срабатывания более одного асинхронного события
    (возможно, от какой-то другой функции).</p>
  <p class="note"><strong><em>ПРИМЕЧАНИЕ:</em></strong><em> Эта функция <span data-keyref="Dialog for debug only">предназначена <strong>только</strong> для <strong>отладки и тестирования</strong></span>и не должна использоваться в выпущенных играх. Для этих целей вы должны создать пользовательский интерфейс для получения ввода от игроков, чтобы иметь полный контроль над тем, как выглядят и ведут себя диалоги.</em></p>
  <p> </p>
  <h4>Синтаксис:</h4>
  <p class="code">get_login_async(name, password);</p>
  <table>
    <tbody>
      <tr>
        <th>Аргумент</th>
        <th>Описание</th>
      </tr>
      <tr>
        <td>имя пользователя</td>
        <td>Имя пользователя по умолчанию</td>
      </tr>
      <tr>
        <td>пароль</td>
        <td>Пароль по умолчанию</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Возвращается:</h4>
  <p class="code">Реально</p>
  <p> </p>
  <h4>Расширенный пример:</h4>
  <p> <b>Событие create</b> (например) объекта, контролирующего вход нашего пользователя, будет иметь следующий код:</p>
  <p class="code">ini_open(&quot;Profile.ini&quot;);<br> u = ini_read_string(&quot;User&quot;, &quot;0&quot;,&quot;&quot;);<br> p = ini_read_string(&quot;User&quot;, &quot;1&quot;,&quot;&quot;);<br> ini_close();
    <br> login = get_login_async(u,p);</p>
  <p>Приведенный выше код открывает файл ini (или создает его, если он не существует) и получает имя и пароль, хранящиеся в этом файле. Если они не существуют, то по умолчанию возвращается пустая строка (&quot;&quot;). Эти значения затем используются в <tt>get_login_async()</tt> для запроса у пользователя его имени пользователя и пароля, при этом индекс запроса сохраняется в переменной &quot;login&quot;. Обратите внимание, что в ожидании, пока пользователь сообщит необходимую информацию, игра и ее события будут продолжать работать в обычном режиме.
    как обычно.</p>
  <p>Теперь, когда асинхронный код запущен, нам нужно проверить возвращаемое значение в <a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/Dialog.htm">асинхронном событии для Dialogs</a> следующим образом:</p>
  <p class="code">if ds_map_find_value(async_load, &quot;id&quot;) == login<br> {
    <br> u = ds_map_find_value(async_load, &quot;username&quot;);<br> p = ds_map_find_value(async_load, &quot;password&quot;);<br> }
  </p>
  <p>Приведенный выше код проверяет ключ &quot;id&quot; карты <span class="inline">async_load</span> DS, и если он имеет то же значение, что и переменная &quot;login&quot;, то данные карты считываются в соответствующие переменные, которые вы можете сохранить в памяти.
    можно сохранить или использовать для сверки со значениями базы данных и т.д...</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="Dialog.htm">Диалог</a></div>
        <div style="float:right">Далее: <a href="get_string_async.htm">get_string_async</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
get_login_async
-->
  <!-- TAGS
get_login_async
-->
</body>
</html>