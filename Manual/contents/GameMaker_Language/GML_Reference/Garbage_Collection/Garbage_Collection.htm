<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Вывоз мусора</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference section for the Garbage Collection functions" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Garbage Collection" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Вывоз мусора</h1>
  <p> <strong>Сборщик мусора</strong> в <span class="notranslate">GameMaker Studio 2</span> существует потому, что методы могут передаваться в стек и оставаться без ссылок, также как и структуры и некоторые другие вещи, которые в свою очередь могут привести к утечке памяти, если они не будут &quot;очищены&quot;
    каким-то образом. Именно здесь на помощь приходит сборщик мусора, который работает в фоновом режиме игры, собирая все, на что не было ссылок, и поддерживая оптимальное использование памяти. Когда мы говорим о том, что что-то было отнесено, мы
    обычно подразумевается любая структура или функция, которая не связана (не обязательно напрямую, но через цепочку других переменных) с глобальной <strong>переменной </strong>или <strong>переменной экземпляра</strong> объекта <strong>.</strong> Также обратите внимание, что
    функции, определенные в скриптах в IDE, также не собираются, поскольку они неявно сделаны глобальными.</p>
  <p class="note"><b>ПРИМЕЧАНИЕ</b>: Обратите внимание, что такие вещи, как поверхности, структуры данных, буферы и другие динамические ресурсы <b>не</b> собираются в мусор и имеют свои собственные функции <tt>уничтожения</tt> для очистки связанной с ними памяти. Как правило,
    если все, что вы создаете во время выполнения, имеет функцию <tt>уничтожения</tt>, то это не будет собираться в мусор, и вам придется самостоятельно разбираться с этим в коде. Исключением являются последовательности, анимационные кривые и экземпляры, которые также требуют
    сборщик мусора, <b>но при этом должны вызывать функцию уничтожения</b>.</p>
  <p>Сборка мусора, которую использует <span class="notranslate">GameMaker Studio 2</span>, является &quot;генерационной&quot;. Это означает, что для уменьшения объема работы, которую необходимо выполнять каждый кадр, объекты делятся на &quot;поколения&quot;. Новые объекты создаются в поколении 0 и
    по мере старения они переходят в более старшие поколения. Общая идея заключается в том, что объекты, которые находятся здесь некоторое время, не нужно постоянно проверять на предмет удаления, а можно проверять реже (обратите внимание, что &quot;объекты&quot;
    здесь относится ко всему, что может быть собрано в мусор, а <i>не</i> к общим экземплярам объектов, определенным в браузере активов). Обратите внимание, что хотя система проверки является генерационной, фактические проверки выполняются &quot;инкрементным&quot; способом, таким образом.
    вместо того, чтобы очищать потенциально тысячи объектов из поколения за один кадр, что вызывает большой скачок в использовании процессора и потенциально влияет на игровой процесс, каждое поколение будет проверяться и, если необходимо, очистка будет распределена
    на несколько кадров, так что сборщик мусора запускается чаще, но выполняет меньше работы на каждом кадре (вы можете установить целевое время, которое сборщик мусора должен потратить на каждый кадр, используя функцию <span class="inline"><a href="gc_target_frame_time.htm">gc_target_frame_time()</a></span>).</p>
  <p>Как правило, вам никогда не придется взаимодействовать с системой сбора мусора <span class="notranslate">GameMaker Studio 2</span>, и обычно результаты ее работы не видны, но некоторые команды <span class="notranslate">GML</span> доступны для получения информации о том, что делает сборщик, и
    влиять на его поведение в ограниченной степени.</p>
  <p class="note"><b>ВАЖНО!</b> Обратите внимание, что на целевой платформе HTML5 сборкой мусора занимается движок JavaScript, поэтому ни одна из перечисленных ниже функций не повлияет на его работу, а функция <tt>gc_get_stats()</tt> вернет 0 для всех
    поля.</p>
  <p> </p>
  <ul class="colour">
    <li><a href="gc_enable.htm">gc_enable</a></li>
    <li><a href="gc_is_enabled.htm">gc_is_enabled</a></li>
    <li><a href="gc_collect.htm">gc_collect</a></li>
    <li><a href="gc_target_frame_time.htm">gc_target_frame_time</a></li>
    <li><a href="gc_get_target_frame_time.htm"><span>gc_get_target_frame_time</span></a></li>
    <li><a href="gc_get_stats.htm">gc_get_stats</a></li>
  </ul>
  <p> </p>
  <p>Чтобы помочь решить, что и когда нужно собирать в мусор, есть несколько функций, которые можно использовать для создания и проверки <strong>слабых ссылок</strong> на структуры. Слабая ссылка - это ссылка, которая не защищает ссылаемый объект от сбора
    сборщиком мусора, и поэтому может быть использована для проверки того, что структура все еще &quot;жива&quot; (на нее ссылаются) или нет где-то в игре. Для слабых ссылок доступны следующие функции:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="weak_ref_create.htm">weak_ref_create</a></li>
    <li><a href="weak_ref_alive.htm">weak_ref_alive</a></li>
    <li><a href="weak_ref_any_alive.htm">weak_ref_any_alive</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Назад: <a href="../GML_Reference.htm">Ссылка на<span class="notranslate">GML</span></a></div>
        <div style="float:right">Следующее: <a href="../Variable_Functions/Variable_Functions.htm">Функции переменных</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">© Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Все права защищены</span></h5>
  </div>
  <!-- KEYWORDS
<span class="notranslate">GML</span> Reference
-->
  <!-- TAGS
gml_reference
-->
</body>
</html>