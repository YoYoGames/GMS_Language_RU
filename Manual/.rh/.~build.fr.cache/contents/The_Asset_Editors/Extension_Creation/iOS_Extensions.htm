
  
  Расширения дляiOS / tvOS 
  Чтобы создать расширение для iOS или tvOS, необходимо сделать это в два этапа. Первая часть - это добавление самого расширения вместе с необходимыми файлами и т.д., а вторая - создание функций и макросов/констант, которые требуются расширению.
    Функции и константы добавляются с помощью файлов-заместителей , чтобы сгруппировать их вместе, поэтому вы добавляете файл-заместитель, а затем определяете функции и макросы, как описано в данном разделе .
    Чтобы добавить остальные файлы, вам нужно сначала поставить галочку в поле iOS и/или tvOS в разделе " Дополнительные возможности" редактора, чтобы открыть соответствующее окно свойств расширения (на рисунке ниже показано окно свойств iOS, на рисунке ниже показано окно свойств iOS.
    на рисунке ниже показано окно свойств для iOS, но окно для tvOS точно такое же):
  
  Здесь вы указываете следующие данные:
  
    Флаги компоновщика / флаги компилятора: Некоторые фреймворки и сторонние SDK требуют для работы добавления дополнительных флагов компоновщика и флагов компилятора, которые можно указать здесь (см. документацию, сопровождающую SDK или фреймворк, о котором идет речь).
      для получения подробной информации).
    Имя класса: Ваше расширение может иметь несколько классов, причем каждый класс будет иметь свои собственные функции и константы, поэтому вы должны дать ему имя, отражающее его назначение
    App Delegate Class Name: Имя пользовательского класса делегата приложения. Установка этого параметра позволяет расширению переопределять/расширять основные функции приложения. Чтобы использовать эту функцию, вам нужно сделать следующее:
      
        Убедитесь, что исходные файлы делегата имеют то же имя, что и класс делегата (например, @interface MyCustomAppDelegate должен быть определен в " MyCustomAppDelegate.h").
        Добавьте переменную окружения ${YYExtAppDelegateIncludes} в верхнюю часть заголовочного файла делегата вашего приложения. Она будет заменена во время компиляции соответствующими включаемыми файлами для родительского класса делегата.
        Используйте переменную окружения ${YYExtAppDelegateBaseClass} в качестве базового класса для вашего пользовательского делегата приложения. Она будет заменена во время компиляции на правильный базовый класс делегата.
           Чтобы ваше расширение работало с другими расширениями, использующими пользовательские делегаты приложений, вы должны вызывать методы базового класса из переопределенных методов вашего дочернего класса. Перед вызовом метода суперкласса необходимо убедиться, что он
          реализован в иерархии классов, чтобы избежать ошибок, например:
      
     - (BOOL)application:(UIApplication *)application willFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
         // Проверяем, реализуют ли суперклассы этот метод и вызываем его if([[self superclass] instancesRespondToSelector:@selector(application:willFinishLaunchingWithOptions:)]) return [super application:application willFinishLaunchingWithOptions:launchOptions]; else return TRUE; }
     
    
    Системные фреймворки: Здесь вы можете добавить любые системные фреймворки iOS в ваше расширение. Они добавляются нажатием на кнопку , которая добавит фреймворк, который затем можно редактировать, медленно нажимая на кнопку . Вы можете узнать больше о доступных системных фреймворках здесь. Чтобы удалить системный фреймворк, просто выберите его и нажмите кнопку .
    Inject to Info.plist: Здесь вы можете добавить любой код для инъекции в файл info.plist.
    Сторонние фреймворки и комплекты: Этот раздел предназначен для добавления сторонних фреймворков и SDK. Как и в случае с системными фреймворками, для их добавления нажмите кнопку , для редактирования нажмите , а для удаления - выберите их и нажмите  (см. документацию, прилагаемую к выбранному вами SDK, для получения информации о названии фреймворка). Если пакет фреймворка/SDK находится на вашем компьютере Mac, то вам нужно добавить путь в "Enter framework path on Mac"
      и нажмите кнопку , а если SDK или исходный код находятся на вашем ПК, используйте кнопку Add Source.
    CocoaPods: Здесь вы можете указать имя любого CocoaPods, который расширение будет использовать вместо (или как) любых SDK и фреймворков, которые были добавлены. Обратите внимание, что для iOS и  tvOS существует опция Game Option для добавления Podfile в GameMaker Studio2, которая необходима, если вы добавляете CocoaPods в этом разделе.
    ЗависимостиCocoaPods: В этом разделе вы можете перечислить различные зависимости, необходимые для CocoaPods, добавленных в предыдущем разделе. Обратите внимание, что для iOS и  tvOS существует опция Game Option для добавления Podfile.lock в GameMaker Studio2, которая необходима, если вы добавляете зависимости CocoaPod в этом разделе.
  
  Если в ваше расширение были добавлены системные или сторонние фреймворки, они теперь будут перечислены в окне свойств расширения , и для каждого из них будет установлен флажок. Если вы отметите флажок, вы включите слабую связь
    что полезно, если вам нужно "заменить" какой-либо символ из включенной библиотеки своим собственным значением, но следует отметить, что это замедлит процесс линковки.
  Дополнительную информацию о создании расширений для iOS и tvOS можно найти в Базе знанийYoYo Games, а информацию об использовании CocoaPods
    в расширениях, пожалуйста, смотрите следующее руководство:
  
    iOS и tvOS: использование какао-подборок
  
   
   
   
  
    
      
        Назад: Редактор расширений
        Следующее: Создание расширения
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

