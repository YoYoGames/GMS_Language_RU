
  
  Создание расширения
  Чтобы создать расширение, сначала нужно щелкнуть правой кнопкой мыши  в браузере активов и выбрать Создать расширение. Откроется главное окно свойств расширения:
  Теперь все готово для добавления необходимых файлов и функций, здесь же можно дать расширению имя (следуя обычному соглашению
    только буквы/цифры и никаких специальных символов, кроме символа "_"). Вы также можете задать номер версии расширения, если хотите.
  Чтобы добавить файл в новое расширение, необходимо щелкнуть значок меню  и выбрать либо файл-заглушку, либо реальный файл, который требуется для
    целевой платформы:
  
  Общий" заполнитель - это файл, который может быть любого типа, кроме тех, которые требуются для конкретных платформ (например, никаких файлов DLL или SO ), и он не будет использоваться, кроме как в качестве "компоновщика".
    файл для соединения набора функций или констант с данным расширением (обычно он используется только для расширений iOS и Android, что объясняется в разделах ниже для этих целей). Вы также можете добавить " GML"и"JS"
    файлы-заполнители для более специфического использования.
  Обычно вам не нужно использовать заполнители, если вы не собираете для iOS и Android, поэтому вы выбираете опцию Add Files, чтобы добавить любой из следующих файлов в зависимости от целевой платформы, для которой они предназначены:
  
    .gml: Это файл, созданный только с помощью языка GameMaker Language и совместимый со всеми платформами.
    .js: Это формат расширения JavaScript и совместим только с целевыми модулями JS (HTML5).
    .dll: Это формат расширения динамически подключаемой библиотеки, совместимый только с целями Windows, UWP и Xbox One (для каждой цели потребуется свой файл *.dll, совместимый с ее спецификациями).
    .dylib: Это эквивалент DLL для Mac и совместим только с Mac target (не iOS).
    .so: Это Linux-эквивалент DLL и совместим только с Ubuntu(Linux).
    .prx: Это формат файла для добавления функциональности PS4 цели (для каждой цели потребуется свой файл *.prx, совместимый с ее спецификациями).
  
  Вы заметите, что нет ни типа файла для Android ни iOSэто потому, что их настройка немного отличается. Далее вы найдете объяснения, как их настроить, но сначала давайте рассмотрим создание
    общего расширения GML для любой из целевых платформ, поскольку процесс одинаков для всех них.
  Для начала необходимо создать файл, который будет использоваться. Для расширения GML это будет текстовый файл (сохраненный с расширением .gml ), который будет иметь следующий формат:
  #define c_alice_blue return make_color_rgb(240,248,255);
    
     #define instance_create_colour var i = instance_create_layer(argument0, argument1, argument2); with (i) { image_blend = argument3; }  return i;
  Как вы видите, каждый раздел начинается с вызова #define, который в приведенном выше примере используется для определения двух функций. Вам не нужно предоставлять поля аргументов для функций, так как они будут добавлены позже, просто используйте
    define, затем имя функции и добавьте GML для соответствия. Если бы вы писали расширение DLL или JS, то процесс был бы аналогичным, но на языке, соответствующем формату файла расширения.
  После этого вам нужно добавить файл в расширение (объяснено выше), что вызовет новое окно в Свойствах расширений для Свойств файла:
  
  Здесь вы можете выбрать целевую платформу для расширения (для GM вы можете выбрать их все), а также переименовать файл расширения и установить несколько других деталей, которые мы рассмотрим в ближайшее время. Редактор должен быть автоматически заполнен
    функции, включенные в наш GML-файл, но если это не так, вы можете добавить их, нажав кнопку меню функций  и выбрав то, что вам нужно:
  
  Выбрав Add Function, вы сможете добавить функцию в расширение, которую затем можно будет вызывать в GameMaker Studio 2, как и любую другую встроенную функцию. После добавления функции откроется следующее окно, в котором можно задать свойства функции (или дважды щелкнуть на функции, чтобы открыть ее):
  
  На изображении выше мы заполнили редактор функций деталями для функции instance_create_colour(), которую мы определили в сценарии расширения GML (редактор функций предназначен не только для определения функций GML.
    и будет таким же для любого другого типа расширения). Вы можете видеть, что мы дали функции имя, которое вы будете называть при использовании функции в вашем проекте, и это имя не обязательно должно совпадать с именем, используемым в расширении - вы можете
    задать ему любое имя, а затем использовать опцию External Name, чтобы связать его с реальным именем, определенным в расширении. Ниже находится раздел для определения текста справки - текста, который будет использован во всплывающем коде и вспомогательном тексте в расширении.
    и вспомогательном тексте в нижней части редактора кода.
  Далее вы можете определить тип возврата, который может быть двойным (вещественное число с плавающей точкой ) или строкой - если внешняя функция ничего не возвращает.
    тогда это не имеет значения - и под этим вы определяете аргументы, которые будет принимать функция.
  Аргументы могут быть двойными или строками, и вы можете добавить их, нажав на кнопку add , и удалить, нажав на кнопку remove .
    удалить их, нажав кнопку remove . Если ваша функция может принимать переменные аргументы, вам также следует установить флажок Аргументы переменной длины внизу.
  ПРИМЕЧАНИЕ: Если вы создаете файл Windows dll и он содержит более четырех аргументов, все аргументы должны быть одного типа.
  После этого функция готова к использованию в проекте, она будет отображаться в автозавершении и иметь цветовую маркировку. Определенные функции можно также установить в качестве начальных или конечных функций, то есть
    что означает, что они будут автоматически вызываться при запуске игры (Init) и при завершении игры (Final).
  ВАЖНО! Все платформы поддерживают вызов функции Init, но не все платформы будут выполнять вызов функции Final. Это связано с тем, что некоторые платформы просто закрывают приложение, не давая никакого уведомления или времени для
    вызова этой функции. К платформам, на которые это влияет, относятся: iOS, Android, HTML5, PlayStation и XboxOne.
  Другой вариант - создать макрос. Макросом может быть постоянное значение или отдельный фрагмент кода (более подробную информацию о макросах можно найти здесь). Например, мы
    можем удалить определенную функцию из нашего примера расширения GML выше для цвета c_alice_blue и сделать ее макросом. Чтобы создать макрос, просто нажмите кнопку Макросы в окне Свойства расширения:
  
  Редактор здесь практически ничего не объясняет - вы указываете имя макроса/константы и значение или короткую строку кода. Обратите внимание, что если макрос представляет собой строку кода, она будет оцениваться каждый раз при вызове макроса.
  При работе с несколькими целевыми платформами стоит отметить, что вы можете создать одно расширение с одним набором функций/макросов, которое будет работать на всех платформах. Это достигается путем добавления только одной из библиотек ссылок в вашу
    игру в качестве расширения, а другую (другие) поместить в список Proxy Files из окна Extension Properties. Например, допустим, у вас есть расширение для Windows с адресом  dll "
    Haggis.dll ". Вы просто скопируете этот  dll как Mac  DyLib, назвав его "  libHaggis.dylib".
    и убедиться, что имена внутренних функций совпадают с именами оригинального расширения Windows  dll. Этот  DyLib затем добавляется в файлы прокси и устанавливается на экспорт
    при запуске игры на Mac, и GameMaker Studio 2 будет автоматически использовать его при вызове функций расширения.
  Чтобы добавить файл прокси, просто нажмите кнопку  в окне свойств расширения для расширения и найдите местоположение файла.
    После его добавления вам может понадобиться изменить цель расширения на соответствующий модуль, и при следующем запуске игры он будет включен в качестве прокси для этой платформы. Вы также можете удалить прокси-файлы, нажав кнопку , которая при каждом нажатии будет удалять последний в списке.
  После добавления прокси-файлов они будут храниться в файлах проекта вашей игры, в папке Extensions (вы можете легко найти их, щелкнув правой кнопкой мыши  на расширении
    и выбрав Open in Explorer), поэтому если вам понадобится их отредактировать, вам следует редактировать скопированные файлы, которые идут в комплекте с игрой, а не оригиналы, поскольку GameMaker Studio 2 будет использовать для компиляции те, которые находятся в проекте.
  Очень важно, чтобы ваши прокси-файлы соответствовали приведенным ниже соглашениям об именовании, поскольку GameMaker Studio 2 будет анализировать эти имена и назначать целевой модуль для файла в соответствии с его расширением и именем, а также автоматически связывать файлы.
    вас. Если вы не будете следовать этим соглашениям, ваша игра может не работать во время выполнения, поскольку GameMaker Studio 2 не сможет определить, какой файл использовать, или загрузит его неправильно.
  Ниже приведены соглашения об именовании для каждой целевой платформы:
    
  
    
      
        Платформа
        Имена
      
      
        Windows 32bit Runtime
        <Name>.dll, lib<Name>.dll
      
      
        Windows 64bit Runtime
        <Name>_x64.dll, lib<Name>_x64.dll
      
      
        Ubuntu(Linux)
        <Name>.so, lib<Name>.so, <Name>_linux.so, lib<Name>_linux.so
      
      
        macOS
        <Name>.dylib, lib<Name>.dylib
      
      
        HTML5
        <Name>.js
      
      
        PS4
        <Name>.prx, lib< Name>.prx, < Name>_ps4.prx, lib< Name>_ps4.prx
      
      
        XBox One
        <Name>_xboxone.dll
      
    
  
   
  Используя вышеприведенные соглашения, вы замените часть <Name> на имя базового файла, для которого вы добавляете прокси-файлы.
   
   
   
  
    
      
        Назад: Редактор расширений
        Следующее: Расширения дляAndroid
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

