
  
  События объекта
  Итак, что такое события объекта? По сути, это отдельные моменты в игровом цикле, в которые происходят события, основанные на том, что вы для них запрограммировали. GameMaker Studio 2 работает с циклами таких событий - с момента начала работы комнаты до момента ее завершения происходит цикл игры.
    с момента начала комнаты до момента ее завершения происходит игровой цикл, в котором на каждом шаге запускается или проверяется серия событий, и вы можете разместить код или действия DnD™в ваших объектах, которые реагируют на эти события (шаг - это момент игрового времени, который управляется
    это момент игрового времени, который регулируется настройками скорости комнаты и может также называться кадром).
  Давайте рассмотрим типичную настройку объекта с событиями и кодом:
  Как вы можете видеть, в нашем примере объекта есть ряд событий, на которые он должен реагировать, но изначально, когда вы создаете объект, этот список пуст.
    объекта этот список пуст, и вы должны решить, какие события вам нужны и что должны делать экземпляры этого объекта при наступлении этих событий. Чтобы добавить события в объект, нажмите кнопку Добавить событие, расположенную в нижней части списка событий.
    в нижней части списка событий, что приведет к появлению следующего окна:
  Это список всех основных событий и категорий событий, на которые может реагировать объект, и внутри каждой категории есть подкатегории, которые позволяют уточнить поведение объекта.
    события для дальнейшего уточнения поведения. Например, если вы нажмете на категорию событий "Нажатие клавиши " , вы получите
    появится дополнительное окно с событиями, позволяющими выбрать, на какую клавишу должен реагировать объект. После того как вы выбрали событие, окно кода (или окно рабочей области DnD™) будет привязано к нему и откроется справа.
    Теперь вы можете редактировать код, чтобы придать объекту определенное поведение или реакцию на это событие.
  Вы можете нажать правую кнопку мыши  на любом событии, которое было добавлено к объекту, чтобы получить следующие опции меню:
  Эти варианты:
  
    Добавить событие - добавление нового события из списка событий.
    Вырезать / Копировать / Вставить события - Вырезать, скопировать или вставить выбранное событие. Можно также использовать стандартные сочетания клавиш:  /  + X,  /  + C, и  /  + V.
    Дублировать событие - дублирование выбранного события. При этом содержимое выбранного события будет продублировано в другом событии, которое вы укажете.
    Изменить событие - изменить событие. В этом случае вам будет предложено выбрать другую категорию события, и после выбора содержимое текущего события будет изменено на новое событие (при этом исходное событие будет удалено).
    Convert To Drag and Drop / Code - события объектов будут создаваться с использованием метода, выбранного при создании проекта, либо с помощью кода, либо с помощью действий Drag and Drop™. С помощью этой опции вы можете преобразовать один метод в другой, независимо от
      независимо от типа проекта.
    Удалить событие - удалить событие (или события).
  
  При удалении событий можно использовать  +  для выбора нескольких событий.
    Каждый создаваемый объект имеет свой собственный список событий, которые добавляются в него из редактора объектов. Эти события делятся на две категории:
  
    те, которые выполняют каждый шаг игры
    те, которые "запускаются" игровым событием, например, достижением экземпляром края комнаты или нажатием кнопки клавиатуры или мыши.
  
  Полный список мероприятий приведен ниже:
   
  Создать
  
    Это событие происходит при первом создании экземпляра объекта и является самым первым, что происходит в экземпляре, помещенном в комнату через Room Editor, когда в комнату входят. Это означает, что данное событие является идеальным местом для инициализации
     переменных, запуска временных линий, установки путей и т.д... и всего остального, что обычно нужно сделать только один раз.
      делать только один раз или только при первом создании экземпляра в комнате. Если ваш объект имеет какие-либо переменные объекта или переменные экземпляра, добавленные в редакторе объектов или редакторе комнаты, то эти переменные будут
      сначала инициализируются, а затем запускается событие Create Event.
    Помните, что вы можете изменить все, что вы установили в событии Create Event из кода создания экземпляра в редакторе комнаты, поскольку он запускается непосредственно после события создания экземпляра и может быть использован для создания переменных экземпляра или переопределения любых переменных, добавленных в качестве переменных объекта.
      можно использовать для создания переменных экземпляра или для переопределения любых переменных, добавленных в качестве переменных объекта или в самом событии создания.
     
  
  Уничтожить
  
    Это событие - событие, которое будет выполняться при уничтожении экземпляра. Его часто упускают из виду при добавлении поведения к объектам, но оно может быть очень полезным, например, для создания эффектов взрыва или частиц при убийстве врага, или для повторного рождения нового экземпляра объекта в другой части комнаты, или даже для добавления очков.
      нового экземпляра объекта в другой части комнаты, или даже для добавления очков к результату.
     
  
  Уборка
  
    Это событие будет вызываться после любого события, которое удаляет экземпляр объекта из комнаты. Таким образом, оно будет вызвано, если:
    
      экземпляр уничтожается
      комната заканчивается
      игра заканчивается
    
    Он предназначен для "очистки" любых динамических ресурсов, которые могут быть в вашей игре (например, поверхностей, структур данных и т.д.) или для выполнения любой задачи, которую нужно выполнить один раз, когда экземпляр удаляется из игры любым способом.
    Обратите внимание, что это событие будет вызвано сразу после события, которое его вызвало, но экземпляр не будет фактически удален из игры до окончания текущего события. Например, если вы вызовете instance_destroy() в событии Step Event, то будет вызвано событие Destroy Event, затем событие Clean Up Event, а затем завершится выполнение остальных событий Step Event. Это означает, что любой ваш код после вызова instance_destroy() все равно будет запущен и станет потенциальной причиной ошибок, если вы очистили структуру данных или другой ресурс, который требуется коду, поэтому при использовании этого события следует соблюдать осторожность.
    
     
  
  Сигнализация
  
    Категория тревог разбита на 12 событий, по одному на каждый из возможных сигналов тревоги, которые могут быть установлены в экземпляре. Итак, когда вы нажимаете на категорию Добавить сигнал тревоги , перед вами появляется следующее окно:
    Здесь вы выбираете сигнал тревоги, который хотите создать, и, как только это будет сделано, вы увидите, что он был добавлен в окно события.
      что позволяет добавлять к нему код в обычном режиме. Но что такое сигнал тревоги? Это специальное событие, которое ничего не делает, если только сигнал тревоги не был установлен ранее, и тогда оно будет ждать, пока сигнал тревоги не дойдет до 0, прежде чем выполнять действия.
      или кода, которые вы в него добавили.
    Как только сигнал тревоги достигнет 0 и выполнит код, он начнет обратный отсчет до -1, где и останется до тех пор, пока не будет установлен снова (то есть вы можете проверить значение сигнала тревоги, чтобы увидеть, больше ли оно -1, что скажет вам, работает он или нет). Итак, скажем
      вы установили alarm[0] в событии create объекта на 30, это означает, что GameMaker Studio 2 будет отсчитывать 30 игровых шагов до выполнения действий или кода, помещенных в событие alarm[0]. Обратите внимание, что установка сигнала тревоги на 0 не приведет к запуску кода сигнала тревоги, поскольку событие срабатывает, но сигнал тревоги сразу же устанавливается на -1, поэтому код пропускается. Если вам нужно, чтобы сигнал тревоги выполнял следующий шаг, то следует установить значение 1.
    Это может быть очень полезно, поскольку позволяет приводить вещи в движение в точные моменты, и вы даже можете заставить их повторяться, поскольку ничто не мешает вам установить сигнал тревоги на отдельное событие. Представьте, что у вас есть монстр, и вы хотите, чтобы он поворачивался направо каждые
      три секунды... тогда вы установите сигнал тревоги в событии его создания на скорость комнаты * 3 (если скорость комнаты равна 30, то это 30 шагов в секунду, умножьте это на 3 и получите 3 секунды!
      для установки направления движения, а также действие (или код) для установки сигнала тревоги на комнатную скорость * 3. Таким образом, вы можете создать простые игровые циклы, в которых события происходят только через определенные промежутки времени.
    Стоит отметить, что сигнал тревоги без каких-либо действий или кода в нем не будет отсчитывать время. Однако даже при наличии только комментария и отсутствии кода или действий сигнал тревоги будет продолжать отсчет времени, и его можно будет установить и проверить, как обычно.
     
  
  Шаг
  
    GameMaker Studio 2 разделяет время на шаги , а скорость комнаты определяет, сколько таких шагов должно быть в секунду (шаг также можно назвать кадром). Один шаг, по сути, представляет собой цикл, который выполняется
      постоянно проверяются все события и запускаются по мере необходимости во время работы игры, поэтому, как вы можете себе представить, событие Step Event - это событие, которое проверяется на каждом шаге игры, пока существует экземпляр.
    Мероприятие "Шаг" фактически состоит из трех подмероприятий, которые описаны ниже:
    Для большинства вещей вполне достаточно стандартного события step, но иногда вам нужно немного больше контроля над тем, какой код выполняется и в какое время.
      Для этого предусмотрены события шага Begin и End . Все три события проверяются на каждом шаге, но их порядок никогда не изменится, даже если будущие обновления движка GameMaker Studio 2 изменят другие события.
      что означает, что это единственный надежный способ убедиться в том, что что-то всегда происходит раньше, чем что-то другое.
    Для чего может использоваться событие шага? Ну, его можно использовать для действий или кода, который должен выполняться непрерывно. Например, если один объект должен следовать за другим, здесь можно изменить направление движения в сторону объекта, за которым мы следуем
      чтобы он плавно двигался позади. Однако будьте осторожны с этим событием и не помещайте много сложных действий в событие step объектов, особенно если вы планируете иметь много экземпляров объекта в вашей игровой комнате, так как это может привести к замедлению игры.
      замедлить игру. Многие вещи можно поместить в сигналы тревоги или настроить их срабатывание с помощью некоторых из Других событий, вместо того чтобы делать это постоянно.
     
     
  
  Столкновение
  
    Очевидно, что при создании игры очень важно знать, когда два (или более) экземпляра объекта столкнулись, и для этого у нас есть событие Collision Event. Это событие, которое вы помещаете в объект и затем указываете, по отношению к
      какой другой объект вы должны проверить на столкновения.
    Если физика не включена, эти столкновения будут рассчитываться на основе маски двух объектов (маска определяется в свойствах спрайта или может быть назначена независимо в свойствах объекта) и того, пересекаются они или нет.
      или нет. Обратите внимание, что если одному или другому объекту в столкновении не назначена маска (или маска спрайта не установлена), даже если он что-то рисует, столкновения не будет обнаружено.
    Если у вас включена физика , то столкновение будет основано на типе формы столкновения(Fixture), которую вы определили для объекта в его физических свойствах, как и его реакция на столкновение. Это
      означает, что вам не потребуется никакого кода для работы со столкновением, но это событие все равно должно содержать хотя бы комментарий , чтобы столкновения были обнаружены.
    Наконец, следует отметить, что все столкновения будут рассчитываться один раз за шаг игры перед запуском события столкновения, так что когда событие столкновения будет запущено, все столкновения уже будут рассчитаны и предварительно назначены. Это означает, что
      если вы создадите экземпляр в этом событии и затем попытаетесь проверить столкновение с ним, столкновение не будет обнаружено или разрешено до следующей итерации цикла игры.
     
     
  
  Клавиатура,  Клавиатурная пресса,      Отпускание клавиатуры
  
    Предоставление игроку возможности управлять различными аспектами вашей игры очень важно, и для этого GameMaker Studio 2 предоставляет вам очень полный список событий клавиатуры, которые могут быть использованы в любой из трех основных категорий клавиатуры. Для
      общей категории клавиатуры они срабатывают непрерывно каждый шаг, пока выбранная клавиша нажата, в то время как события категории Press and Release срабатывают только один раз, когда клавиша изначально нажата или отпущена.
    Следует отметить, что события клавиатуры на самом деле запускаются во всех активных экземплярах в комнате, когда используется клавиша, но реагируют только те, у которых определено событие для этой конкретной клавиши.
      и экземпляры этого объекта будут реагировать на все из них во время игры.
    Когда вы добавляете любое событие клавиатуры к объекту, вам будет представлено меню подсобытий клавиатуры, где вы можете указать клавишу, которая будет проверяться:
    Большинство из них достаточно очевидны, но давайте вкратце пройдемся по разделам - в самом верху у нас клавиши со стрелками,
      затем наиболее используемые клавиши-модификаторы, затем вся остальная клавиатура (разделенная на дополнительные подразделы, чтобы вы могли получить точную необходимую клавишу, например  или ) и, наконец, два особых подсобытия - No Key и Any Key. Как следует из их названий, это подсобытия
      события, которые проверяют, когда ни одна клавиша не нажата или когда нажата любая клавиша. Обратите внимание, что клавиши цифровой клавиатуры вызывают соответствующие события только в том случае, если включена блокировка цифр .
    События Press и Release для клавиатуры почти полностью совпадают с обычными событиями клавиатуры, за исключением того, что вместо непрерывного срабатывания они срабатывают только один раз. Когда клавиатура впервые регистрирует
      что клавиша была нажата, она генерирует событие Keyboard Pressed (а также обычное событие Keyboard), а в первый раз после этого, когда клавиша больше не определяется как нажатая, она генерирует одно событие Keyboard Release.
     
     
  
  Мышь
  
    Категория "Мышь" разделена на ряд событий, которые можно выбрать, чтобы дать вам возможность более точно контролировать происходящее в игре. Здесь вы можете увидеть, что именно представляют собой эти события:
    События левой , правой  и средней  кнопок ( обычных, нажатых или отпущенных) все
      действуют на маску экземпляра, у которого произошло событие. Это означает, что GameMaker Studio 2 будет проверять положение мыши в комнате при использовании этих кнопок по маскам столкновений экземпляров, у которых произошло событие мыши. Если
      произойдет "столкновение" с ограничивающей рамкой экземпляра , то сработает событие, поэтому убедитесь, что у любого экземпляра с такими событиями есть спрайт с действительной маской столкновений или объект имеет маску столкновений.
      или чтобы в свойствах объекта была выбрана маска спрайта. Как следует из их названий, эти события срабатывают либо один раз, когда выбранная кнопка мыши впервые нажата или отпущена, либо непрерывно на каждом шаге, пока кнопка удерживается
      поддерживается.
    
    События входа и выхода мыши также похожи на события кнопок в том, что они тоже зависят от маски экземпляра, но на этот раз они срабатывают, когда мышь впервые "входит" (касается) экземпляра или когда мышь "покидает"
      (перестает касаться) экземпляра. Однако эти события не являются непрерывными, они срабатывают только один раз при каждом входе или выходе мыши из объекта, поэтому они являются идеальным методом для создания, например, кнопок, которые должны меняться по мере того, как мышь
      а затем возвращаются в нормальное состояние, когда мышь убирается.
    Наконец, у нас есть еще один раздел событий мыши, который называется Глобальная мышь. В этом подменю вы найдете выбор событий, предназначенных для записи событий мыши в тех случаях, когда мышь не находится над ними или даже
      рядом с ними. Это события, которые генерируются для всех экземпляров, и если для указанного события определены действия или код, то они будут выполнены, независимо от положения мыши в игровой комнате.
    Обратите внимание, что на мобильных устройствах или устройствах с сенсорным экраном левая кнопка мыши  также может использоваться для проверки наличия касания пальцем сенсорного экрана, а правая кнопка мыши  срабатывает при двойном касании экрана (это поведение можно изменить с помощью кода).
     
     
  
  Жесты
  
    Это событие срабатывает, когда пользователь прикасается к экрану (на мобильных устройствах) или нажимает и перемещает мышь (на всех остальных платформах). Эти события похожи на события мыши, так как у вас есть обычные версии и глобальные версии.
      Обычные версии этих событий срабатывают только тогда, когда касания происходят на экземпляре, имеющем спрайт (или маску), и касания происходят в пределах его ограничительной области. Глобальные
      глобальные версии этих событий будут срабатывать, если пользователь коснется любого места на экране.
    События, связанные с жестами, обнаруживают следующее:
    
       касания - когда пользователь нажимает на кнопку/прикасается и быстро отпускает ее.
       перетаскивание - когда пользователь касается/нажимает и удерживает его, а затем перемещает палец/курсор.
       щелчки - когда пользователь перемещает и отпускает касание/щелчок одним движением
       щипки - когда пользователь держит два пальца на экране, а затем сдвигает их вместе/врозь.
       вращается - когда пользователь держит два пальца на экране, а затем вращает их вокруг точки
    
    Различные события всегда будут содержать карту DS Map под названием "event_data", которая
      будет содержать несколько пар ключ/значение с данными о положении и перемещении касания/щелчка. Для получения полной информации обо всех доступных подсобытиях и о том, как они работают, см. следующий раздел:
    
      Событие жеста
    
     
     
  
  Другое
  
    Существует ряд специальных событий для использования при создании игр с помощью GameMaker Studio 2, которые в основном сгруппированы в событие Other (Другое) и могут быть выбраны из всплывающего меню подсобытий, которое появляется при выборе этого события. Вот
      изображение всех этих других событий:
    Более подробную информацию о каждом из событий, перечисленных на изображении выше, см. в следующем разделе:
    
      Другие события
    
     
  
  Нарисовать
  
    Эта категория событий управляет тем, что вы видите на экране, когда запускаете свою игру, и делится на различные отдельные события:
    Как вы можете видеть, категория событий рисования имеет несколько различных типов событий. Draw Begin, Draw и Draw End - это "стандартные" события рисования, которые вы, вероятно, будете использовать чаще всего. По умолчанию основное событие Draw всегда вызывается для каждого экземпляра, независимо от того, есть у него спрайт или нет, хотя если вы пометите экземпляр как невидимый, событие
      не будет вызвано (имейте это в виду, если у вас есть какая-либо игровая логика в событии рисования невидимого объекта, так как она не будет запущена). Основное событие рисования также является местом, где GameMaker Studio 2 по умолчанию рисует спрайт экземпляра, когда в событии нет ни кода, ни
      действий в событии (т.е. вы не добавили его в список событий для объекта). При рисовании по умолчанию используется спрайт, связанный с экземпляром, и он будет рисоваться с любыми преобразованиями, заданными в коде, или примененными действиями.
    Стандартные события рисования рисуют перед событиями Draw GUI и между событиями Pre Draw и Post Draw , что означает, что все, что нарисовано в этом событии, рисуется под событиями
      события Draw GUI , независимо от слоя (т.е. все, что нарисовано в событии Draw GUI, всегда будет нарисовано поверх всего, что нарисовано в обычном событии draw, независимо от порядка слоев).
    Обратите внимание, что выше приведен просто обзор того, как работают события рисования, но для получения полной информации обо всех доступных под-событиях, пожалуйста, обратитесь к следующему разделу:
    
      Событие розыгрыша
    
     
     
     
  
  Асинхронный
  
    Эта категория событий особенна тем, что содержащиеся в ней события не запускаются по умолчанию программой GameMaker Studio 2, а являются результатом завершения какого-либо другого действия, например, загрузки файла или ответа от веб-сервера. Категория делится на
      следующие события:
    
    Итак, допустим, вы хотите добавить файл изображения в GameMaker Studio 2. Вы можете сделать это в другом событии (возможно, в событии Create) объекта, а затем заставить этот объект нарисовать полосу загрузки в ожидании (например), опрашивая соответствующее асинхронное событие до тех пор, пока обратный вызов не сообщит GameMaker Studio 2 о том, что файл загружен.
      до тех пор, пока не произойдет обратный вызов, сообщающий GameMaker Studio 2, что файл загружен. Затем вы можете использовать данные, возвращаемые в этом событии, для выполнения других действий, например, смены комнаты или покупки предмета.
    Обратите внимание, что выше приведен просто обзор того, как работает асинхронное событие, но для получения полной информации обо всех доступных под-событиях, пожалуйста, обратитесь к следующему разделу:
    
      Список асинхронных событий
    
     
  
   
  Следует также отметить, что событиям можно присваивать имена или, по крайней мере, давать им короткий описательный текст, который будет отображаться рядом с ними в редакторе событий. Для этого просто добавьте следующее в самую первую строку редактора кода события:
  /// @description Ваш текст здесь
  Так, например, в событии "Тревога" вы можете иметь что-то вроде этого
  /// @description Это боевой сигнал ИИ.
  И теперь в редакторе событий вы увидите следующее:
  
  Для пользователей DnD™добавление комментария требует использования действия Execute Code, которое должно быть размещено на самом верху действий для события, перед всем остальным. Когда вы добавляете это действие, вы даете ему ту же строку кода.
    которая показана выше, чтобы назвать событие, например:
  Дополнительную информацию о некоторых из вышеперечисленных мероприятий и общий порядок проведения мероприятий см. в следующих разделах:
  
    Порядок проведения мероприятий
    Другие события
    События розыгрыша
    Асинхронные события
    События, связанные с жестами
  
   
   
   
  
    
      
        Назад: Редактор объектов
        Следующий: Родительские объекты
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

