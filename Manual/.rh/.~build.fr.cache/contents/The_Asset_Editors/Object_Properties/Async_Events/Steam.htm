
  
  Пар
  Это событие может быть вызвано только обратными вызовамииз некоторых
    функций Steam API и возвращает DS Map, хранящуюся в переменной async_load,
    содержащую различные пары ключ/значение в зависимости от обратного вызова функции, вызвавшей событие. Карта всегда будет содержать ключ "event_type", который затем можно разобрать, чтобы найти тип функции.
    которая вызвала событие, и изменить код в соответствии с этим.
  При вызове любой функции, вызывающей это событие, генерируется уникальное значение идентификатора async, которое следует сохранить в переменной и проверить, так как карта async_load всегда будет содержать ключ идентификатора, который затем можно разобрать и убедиться, что вы реагируете на
    на правильное событие. Фактически, карта всегда будет содержать следующие ключи, независимо от функции Steam, используемой для генерации асинхронного ответа:
  
    "id" - Идентификатор async, возвращенный функцией, которая вызвала событие.
    "result" - Результат операции (вещественное значение). Это будет либо константа GML ugc_result_success, либо какое-то другое вещественное число. Вы должны проверить эту константу, чтобы убедиться
      что вызов был успешным, и если возвращается другое значение, то что-то сработало неправильно. Остальные возможные возвращаемые значения отображаются как результат значения Steam "EResult", и вы должны
      посмотреть steamclientpublic.h в заголовках SDK для всех возможных значений.
    "event_type" - Строка, обозначающая тип события (подробности см. ниже).
  
   
  Загрузка данных
  При использовании функций Steam для загрузки таблицы лидеров (либо steam_upload_score(), либо steam_upload_score_buffer())
    возвращаемая карта DS будет содержать следующие пары ключ/значение:
  
    "event_type" - Этот ключ будет содержать значение "leaderboard_upload".
    "post_id" - Этот ключ должен соответствовать значению ID, возвращенному вызывающей функцией загрузки.
    "lb_name" - Этот ключ хранит название таблицы лидеров, которая была опубликована в
    "success" - Будет 1, если пост удался, 0 - нет.
    "updated" - Будет 1, если результат в таблице лидеров был действительно обновлен (т.е. новый результат был лучше) или 0 в противном случае.
    "score" - Эта клавиша хранит оценку, которая была опубликована.
  
  Примеры этого можно увидеть на страницах, посвященных функциям загрузки партитуры.
   
  Загрузка таблиц лидеров
  При использовании функций Steam для загрузки таблицы лидеров (steam_download_scores(), steam_download_scores_around_user() или
    steam _download_friends_scores()) возвращаемая карта DS будет содержать следующие пары ключ/значение:
  
    "event_type" - Этот ключ будет содержать значение "leaderboard_download".
    "id" - Этот ключ должен соответствовать значению ID, возвращенному вызывающей функцией загрузки.
    "status" - Статус обратного вызова, где -1 означает неудачу или отсутствие результатов, а 0 - успех.
    "lb_name" - Этот ключ хранит название таблицы лидеров, которая была опубликована в
    "numEntries" - Количество "рядов" данных таблицы лидеров, которые возвращаются.
    "entries" - строка объекта JSON, содержащая еще одну карту DS, которая будет содержать либо ключ "default" (означающий, что в ней нет результатов), либо ключ "
      entries ", значение которого вы можете получить. Возвращаемое значение для "entries" будет представлять собой список DS, содержащий все ранги из таблицы лидеров, где каждая запись в списке будет ссылаться на другую карту DS, содержащую ключи "name", "score" и "
      rank ", а также может содержать ключ "data" в зависимости от функции, используемой для загрузки.
  
  Мы покажем пример загрузки данных о результатах, запросив первую десятку рейтинга для данной таблицы лидеров и разобрав ее результаты в Steam Async Event (примеры загрузки см. на страницах соответствующих функций). Для начала
    нам нужно запросить результаты с помощью следующего кода:
  score_get = steam_download_scores("Game Scores", 1, 10);
  Это отправит запрос на сервер Steam для получения очков из таблицы лидеров "Game Scores", сохраняя асинхронный ID запроса в переменной "score_get". Затем этот запрос будет обработан в событииSteam Async Event следующим образом:
  var async_id = ds_map_find_value(async_load, "id"); if async_id == score_get { var entries = ds_map_find_value(async_load, "entries");  var map = json_decode(entries); if ds_map_exists(map, "default") { ds_map_destroy(map); exit; }  else { var list = ds_map_find_value(map, "entries"); var len = ds_list_size(list); var entry; for(var i =
    0; i < len; i++;)  { entry = ds_list_find_value(list, i ); steam_name[i] = ds_map_find_value(entry, "name"); steam_score [i]= ds_map_find_value(entry, "score"); steam_rank[i]
    = ds_map_find_value(entry, "rank"); if (ds_map_exists(entry, "data")) { var data = ds_map_find_value(entry, "data"); var buffId = buffer_base64_decode(data); var message = buffer_read(buffId, buffer_string); show_debug_message( " -- attached message: " + string(message)); buffer_delete(buffId); }  ds_map_destroy(entry); }  ds_list_destroy(list) }  ds_map_destroy(map) }
  Сначала мы проверяем ключ "id" специальной карты async_load. Если это значение совпадает со значением исходной функции обратного вызова (хранится в "score_get"
    ), то мы продолжаем обработку данных. Первое, что мы сделаем, это разберем карту async_load DS Map на предмет ключа "entries", который будет содержать объект JSON, содержащий данные таблицы лидеров.
    данные. Этот объект JSON затем декодируется (см. json_decode()) как другую DS Map, и этот новый ID карты сохраняется в
    переменной "map".
  Эта карта проверяется на наличие ключа "default", и если он найден, то карта уничтожается и событие завершается. Если ключ "default" не найден, код будет разбирать карту, чтобы извлечь необходимую информацию о таблице лидеров.
    карту для извлечения необходимой информации о таблице лидеров, сначала извлекая DS List из ключа "entries" DS Map, а затем перебирая каждую запись списка для получения другой DS Map с ключами
    name , score и rank каждой записи. Эти значения сохраняются в массивах, а затем мы проверяем, есть ли дополнительный ключ "data".
    ключ. Если он есть (т.е. оценка была загружена с дополнительным пакетом данных), то мы также разбираем его и отправляем в консоль компилятора для отладки, после чего уничтожаем буфер и продолжаем уничтожать карту. Обратите внимание, что если ключ "
    data " включен ключ, его необходимо декодировать с помощью функции buffer_base64_decode() функцию, прежде чем он
    прежде чем он будет правильно прочитан.
  После завершения цикла список записей уничтожается, как и карта, из которой он был взят. Нет необходимости уничтожать карту async_load DS Map, так как за вас это сделает GameMaker Studio 2.
   
  Загрузка пользовательского контента (UGC)
  При использовании функций Steam для загрузки пользовательского контента (User Generated Content, UGC) некоторые из них будут вызывать это событие. Однако каждая функция будет генерировать
    async_load DS Map с различными парами ключ/значение (хотя они всегда будут содержать общие ключи "id", "result" и "event_type").
      ключи), поэтому подробности и примеры смотрите на странице, относящейся к используемой функции.
   
  Уникальные события UGC
  Событие Steam Async Event также может срабатывать, когда пользователь подписывается на элемент вне игры - например, он переходит в браузер, подписывается на новый элемент, а затем возвращается в игру. В этих случаях карта async_load будет содержать только следующие данные (и ни одного из значений по умолчанию, перечисленных в верхней части этой страницы):
  
    "event_type" - Эта клавиша будет удерживать константу ugc_item_installed.
    "published_file_id" - ID нового установленного элемента пользовательского контента (вы можете использовать функцию steam_ugc_get_item_install_info(), чтобы 
      получить путь к установленному элементу)
  
  Событие Steam Async также может быть запущено при подписке на элемент мастерской - либо из приложения, либо из браузера мастерской - и в этих случаях карта async_load будет содержать следующие пары ключ/значение
    пары:
  
    "event_type" - Эта клавиша будет удерживать константу ugc_item_subscribed.
    "published_file_id" : Этот ключ содержит ID опубликованного файла нового подписанного элемента.
  
  Событие сработает, если какой-либо элемент будет снят с подписки, при этом карта DS будет содержать следующее:
  
    "event_type" - Эта клавиша будет удерживать константу ugc_item_unsubscribed.
    "published_file_id" : Этот ключ содержит ID опубликованного файла неподписанного элемента.
  
   
   
   
  
    
      
        Назад: Асинхронные события
        Следующий: Система
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

