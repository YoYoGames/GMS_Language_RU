
  
  Комментарии к сценариям JSDoc
  Если вы хотите, чтобы ваши пользовательские функции имели функцию завершения кода и отображали необходимые аргументы определенным образом в редакторе кода, то вам необходимо добавить некоторые комментарии в стиле JSDoc. Эти комментарии используются для того, чтобы указать функции автозаполнения, как функция должна использоваться и заполняться в редакторе сценариев.
  Формат типичного заголовка функции должен содержать имя функции, описание функции, а затем список различных аргументов (параметров), которые принимает функция, обязательно начиная каждую строку с тройного обратного слеша "
    /// ", поскольку это указывает GameMaker Studio 2 на то, что комментарий должен быть оформлен в стиле JSDoc. Самим комментариям необходимо присвоить идентификатор (перед которым ставится "@") и содержание.
    идентификаторы следующие:
   
  
    
      
        Идентификатор
        Содержание
      
      
        @function / @func
        Полное имя функции и аргументы для нее, например:
          my_func(x, y, colour).
      
      
        @description / @desc
        Общее описание того, что делает функция.
      
      
        @param / @arg / @argument
        Тип аргумента (необязательно), заключенный в {}, имя аргумента и краткое описание (с пробелами между ними).
      
    
  
   
  Чтобы получить представление о том, как это будет работать при написании собственных функций, давайте рассмотрим базовый пример:
  function is_same_object(_id, _obj) {
     if (_id.object_index == _obj) { return true; }  else return false; }
  
  Все, что делает этот сценарий, это проверяет, имеет ли экземпляр тот же object_index, что и данный объект, и вызывается просто как:
  if is_same_object(id, obj_Player) {
     instance_destroy() }
  
  Однако, если записать это в редактор кода, вы увидите имена переменных аргументов напрямую(_id и _obj), что в большинстве случаев не очень описательно. Вы можете использовать JSDoc для определения собственных имен и описаний аргументов, а также
    информацию для функции:
  /// @function is_same_object(id, object) /// @description Сравнить индекс экземпляра с индексом объекта. /// @param {real} inst_id Уникальное значение ID экземпляра для проверки. /// @param {real}
    object_id Индекс объекта, по которому производится проверка.
     function is_same_object(_id, _obj) {
     if (_id.object_index == _obj) { return true; }  else return false; }
  
  Теперь при вызове этой функции в любом месте вашего проекта вы увидите новые имена аргументов, которые были введены в комментарии JSDoc:
  
  На изображении выше верхняя часть показывает функцию в автозаполнении, а нижняя - как работает помощник аргументов внизу. Обратите внимание, что как необязательная часть "type", так и обязательная часть "description" @param по умолчанию не отображаются в коде IDE, и чтобы увидеть их, необходимо активировать опции в GML Preferences.
  Вы можете заключить имя аргумента в скобки [], чтобы указать, что он является необязательным. Тогда редактор кода будет ожидать любое количество аргументов между минимально необходимым и общим количеством аргументов. Например, см.
    функция:
  /// @function animate_position(end_x, end_y, start_x, start_y) /// @desc Анимирует объект в конечную точку, из необязательной начальной точки /// @arg end_x /// @arg end_y /// @arg [start_x] /// @arg [start_y]
     function animate_position (x1, y1, x2, y2) {
     // Код функции }
  
  Аргументы start_x и start_y помечены как необязательные, что означает, что редактор кода теперь будет ожидать от 2 до 4 аргументов, как видно из предупреждающего сообщения:
  
  ПРИМЕЧАНИЕ: Вы получите такое же поведение, если будете использовать необязательные аргументы в объявлении функции. Дополнительные сведения см. в разделе Функции сценария.
  Поскольку скрипты могут содержать несколько функций, вы можете добавить комментарии JSDoc для каждой из них перед ее объявлением:
  
   
   
  
    
      
        Назад: Редактор сценариев
        Следующее: Сниппеты кода
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

