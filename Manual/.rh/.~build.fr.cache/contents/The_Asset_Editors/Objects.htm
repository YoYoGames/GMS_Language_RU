
  
  Редактор объектов
  Объекты - это ресурсы, которые мы используем для управления аспектами игры и выполнения определенных действий. Чаще всего с ними ассоциируется спрайт.
    чтобы вы видели их в игровых комнатах, но иногда они используются как контроллер "за сценой" для выполнения действий, связанных с пользователем или для синхронизации и т.д.. Им можно задать поведение, и они могут реагировать на определенные события, а также на
    Большинство вещей, которые вы видите в игре, основаны на объектах и их взаимодействии. Мы говорим "на основе", потому что на самом деле вы не размещаете объекты непосредственно в игровых комнатах, а размещаете экземпляры этих объектов, которые, по сути, являются копиями (или клонами, если хотите) ресурса объекта. Это очень важно помнить, поскольку экземпляры и объекты - это не одно и то же, и каждый из них имеет свой собственный набор функций, которые могут влиять на них.
    на них.
  Чтобы пояснить это, представьте себе игру, созданную в GameMaker Studio 2. Все персонажи, монстры, шары, стены и т.д... - это объекты, которые вы создаете в браузере ассетов. Затем вы перетаскиваете объект в
    комнату в редакторе комнат, чтобы создать экземпляр , скопированный из шаблона базового объекта. Затем экземпляр в комнате можно изменить в самом редакторе или с помощью кода, чтобы изменить его масштаб, цвет или
    другие детали, измененные из "базового" объекта. Поэтому, когда мы говорим о том, что что-то влияет на экземпляр или изменяет его, мы имеем в виду, что это влияет на одну конкретную копию объекта в комнате. Только этот единственный экземпляр
    затрагивается, а все остальные - нет. Но когда мы говорим о влиянии на объект или его изменении, мы имеем в виду, что изменяем объект в браузере активов, и все, что мы делаем с ним, будет отражено во всех созданных экземплярах.
    с этого момента. Таким образом, объект - это шаблон для экземпляра, а экземпляр - это то, что мы размещаем в комнате, чтобы создать нашу игру.
  Чтобы создать объект в вашей игре, вы можете щелкнуть правой кнопкой мыши  в браузере активов и выбрать опцию Create Object. Откроется окно, изображенное в
    вверху этой страницы со следующими разделами:
  Подробности
  
    Здесь вы можете дать своему объекту имя. Это имя не должно содержать пробелов и неразрешенных символов (разрешены только буквенно-цифровые символы и подстрочный символ "_") и должно быть коротким, но запоминающимся, чтобы вы могли легко идентифицировать ресурсы
      впоследствии, когда у вас их может быть много. Например, многие люди используют префикс или суффикс для определения различий между ресурсами, например, "obj_Ship" или "Ship_obj".
    Далее вы можете выбрать спрайт для объекта, если хотите, чтобы он был. Щелкните левой кнопкой мыши  на поле спрайта, и появится Asset Explorer со списком всех доступных спрайтов из Asset Browser:
    Затем вы можете выбрать тот спрайт, который хотите использовать для объекта. Когда спрайт назначен объекту, вы можете нажать кнопку Редактировать спрайт , чтобы изменить свойства спрайта, или - если у вас нет спрайта для объекта, но вы хотите создать его - вы можете нажать кнопку
      кнопку Add Sprite , чтобы создать новый актив спрайта и назначить его. Вы также можете отредактировать изображение спрайта, которое было назначено.
      щелкнув на кнопке Edit Image , чтобы открыть редактор изображений.
     
  
  Маска столкновения
  
    Под областью назначения спрайта находится кнопка для выбора определенной маски столкновений. По умолчанию объект будет генерировать свойства столкновения на основе назначенного ему спрайта, но бывают случаи, когда вы можете захотеть, чтобы
      столкновения будут основаны на другой форме из другого спрайта. Например, в игре с видом сверху вниз основной спрайт имеет прямоугольную маску столкновений, но для более плавного столкновения лучше использовать круглую маску. В таких случаях
      вы можете нажать кнопку Collision Mask и выбрать другой ресурс спрайта, и теперь экземпляры объекта будут рисовать назначенный спрайт, но основывать столкновения на спрайте маски. Более подробную информацию о масках столкновений можно найти
      масок столкновений на странице, посвященной редактору спрайтов.
     
  
  Свойства
  
    Здесь вам предлагаются следующие параметры для вашего объекта:
    
      Visible: Visible указывает, видны ли экземпляры этого объекта при запуске комнаты. Обычно большинство экземпляров видимы, но иногда полезно иметь невидимые экземпляры - например, их можно использовать в качестве путевых точек для
        или для отслеживания значений и выполнения определенных действий по времени. Невидимые объекты все равно будут реагировать на события, и если им назначен спрайт или маска, они также будут реагировать, если другие объекты столкнутся с ними...
        они просто не видны и не выполняют свое событие Draw Event. По умолчанию флаг видимости установлен.
      Solid: Когда вы отмечаете экземпляр как solid, вы сообщаете GameMaker Studio 2, что он должен попытаться разрешить любые столкновения, прежде чем вызвать событие столкновения. Это очень базовая функция, и в действительности
        все, что она делает, это перемещает экземпляр обратно в позицию, в которой он находился за мгновение до обнаружения столкновения, перед выполнением любого кода или DnD™, которые содержатся в самом событии столкновения, и как таковая она имеет ограниченное применение.
      Постоянный: Постоянный объект - это объект, который не исчезает при изменении комнаты, а "сохраняется" и переносится в новую комнату. Он исчезнет только тогда, когда вы явно уничтожите его, либо с помощью
        действием destroy или в коде. Это означает, что если вы поместите постоянный объект в одну комнату, он будет доступен во всех последующих комнатах и будет продолжать выполнять любые действия, назначенные на события в свойствах объекта, за исключением события
       события Create, которое срабатывает только один раз при первоначальном создании, а не при переходе в новую комнату. Это удобно, когда у вас есть, например, главный герой, который перемещается из комнаты в комнату, и вы хотите сохранить
        но вы должны быть очень внимательны при создании и уничтожении постоянных объектов, так как вы можете легко получить ошибки, закравшиеся в ваш проект по ошибке.
    
    Стойкость и слои комнаты  
    
      Когда вы создаете экземпляр с включенной персистентностью в комнате, ему будет назначен слой или глубина (в зависимости от того, какую функцию вы использовали для создания экземпляра объекта). При смене помещения и если следующее помещение не имеет
        слой с тем же именем или глубиной, что и назначенный, то для экземпляра будет создан новый слой, сохраняющийся во всех комнатах. Если при создании экземпляра вы присвоили слою имя, то новый слой будет также
        будет назван так же, как и исходный слой, а если вы присвоили экземпляру глубину, то новый слой будет назван "_layer_XXX", где "XXX" - шестнадцатеричное значение, используемое для присвоения слою уникального имени.
        слою уникальное имя. Эти слои будут удалены из комнаты при завершении работы комнаты. 
         Еще одно замечание по поводу слоев и постоянных экземпляров: если вы назначили экземпляру именованный слой при создании, а в следующих комнатах есть другой слой с тем же именем, то постоянный экземпляр будет назначен
        
         Наконец, если сохраняемый экземпляр перемещается в комнату со слоем той же глубины, на которой он был создан, он не будет назначен этому слою, а вместо него будет создан новый слой той же глубины (в соответствии с соглашением об именовании, описанным выше).
        соглашению об именовании, описанному выше).
    
    Постоянство и события
    
      Как упоминалось ранее, постоянный объект запускает событие Create только один раз, но в соответствующее время у него также срабатывают события Game Start, Game End, Room Start и Room End. Однако если вы перезапустите игру (например, с помощью функции game_restart() ), все постоянные объекты будут удалены и будут существовать только после того, как будут созданы игрой.
         Также обратите внимание, что если вы деактивируете постоянный объект, он больше не будет переходить из одной комнаты в другую, если не будет повторно активирован до срабатывания события Room End. Для повторной активации требуется полный игровой шаг,
        поэтому использование фактического события Room End для этого не работает, так как не дает игре полного шага для повторной активации объекта, поэтому вам нужно помнить об этом при использовании деактивации вместе с постоянными объектами и планировать свой
        код соответствующим образом.
    
    
      Использует физику: Когда вы устанавливаете флажок Uses Physics, вы сообщаете GameMaker Studio 2, что этот объект должен быть частью физического мира (как установлено вредакторе комнат ). Установка этого флажка также
        откроется дополнительное окно, в котором вы можете определить физические свойства всех экземпляров этого объекта. Более подробную информацию об этом можно найти в разделе Физические объекты.
    
  
   
  Последнюю часть редактора объектов занимают различные Опции объектов, каждая из которых рассматривается на отдельной странице, ссылка на которую приведена ниже:
  
    События объекта
    Родительские объекты
    Физические объекты
    Объектные переменные
  
   
   
   
  
    
      
        Назад: Редакторы активов
        Следующий: Пути
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

