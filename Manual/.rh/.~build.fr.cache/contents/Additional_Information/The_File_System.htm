
  
  Файловая система
  При использовании функций файловой системы или включенных файлов в GameMaker Studio 2 жизненно важно знать, как именно работает файловая система и что происходит за ее пределами.
    как работает файловая система и что происходит за кулисами. С этой целью данный раздел призван объяснить и разъяснить, как именно хранятся файлы, где они хранятся и какие возможные ограничения или обходные пути
    могут быть в этой системе.
  Первое и самое важное, что следует отметить о файловых функциях, это то, что они ограничены - в целом и по умолчанию - песочницей. Это означает, что GameMaker Studio 2 не может сохранять или загружать файлы из любого места, которое не является частью игрового пакета или локального хранилища устройства, без явного участия пользователя, и даже тогда это участие ограничено только целевыми платформами Windows, macOS и Ubuntu(Linux).
  ВАЖНО! Однако можно отключить "песочницу" на настольных платформах(Windows, macOS и Ubuntu(Linux)), отметив опцию Disable file system sandbox в опциях игры для целевой платформы. Вы делаете это на свой страх и риск, и хотя это откроет сохранение и загрузку файлов и позволит вам получить доступ к файлам в любом месте данной системы, это все равно может быть ограничено разрешениями ОС, и вы не сможете писать
    в каталог_программ папку.
  Чтобы понять, что такое песочница, прежде всего, нужно понять, что для файлов существуют две различные области:
  
    Пакет файлов - здесь хранятся все файлы, упакованные с исполняемой игрой, включая файлы, которые вы добавили в список активов Included Files из IDE GameMaker Studio 2 (это внешние файлы, которые вы хотите упаковать с игрой).
      это внешние файлы, которые вы хотите упаковать с игрой).
    Область сохранения - это область памяти устройства, в которую игра может безопасно записывать данные, и игре гарантируется, что эта область доступна для записи.
  
  Следующая диаграмма может помочь вам лучше представить себе это:
  
  ПРИМЕЧАНИЕ: Вы никогда не сможете записывать в каталог File Bundle (программа).
  Когда ваша игра находится в "песочнице", две целевые области - каталог пакета и локальная область хранения - доступны на каждой целевой платформе, но на каждой из них они будут работать немного по-разному. Однако GameMaker Studio 2 абстрагировалась от основной
    суть того, что можно и что нельзя делать, что упрощает перенацеливание игр на различные среды.
  Для начала следует понять, что имеется в виду, когда мы говорим о working_directory. Это синоним двух
    возможных мест сохранения (как показано на диаграмме выше), и когда вы используете этот каталог, он будет делать одно из двух действий в зависимости от того, читаете вы или записываете, и был ли файл, из которого вы читаете, изменен или нет:
  
    Операции чтения - working_directory сначала проверяет область сохранения, чтобы узнать, есть ли там файл, к которому осуществляется доступ, и если есть, то использует его. Однако если файл не существует в области сохранения, он проверит область пакета файлов и
      использует ее (если искомый файл является включенным в игру).
    Операции записи - Это может происходить только в области сохранения.
  
  ПРИМЕЧАНИЕ: в общем случае GameMaker Studio 2 сделает все это за вас, и вам редко придется использовать встроенную переменную working_directory.
  Используя эти два простых правила, мы можем увидеть, как работают следующие функции (это примеры, чтобы помочь вам представить процесс для различных доступных функций):
  
    directory_create() (и другие функции каталога) будут работать только в области сохранения .
     функции файловой системы будут возвращать информацию о файлах как из пачки , так и из области сохранения , но записывать будут только
     записывать только в область сохранения .
    функции записи текстовых, бинарных или INI файлов создадут новый файл в области сохранения, если он еще не существует, копируя информацию из оригинальных файлов, включенных в комплект игры, если они существуют.
      Обратите внимание, что оригинальные файлы все равно останутся в части каталога сохранения, доступной только для чтения, но на них нельзя будет ссылаться до тех пор, пока существует версия в разделе сохранения для чтения/записи.
  
  На Windows, macOS и Ubuntu(Linux) есть два способа сохранения и загрузки файлов извне песочницы, и это либо использование функций get_open_filename() и
    get_save_filename() (обе эти функции требуют, чтобы пользователь выбрал область для загрузки и сохранения, а возвращаемая строка
    строка может быть использована в остальных файловых функциях для обхода песочницы - подробнее см. описание функций в языковом разделе руководства). Другой способ - полностью отключить песочницу в опциях игры для целевой платформы (доступно только для настольных целей, о чем говорится далее на этой странице).
  На HTML5 также можно загружать файлы извне песочницы с сервера, однако это следует делать только с помощью функции buffer_load_async() как
    синхронной загрузки была устаревшей в большинстве браузеров и со временем будет устаревшей. Это означает, что загружаемые таким образом файлы должны быть сохранены как двоичные файлы - например, вы можете сохранить *.ini как строку
    (см. ini_close() подробнее), а затем записать ее в буфер, который затем можно сохранить и загрузить с помощью функций async. Обратите внимание
    что если вы загружаете изображения с помощью sprite_add() то они уже обрабатываются асинхронно.
  Вы также должны знать, что каждая целевая платформа имеет свою собственную область сохранения, в которую можно записывать и из которой можно читать файлы и каталоги. Ниже приведен список этих областей для каждой целевой платформы в режиме "песочницы":
  
    Windows и Windows UWP: В Windows все файлы находятся в каталоге %localappdata%\<Game Name> (в Windows 7 это каталог /Users/<User Name>/AppData/Local/<Game Name> ).
    HTML5: Все делается через локальное хранилище.
    macOS: Хранение будет зависеть от того, находится ли приложение в песочнице или нет (следуя правилам Apple, путь обычно ~/Library/Application Support/<Game Name>).
    Ubuntu (Linux): Файлы хранятся в каталоге Home/.config/gamename, где "Home" - это домашний каталог пользователя. /home/<username>
    iOS / tvOS: Хранилище - это стандартное расположение (как видно через iTunes).
    Android: Файлы находятся в стандартном месте (которое невидимо, если устройство не рутировано) /data/<package name>.
  
  Стоит отметить, что целевой модуль HTML5 имеет ограничение на локальное хранение (которое может составлять от 1 МБ до 5 МБ в зависимости от браузера), что означает, что вы не сможете сохранять большие спрайты, скриншоты и т.д..
   
   
   
  
    
      
        Назад: Дополнительная информация
        Следующий: Побитовые операторы и двоичные
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

