
  
  Векторы
  В какой-то момент при создании игры любой сложности вам наверняка придется иметь дело с векторами. Они используются в физике, в искусственном интеллекте, в тригонометрии и во многих других ситуациях, но что такое вектор? Если говорить просто, то вектор - это
   направленная величина. Давайте начнем с рассмотрения одномерного вектора - что то же самое, что и одно число - нарисуем пронумерованную линию со стрелкой, начинающуюся с нуля и заканчивающуюся на 5. Это вектор "a", который равен
    5, а если мы нарисуем другую стрелку, начинающуюся на 5 и заканчивающуюся на 8, то получим вектор "b", равный 3:
  Вы должны понять, что не имеет значения, где начинается вектор, важно лишь то, какой он длины и в каком направлении
    в каком направлении он движется. Так, вектор "b" начинается в точке 5, имеет длину 3 единицы и направлен вправо, что делает его идентичным вектору, начинающемуся в точке 0 и идущему в точке 3. Теперь вы можете сложить эти векторы вместе, положив два вектора "a"
    и "b" конец в конец, чтобы получить вектор "c", который равен 8. А как насчет отрицательных чисел? Если на рисунке выше вектор, направленный вправо, соответствует положительному числу, то вектор, направленный влево, будет равен 8.
    направленный влево, будет соответствовать отрицательному числу, что делает одномерный вектор не более чем знаковым (+/-) числом. Это объясняет основное понятие вектора: только длина и направление ("лево"
    или "вправо" в данном случае) имеют значение, а не положение.
  А как насчет двумерных векторов? Ну, мы можем думать о них как о состоящих не только из "лево" и "право", но и из "вверх" и "вниз":
  Теперь, это еще не совсем векторы, так как нам еще предстоит уменьшить их, используя их
    начальные и конечные координаты. Рассматривая вектор "a", мы видим, что его начальная координата [2,2], а конечная [4,3], поэтому, чтобы получить вектор, нам нужно уменьшить его, вычитая конечную координату из начальной.
    координат следующим образом:
  a = [(x2-x1), (y2-y1)] = [(4-2), (3-2)] = [2,1]
  Теперь сделаем то же самое для вектора b:
  b = [(-1.2 -(-3.2)) ,(2.1 - 1.1)] = [2 ,1]
  Заметили что-нибудь? Эти два вектора одинаковы! Это еще одна демонстрация того, что вектор не имеет положения, только направление и длину, и мы можем нарисовать эти векторы относительно друг друга вокруг локальной оси [0,0]:
  Это означает, что двумерный вектор определяется двумя значениями, позицией "x" и "y" относительно
    локальной оси [0,0]. А как насчет трехмерных векторов? Ну, у них есть дополнительное измерение "глубина", с которым нужно бороться, и они будут вычисляться как позиции "x", "y" и "z" вокруг локальной оси примерно так:
  Хорошим примером вектора, используемого в GameMaker Studio 2, является физическое свойство гравитации в редакторе помещений. Свойство
    гравитация рассчитывается как вектор вокруг позиции [0,0]. Так, если вы определите гравитацию как [x0, y10], сила тяжести будет равна 10.
  Обычно векторы можно использовать во многих ситуациях, но иногда требуется ограничить их значение (например, при работе с углами), поэтому мы их нормализуем . По сути, это математический трюк, который используется для преобразования вектора
    длины n в вектор длины 1, то есть компоненты вектора нормируются на значения от 0 до 1. Такие векторы также называются единичными векторами:
  Чтобы вычислить нормализованный вектор, мы должны сначала получить компоненты исходного вектора, затем использовать их для получения
    длину вектора. Затем мы делим каждую из компонент вектора на эту длину, чтобы получить нормализованные компоненты вектора, которые образуют нормализованный вектор, в котором сумма квадратов всех координат равна 1. Вот
    как:
  Сначала мы берем координаты вектора и получаем его компоненты:
  vx = (x2 - x1) = (7 - 1) = 6 vy = (y2 - y1) = (4 - 1) = 3
  Затем мы используем эти значения для расчета длины вектора:
  len = sqr(vx2 + vy2); // = sqr(36 + 9) = sqr(45) = 6.708203932499369
  Теперь, это дает нам точную длину вектора "a", поэтому давайте используем ее для нормализации двух компонентов вектора vx и vy:
  vx = (vx/len); // = (6 / 6.708203932499369) = 0.8944271909999159 vy = (vy/len); // = (3 / 6.708203932499369) = 0.4472135954999579
  Отлично! Теперь мы нормализовали компоненты вектора! Но какое практическое применение это имеет в контексте GameMaker Studio 2? Хорошо, давайте приведем практический пример...
  Допустим, у вас есть игра, в которой игрок должен стрелять во врага, и вам нужно знать, насколько объект с пулей должен перемещаться вдоль оси x и y каждый шаг, чтобы попасть в него:
  Для этого вы используете координаты игрока и врага, чтобы получить компоненты вектора и длину, затем
    нормализовать их, чтобы получить значение от 0 до 1, которое затем умножить на скорость, с которой пуля должна двигаться на каждом шаге. Эти два последних значения вы должны сохранить и добавить к начальным координатам x и y на каждом шаге.
    Звучит сложно? Это не так, посмотрите (для простоты значения были округлены до одного десятичного знака):
  px = 100; py = 425; ex = 356; ey = 83; bullet_speed = 5;
     vx = (ex - px); // = 256 vy = (ey - py); // = -342
     len = sqrt(vx2 + vy2); // = sqrt(65536 + 116964) = 427.2
     vx = vx / len; // = 0.6 vy = vy / len; // = 0.8
     speed_x = vx * bullet_speed; // = 3 speed_y = vy * bullet_speed; // = 4
  Итак, чтобы попасть в цель, нам нужно каждый шаг добавлять 3 к координате x пули и 4 к ее координате y.
   
   
   
  
    
      
        Назад: Дополнительная информация
        Следующее: Руководство по использованию буферов
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

