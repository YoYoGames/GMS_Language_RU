
  
  Руководство по использованию блендмодов
  Если вы уже давно используете GameMaker Studio 2, вы почти наверняка сталкивались с режимами наложения и, возможно, даже использовали их в своих играх.
    Режимы наложения - это отличный способ изменить способ рисования для получения интересных и специфических графических эффектов, но знаете ли вы, как они работают и как их использовать? Эта тема может запутать людей, поэтому в этом разделе мы надеемся развеять
    некоторые тайны, связанные с режимами наложения, и дать вам возможность использовать их в своих играх в полной мере.
   
  ОБЗОР
  Режимы наложения, по сути, указывают вашей игре рисовать определенные вещи, смешивая их с тем, что уже было нарисовано ранее. Все, что вы рисуете на экране, состоит из четырех компонентов - красного, зеленого, синего и альфа.
    по умолчанию они рисуются на экране с использованием режима наложения bm_normal. В этом режиме наложения все пиксели рисуются с неизменными значениями цвета и альфа (хотя далее в этом разделе вы увидите, что это не совсем так...),
    Но в GameMaker Studio 2 есть несколько встроенных режимов наложения, которые можно установить, чтобы изменить это поведение.
  Когда GameMaker Studio 2 рисует пиксель, есть исходный цвет ( цвет пикселя, который вы собираетесь нарисовать) и конечный цвет ( цвет, который уже есть в пикселе, на который мы рисуем). Когда
    определения нового цвета пикселя, GameMaker комбинирует исходный и конечный цвета в соответствии с режимом наложения, как упоминалось выше. Каждый компонент цвета хранится как значение с плавающей точкой от 0 до 1,
    и новый цвет вычисляется путем умножения каждого компонента исходного цвета на некоторый коэффициент и умножения каждого компонента цвета назначения на другой коэффициент, а затем суммирования результатов компонент за компонентом.
   
  ОСНОВНЫЕ РЕЖИМЫ НАЛОЖЕНИЯ
  ВGameMaker Studio 2 используется функция gpu_set_blendmode() для изменения режима смешивания, который используется в вашей игре для рисования. Вы можете вызвать эту функцию перед (например) рисованием
    спрайта, а затем установить его обратно, примерно так:
  gpu_set_blendmode(bm_add); draw_self();
     gpu_set_blendmode(bm_normal);
  
  Этот код рисует спрайт экземпляра, используя аддитивный режим наложения. Режим аддитивного наложения устанавливается с помощью одной из доступных констант GML, которых четыре для основных режимов:
  bm_normal bm_add
     bm_subtract
     bm_max
  
  Мы уже видели, как выглядит bm_normal - ведь именно он используется по умолчанию! - Так что давайте продолжим и рассмотрим остальные три более подробно...
  
   
  bm_add
  
    Этот режим наложения складывает цвета исходного и конечного пикселей вместе (но не влияет на альфа-значения). Например, если фоновое изображение является сплошным цветом с RGB-значением (100,15,70), а затем вы рисуете прямоугольник с RGB-значением
      (120,25,30), то (с помощью bm_add) конечные значения RGB для каждого пикселя прямоугольника будут (220,40,100). Обратите внимание, что значения цвета не могут быть больше 255 (или меньше 0), поэтому все, что в сумме превышает это значение, будет ограничено 255.
    Использование этого режима наложения
      это отличный способ получить эффект "неонового свечения", который чаще всего используется для световых эффектов, лазеров или всего того, что должно выглядеть светящимся или люминесцирующим.
    
  
  bm_subtract
  
    Этот режим наложения немного отличается от предыдущего, так как он работает на основе процента, а не прямого значения. Этот процент и будет вычитаться из конечного цвета (цвета пикселя, на который накладывается рисунок). Чтобы объяснить это
      лучше, давайте рассмотрим пример.
    Представьте, что вы хотите уменьшить значение красного цвета всех пикселей, нарисованных в области комнаты, на 25%. Сначала вам нужно получить 25% от 255, затем преобразовать это значение в значение цвета RGB, а затем использовать его вместе с bm_subtract для перерисовки области.
      Что-то вроде этого:
    var red = (25 / 100) * 255;var col = make_colour_rgb(red, 0, 0);gpu_set_blendmode(bm_subtract);draw_rectangle_colour(0, 0, 128, 256, col, col, col, col, false);gpu_set_blendmode(bm_normal);
    Следуя тому же правилу, если бы вы хотели просто уменьшить яркость фона на 50%, вы бы использовали цвет, состоящий из 50% красного, 50% зеленого и 50% синего, т.е. RGB (128, 128, 128). Этот режим наложения в основном используется для рисования теней или создания
      интересных эффектов затухания.
    
  
  bm_max
  
    Этот режим наложения более сложен для объяснения, но в основном он умножает исходные цвета на исходную альфу, затем добавляет их к значениям конечного цвета, умноженным на обратные значения исходного цвета. Фактическую математику, лежащую в основе bm_max (и
      мы рассмотрим во второй части нашей статьи, но все, что вам нужно знать, это то, что результатом будет более "насыщенный" и яркий цвет, не приводя к такому же чистому белому блеску, как при использовании bm_add.
    Этот режим наложения может быть полезен, когда
      вам нужно нарисовать перекрывающиеся изображения так, чтобы они не стали настолько яркими, что их невозможно было бы увидеть. Яркие части станут ярче, но они должны сохранять уровень цвета и оттенка. Обратите внимание, что альфа-значение исходного изображения
      также будет влиять на конечный эффект при использовании этого режима наложения.
  
   
  Теперь вы знаете самые основы использования режима наложения в GameMaker Studio 2. Он берет значения RGB и альфа для исходного изображения (то, что рисуется), а затем смешивает их со значениями RGB и альфа для конечного изображения (то, что тоже рисуется).
    тоже). Это смешивание выполняется путем умножения отдельных компонентов для каждого цвета пикселя и альфа на разное количество, в зависимости от эффектов, которых мы хотим достичь. С этими знаниями вы можете начать использовать режимы наложения в своих играх, чтобы получить
    светящихся лазеров, реалистичных теней или насыщенных эффектов перехода, но здесь еще есть чему поучиться! Ниже мы рассмотрим расширенные режимы наложения, а также изучим немного математики, лежащей в их основе, чтобы вы могли создавать собственные
    собственные эффекты наложения, такие как умножение или наложение.
   
  Расширенные режимы смешивания
  Выше мы говорили о функции gpu_set_blendmode(), но теперь мы рассмотрим gpu_set_blendmode_ext().
    Это (как следует из названия) расширенная функция для установки пользовательских режимов наложения, но как это работает? Давайте сначала посмотрим на сухой технический ответ, прежде чем двигаться дальше:
  
    Функция gpu_set_blendmode_ext(src, dest) указывает, какой режим наложения использовать для исходного и конечного цвета. Новый цвет в несколько раз больше исходного и в несколько раз больше конечного.
      конечный цвет. Эти коэффициенты задаются с помощью данной функции. Чтобы понять это, источник и место назначения имеют красный, зеленый, синий и альфа-компонент. Таким образом, источник - это (Rs, Gs, Bs, As), а место назначения - это
      (Rd, Gd, Bd, Ad). Считается, что все значения лежат между 0 и 1.
  
  Хотя этот текст верен и объясняет, что делают режимы наложения, он не совсем интуитивно понятен... поэтому давайте разберемся немного подробнее и объясним, что это такое.
  Когда мы говорим об источнике , мы имеем в виду цвет и альфа-значения пикселя, который рисуется, а когда мы говорим о месте назначения , мы имеем в виду цвет и альфа-значения пикселя, который
    поверх которого он рисуется. Чтобы упростить задачу, мы можем записать исходный цвет в виде его компонентов, например, так:
  
    (Rs, Gs, Bs, As) = RGB и Alpha цвета, которым вы собираетесь рисовать.
  
  И место назначения будет таким:
  
    (Rd, Gd, Bd, Ad) = RGB и Alpha цвета, на котором вы собираетесь рисовать.
  
  Поэтому, когда мы рисуем что-то на экране, наш графический процессор фактически делает следующее для каждого отдельного пикселя:
  конечный_пиксельный_цвет = (Rs,Gs,Bs,As) * исходный_фактор смешивания + (Rd,Gd,Bd,Ad) * конечный_фактор смешивания
   Коэффициенты смешивания, упомянутые выше, определяются в GameMaker Studio 2 рядом констант GML, каждая из которых представляет собой коэффициент, на который следует умножить исходные или конечные значения R, G, B и A. Доступные коэффициенты
    являются:
  
    bm_zero: Коэффициент смешивания равен (0, 0, 0, 0, 0)
    bm_one: Коэффициент смешивания (1, 1, 1, 1, 1)
    bm_src_colour: Коэффициент смешивания (Rs, Gs, Bs, As)
    bm_inv_src_colour: Коэффициент смешивания (1-Rs, 1-Gs, 1-Bs, 1-As).
    bm_src_alpha: Коэффициент смешивания (As, As, As, As, As)
    bm_inv_src_alpha: Коэффициент смешивания составляет (1-As, 1-As, 1-As, 1-As, 1-As).
    bm_dest_alpha: Коэффициент смешивания (Ad, Ad, Ad, Ad, Ad)
    bm_inv_dest_alpha: коэффициент смешивания (1-Ad, 1-Ad, 1-Ad, 1-Ad, 1-Ad).
    bm_dest_colour: Фактор смешивания - (Rd, Gd, Bd, Ad)
    bm_inv_dest_colour: коэффициент смешивания (1-Rd, 1-Gd, 1-Bd, 1-Ad).
    bm_src_alpha_sat: Коэффициент смешивания (f, f, f, 1); f = min(As, 1-Ad).
  
  Четыре "основных" режима наложения, которые есть в GameMaker Studio 2, на самом деле являются композициями двух из этих коэффициентов наложения.
  Пример работы bm_normal
  
    Пришло время рассмотреть практический пример того, как это сочетается для рисования в GameMaker Studio 2. Для этого мы рассмотрим bm_normal, который является действительно:
    gpu_set_blendmode_ext(bm_src_alpha, bm_inv_src_alpha);
    Одна из проблем, с которой сталкиваются люди при работе с режимами наложения, заключается в визуализации результатов, поэтому, чтобы показать математику, стоящую за ними, мы будем использовать этот режим наложения в качестве подопытного, поскольку он используется всеми чаще всего, и мы точно знаем, чего ожидать.
      что от него ожидать. Представьте, что мы рисуем прямоугольник с цветом (128, 255, 64, 255) на фоне с цветом (64, 128, 255, 255):
    Итак,
      наш режим наложения выглядит следующим образом:
    Источник: (128, 255, 64, 255) = (0.5, 1, 0.25, 1)Destination: (64, 128, 255, 255) = (0.25, 0.5, 1, 1)bm_src_alpha (As, As, As, As, As) = (255, 255, 255, 255) = (1, 1, 1, 1)bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As, 1-As) = (0, 0, 0, 0)(Rs,Gs,Bs,As)
      * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha(0.5, 1, 0.25, 1) * (1, 1, 1, 1) + (0.25, 0.5, 1, 1) * (0, 0, 0, 0)(0.5, 1, 0.25, 1) + (0, 0, 0, 0) = (0.5, 1, 0.25, 1) = (128, 255, 64, 255)
    Как вы видите, мы умножаем конечные значения на 0, что дает им значение 0, что означает, что исходные цвета остаются неизменными, поэтому наше окончательное значение цвета равно (128, 255, 64, 255). Вы можете видеть, как включение альфы влияет на
      на это значение:
    Источник (128, 255, 64, 128) = (0.5, 1, 0.25, 0.5)Пункт назначения: (64, 128, 255, 255) = (0.25, 0.5, 1, 1)bm_src_alpha (As, As, As, As, As) = (128, 128, 128, 128, 128) = (0.5, 0.5, 0.5, 0.5)bm_inv_src_alpha (1-As, 1-As, 1-As, 1-As) = (0.5, 0.5, 0.5,
      0.5)(Rs,Gs,Bs,As) * bm_src_alpha + (Rd,Gd,Bd,Ad) * bm_inv_src_alpha(0.5, 1, 0.25, 0.5) * (0.5, 0.5, 0.5, 0.5) + (0.25, 0.5, 1, 1) * (0.5, 0.5, 0.5, 0.5, 0.5)(0.25, 0.5, 0.125, 0.25) + (0.125, 0.25, 0.5, 0.5) = (0.375, 0.75, 0.625, 0.75)
      = (96, 192, 159, 192)
    Это дает конечный цвет пикселя (96, 192, 159, 192), и получится изображение, подобное показанному ниже:
    
    Надеюсь, теперь вы ясно видите, что делают факторы режима наложения, и как их сочетание может изменить нарисованное, создавая интересные эффекты. Теперь мы рассмотрим практический пример того, как комбинировать эти факторы для создания собственных пользовательских
      режимов наложения.
      
      
  
  Теперь вы знаете, как работает настройка режимов наложения и видели пример ее использования в повседневном рисовании, давайте рассмотрим кое-что более сложное...
   
  СОЗДАНИЕ СОБСТВЕННЫХ РЕЖИМОВ НАЛОЖЕНИЯ
  Используя различные доступные факторы, вы можете создавать собственные режимы наложения для достижения недоступных в обычных условиях вариантов смешивания. В этом примере мы создадим эффект умножения , подобный тому, что используется в Photoshop. Мы
    можем смоделировать этот режим наложения с помощью двух вышеупомянутых констант коэффициентов режима наложения следующим образом:
  gpu_set_blendmode_ext(bm_dest_colour, bm_zero);
  Прежде чем мы нарисуем что-то, используя этот режим наложения, давайте посмотрим, как это должно выглядеть в Photoshop:
  Используя расширенный режим наложения, мы получаем следующее:
  (Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad) + (Rd, Gd, Bd, Ad) * (0,0,0,0) = (Rs, Gs, Bs, As) * (Rd, Gd, Bd, Ad) Source color * dest color + dest color * zero = source color * dest color
  Коэффициент смешивания bm_zero фактически удаляет цвет назначения из уравнения (так как ноль на ноль равен нулю), поэтому у нас остается исходный цвет, умноженный на коэффициент смешивания цвета назначения, отсюда и название "умножение".
    название "умножение" для режима. Чтобы использовать этот режим в GameMaker Studio 2, в событии Draw Event нужно сделать следующее:
  gpu_set_blendmode_ext(bm_dest_colour, bm_zero); draw_self();
     gpu_set_blendmode(bm_normal);
  
  Следующее изображение было получено из тестового проекта в GameMaker с использованием именно этого кода:
  Можете ли вы заметить разницу? Скорее всего, нет! Тем не менее, будет некоторое отклонение
    между ними из-за различий между используемыми инструментами рендеринга, но это почти то, что вы ожидаете. Обратите внимание, что не все режимы наложения, используемые в художественных программах, доступны вам в GameMaker Studio 2, поскольку некоторые из них могут принудительно изменять значения цвета.
    Но это не значит, что вы не сможете создать достойные имитации этих эффектов или даже совершенно новые эффекты, используя их.
  Стоит отметить, что в GameMaker Studio 2 вы можете сделать еще один шаг вперед, используя функцию gpu_set_blendmode_ext_sepalpha().
    Она позволяет отделить альфа-компонент от различных коэффициентов режима наложения и использовать их по отдельности для создания еще большего количества возможных комбинаций. Мы не будем рассматривать эту функцию здесь, поскольку она подробно описана в руководстве,
    но о ней стоит упомянуть, чтобы вы знали, что она доступна для использования.
   
  ПОВЕРХНОСТИ И АЛЬФА
  И последнее, что стоит отметить о режимах наложения, это то, как они влияют на альфа-компонент цвета. При простом рисовании на поверхности приложения или
   буфера дисплея, вам не нужно принимать во внимание значение альфа-компонента назначения, поскольку оно всегда будет равно единице. Однако поверхности, которые вы создаете сами, отличаются,
    поскольку вы можете очистить поверхность, чтобы она имела любое значение альфа от нуля до единицы. Это приводит к некоторым интересным эффектам, которые противоречат ожиданиям большинства людей.
  Чтобы проиллюстрировать это, мы рассмотрим рисование с использованием базового значения по умолчанию bm_normal. Большинство людей думают, что если очистить поверхность до альфа 0, а затем нарисовать что-то с альфа 0,5, то результирующая альфа будет иметь значение 0,5.
    значение 0,5... но это не так, и многие считают, что это "ошибка" в том, как GameMaker Studio 2 отрисовывает вещи. Однако, как вы увидите, это вовсе не ошибка!
  Допустим, у вас есть поверхность, каждый пиксель которой имеет альфа 0, затем вы рисуете на ней круг с альфа 0,5, используя режим наложения bm_normal. Вся поверхность по-прежнему будет иметь альфа 0, но в круге альфа будет 0,25,
    так как:
  0.5 * 0.5 + 0 * 0.5 = 0.5 * 0.5 = 0.25
  Если в существующем круге нарисовать еще один круг, также с альфой 0,5, то альфа за пределами кругов будет равна 0, между кругами - 0,25, а в меньшем круге - 0,375:
  0.5 * 0.5 + 0.25 * 0.5 = 0.25 + 0.125 = 0.375
  Если бы вы продолжили рисовать ряд кругов с альфа 0,5 к поверхности с альфа 0, а затем нарисовали бы эту поверхность в комнате, вы бы смогли ясно увидеть это:
  Если вы все еще немного не понимаете, что такое альфа, попробуйте представить его как еще один цвет. Он ведет себя так же, как
    цвет, и все вычисления с ним выполняются аналогичным образом. Он просто не очень заметен, хотя влияние, которое он оказывает на другие цвета, заметно. Это подводит нас к последнему моменту, на который следует обратить внимание при использовании поверхностей и режимов наложения (даже bm_normal)...
  Даже если альфа поверхности равна 0, цветовые компоненты все еще существуют и будут влиять на все операции смешивания.. Поэтому рисование на очищенную поверхность с нулевой альфой, которая была очищена с помощью красного цвета (например.
    (например, красным), исходные цвета смешаются с конечными цветами и дадут эффект, отличный от того, который вы можете себе представить. Приведенное выше изображение было создано на поверхности, очищенной до черного цвета, на черном фоне, но если мы очистим поверхность до красного цвета, мы получим
    вот это:
  Надеюсь, теперь вы сможете сами разобраться, почему так происходит, используя формулы, которые я описал выше, и применяя соответствующие цифры
    для bm_normal.
   
   
   
  
    
      
        Назад: Дополнительная информация
        Следующий: Отчеты об ошибках
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

