
  
  Функции сценария блока действий
  Одним из самых важных активов в браузере активов является актив " Скрипт ". Сценарии - это особые активы, поскольку они представляют собой "контейнеры"
    для функций, определяемых пользователем, и сами по себе не вызываются непосредственно в вашей игре. Все скрипты имеют глобальную область применения и будут автоматически запускаться GameMaker при запуске игры, поэтому вы можете использовать их для определения глобальных
    переменных и функций, которые вы хотите использовать в своей игре.
  В каждый сценарий DnD™можно добавить одну или несколько пользовательских функций, которые создаются с помощью действия Declare A New Function:
  Функции, которые вы определите здесь, будут глобальными по области применения и будут действовать подобно любому встроенному действию DnD™.
    т.е. они могут принимать различные значения - или вообще не принимать их - называемые аргументами(или параметрами), а затем выполнять задачу, возвращая значение или не возвращая ничего.
    в зависимости от необходимости. Затем вы вызываете функцию в своей игре с помощью действия Function Call , которое выглядит следующим образом:
  Чтобы создать сценарий DnD™, достаточно воспользоваться правой кнопкой мыши  в любом месте браузера активов и выбрать " Создать ", затем " Сценарий". Это создаст новый сценарий DnD™и откроет окно редактора:
  Вы можете назвать скрипт, щелкнув правой кнопкой мыши  на нем в Браузере активов и выбрав Переименовать (или с помощью медленного двойного щелчка левой кнопкой мыши ), но учтите, что имя скрипта должно соответствовать общим правилам, поэтому оно должно начинаться с буквы и содержать только буквы и цифры.
    должно соответствовать общим правилам для активов, поэтому оно должно начинаться с буквы и содержать только буквы, цифры или символ "_" под баром. Ваш скрипт также будет предварительно заполнен действием Declare A New Function,
    и вы сможете добавить дополнительные объявления функций по мере необходимости (один скрипт может содержать несколько функций, что удобно для группировки функций с похожим или связанным использованием).
  Как упоминалось выше, вы можете передать функции несколько аргументов, и она будет использовать их для выполнения задачи, для которой вы ее написали. Чтобы лучше понять это, возьмите, например, любое из встроенных действий и подумайте о том, как оно работает... вы
    помещаете его в событие, задаете ряд значений, и он заставляет ваш экземпляр что-то сделать. Определяемые пользователем функции работают точно так же, с той лишь разницей, что их пишете вы .
  При определении новой функции вы даете ей имя, а также определяете имена аргументов, которые она принимает, если принимает (функции могут не принимать аргументы или принимать несколько аргументов, в зависимости от того, что вам требуется). Если вы задаете имена аргументов, то они будут
    будут использоваться в действиях, которые вызывает функция, как локальные переменные , содержащие входные значения функции.
  Также хорошей практикой является добавление комментария к действию, который объясняет, что оно делает, следуя правилам JS Doc. Например, рассмотрим эту функцию set_vec():
  Для вызова приведенного выше сценария достаточно использовать действие Call Function,
    например, так:
  Вы можете не только передавать аргументы в функцию, но и просить функцию вернуть значение.
    (используя действие Return  ), так что вы можете
    можете использовать их, например, для построения вычислительных методов или возврата идентификатора экземпляра после сложного обнаружения столкновений, а также для любых других целей. Обратите внимание, однако, что использование return завершает функцию, и поэтому никакие действия, выполненные после
    Это означает, что необходимо продумать структуру функций.
  Ниже приведена функция Drag and Drop, которая возвращает значение:
  
  Приведенная выше функция просто проверяет все объекты в комнате на предмет их object_index и если один из них является объектом игрока, то функция возвращает true (завершая вызов функции) или
    false . Вы можете вызвать эту функцию следующим образом:
  Итак, мы вызываем функцию и заставляем ее создать временную (локальную) переменную для хранения возвращаемого значения (которое в данном случае или ), а затем эта переменная проверяется и выполняется действие.
    (которая в данном случае является либо true, либо false), а затем эта переменная проверяется и выполняется действие.
  При создании функций для ваших сценариев DnD™вы можете использовать все те же действия, что и при добавлении действий в событие объекта, и даже можете вызывать функции изнутри функций, создавая таким образом более "модульный" код действий. Построение
    Сценарии с функциями могут сэкономить вам много времени на создание одинаковых последовательностей действий, а также облегчить чтение и отладку ваших последовательностей действий.
   
   
   
  
    
      
        Назад: Указатель
        Следующий: Изменение DnD™в коде
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

