
  
  Что такое программирование?
  В предыдущем разделе мы описали, как GameMaker Studio 2 работает над созданием вашей игры, но независимо от спрайтов, объектов или комнат, которые вы добавили, ничего не произойдет, если вы не запрограммируете это.
    чтобы это произошло. Но что такое программа?
  В общем смысле, программа - это просто набор инструкций (или  оператор), которые вы даете компьютеру для того, чтобы он выполнил определенные
    задачи. Эти задачи могут быть самыми разными: от простого указания компьютеру нарисовать что-то на экране до вычисления значения на основе пользовательского ввода и последующей реакции на него, но во всех случаях это логическая структура, которая даст определенный результат.
    На предыдущей странице мы говорили о перемещении экземпляра объекта вправо на 2 пикселя, поэтому давайте посмотрим на программу, которая это сделает:
  В Drag And Drop™(DnD™) это будет выглядеть следующим образом:
  
  А с помощью языка GameMaker Language(GML) это будет выглядеть следующим образом:
  x = x + 2;
  Чтобы понять, что происходит выше, мы должны сначала поговорить о Переменных , затем мы перейдем к обсуждению Функций и , наконец, Условий, поскольку эти три вещи обычно составляют
    основную часть любой программы.
   
  Переменные
  
    Переменные являются краеугольным камнем программирования, наряду с функциями (которые мы рассмотрим вкратце в ближайшее время). Переменная - это просто именованное значение, и в приведенном выше случае переменная называется "x".
      Теперь "x" может быть любым значением, например -126, или 583, или даже 1,56378, но фактическое значение "x" не имеет значения, поскольку оно может меняться (отсюда и название "переменная"). Что важно
      это то, что мы берем "x" и прибавляем к нему 2. Стоит отметить, что в данном случае "x" является встроенной переменной, что означает, что это переменная, которая создается
     GameMaker Studio 2 для всех объектов, но вы можете создавать и свои собственные переменные.
    Чтобы создать переменную, ее необходимо объявить , прежде чем ее можно будет использовать. Объявление переменной - это сообщение GameMaker Studio 2 о том, что эта новая переменная существует и имеет начальное значение. Чтобы объявить переменную, достаточно сделать следующее
      это:
    
    или:
    точки = 0;
    Как только переменная объявлена, ее можно использовать в дальнейшем программном коде или действиях. Переменные замечательны тем, что позволяют "повторно использовать" значение в разных местах, не задумываясь о том, что это за значение.
      является. Например, у вас есть переменная "damage", и вы используете ее в различных местах, чтобы сообщить GameMaker Studio 2 о необходимости нанести определенное количество урона другим объектам в игре. Мы можем объявить "damage"
      как 20, но позже решаем, что это слишком большое значение, и хотим изменить его на 10. Если бы мы использовали значение 20 вместо переменной, нам пришлось бы просмотреть весь наш код или действия и изменить 20 на 10, что отнимает много времени и чревато ошибками.
      и чревато ошибками. Однако использование переменной означает, что нам нужно только один раз изменить значение 10 на 10, когда мы его объявляем, а весь остальной код или действия будут использовать это новое значение.
    Стоит отметить, что существует множество различных типов переменных, и каждый из них имеет несколько различных способов использования. Мы не будем рассматривать это здесь, но вы можете получить более подробную информацию из раздела руководства " Обзор языка GameMaker".
    Однако переменные - это только первая часть истории. Следующая часть - это использование функций...
     
  
  Функции
  
    Следующей важной частью программирования является использование функций наряду с переменными. Функция - это просто инструкция компьютеру сделать что-то, и она может иметь как входные, так и выходные значения (т.е. вы можете дать ей значение, и она выполнит некоторую операцию, а затем вернет другое значение).
      значение, и она выполнит некоторую операцию, а затем вернет другое значение), хотя не все функции требуют ввода и не имеют выхода. Чтобы лучше понять это, давайте рассмотрим встроенную функцию в GameMaker Studio 2.
    Функция, которую мы рассмотрим, это instance_number(), которая в DnD™является действием Get Instance Count.
      Эта функция/действие позволяет получить количество экземпляров данного объекта в игровой комнате, и вы будете использовать ее следующим образом:
    
    или:
    number = instance_number(obj_Enemy);
    В обоих приведенных выше примерах функция принимает идентификатор объекта в качестве входного значения (параметр  аргумент или параметр) и выдает выходное значение ( возвращаемое значение),
      которое представляет собой количество экземпляров данного объекта, присутствующих в комнате на момент вызова функции/действия. Обратите внимание, что для хранения возвращаемого значения мы используем переменную "number". Эта переменная может быть
      быть объявлена до выполнения кода, или она будет считаться объявленной после выполнения кода, и ей будет присвоено возвращаемое значение из функции/действия.
    Стоит отметить, что вы не ограничены только использованием встроенных действий GameMaker Language или DnD™и можете создавать собственные функции для расширения возможностей программирования (подробнее об этом можно узнать здесь для GML и здесь для DnD™).
    Вы можете многое сделать с помощью функций и переменных, однако они были бы практически бесполезны без последней важной части истории программирования - условий...
     
  
  Условные обозначения
  
    Значительная часть программирования состоит из задавания вопросов. Эти вопросы, как правило, простые, которые могут быть оценены как true или false, и называются условиями (а значения true и
      false  называются булевыми значениями). Наиболее распространенным и широко используемым условием является вопрос "if", который используется для проверки того, является ли что-то true или false и
        затем действовать соответствующим образом. Простым примером может быть удаление персонажа из игры, если его здоровье опускается ниже нуля, что на обычном языке будет выражено как:
    если символьная переменная "hp" меньше или равна нулю, то уничтожить ее.
    Чтобы преобразовать вышеизложенное в код, мы должны сделать следующее:
    
    или:
    if (hp <= 0)
       {
       instance_destroy();
       }
    Итак, выше мы задаем вопрос "если переменная hp меньше или равна 0", а затем, если эта оценка равна true, мы вызываем функцию instance_destroy() или
      действие Destroy Object Instance. Обратите внимание, что "then" (если что-то... то что-то...) является неявным и 
      вам не нужно его добавлять, а также обратите внимание, что в коде GML мы используем скобки {} , чтобы "отгородить" код, который мы хотим выполнить, когда " if" оценивается в true (в
     DnD™это символизируется отбрасыванием действий справа от действия "If"). Все, что добавлено между скобками, будет выполняться, только если " if" оценивается как
      true , поэтому в одном "блоке" может выполняться более одного оператора.
    Еще один момент, который следует отметить при использовании условия "if", заключается в том, что мы можем добавить к нему утверждение "else", так что условие превратится в "если что-то оценивает
      true  , то сделайте то-то, иначе сделайте что-то другое". Таким образом, можно работать с условным выражением, возвращающим true  или  false.
      Приведем пример на эту тему:
    
    или:
    if (countdown <= 0)
       {
       instance_create_layer(x, y, "Instances", obj_Bullet);
       countdown = 30;
       } 
       else
      
       {
       countdown = countdown - 1;
       }
    Приведенный выше код переводится на простой язык как:
    если переменная обратного отсчета меньше или равна нулю, то:
       создайте экземпляр объекта "obj_Bullet" в текущей позиции x/y на слое "instances",
       сбросьте переменную обратного отсчета до 30.
       else:
      
       вычесть единицу из переменной обратного отсчета.
    Не стоит слишком сильно беспокоиться о фактическом создании экземпляра в приведенном выше коде, поскольку мы рассмотрим это более подробно в следующих разделах. Важно понять, что вы можете создавать условные выражения, которые проверяют.
      является ли что-то true или false , и заставить вашу программу реагировать по-разному. Это может показаться очень простой вещью, но на самом деле это невероятно мощный инструмент, который станет основой для почти
      всего, что вы делаете при программировании в GameMaker Studio 2.
  
   
  Итак, отвечая на вопрос "Что такое программирование?", мы можем сказать, что программирование - это использование комбинации утверждений - в которых  могут использоваться  переменная
   s для формирования  выражениеs, функций для выполнения задач, и условный
     s, чтобы задавать вопросы - и затем выполнять эти утверждения параллельно для достижения цели. Ниже показана немного более сложная программа на DnD™и GML. Можете ли вы догадаться, что она делает?
  
  или:
  if mouse_check_button_pressed(mb_left) == true
     {
     x = mouse_x
     y = mouse_y
     image_blend = c_red;
     } 
     else
    
     {
     if mouse_check_button_released(mb_left) == true
     {
     image_blend = c_white;
     } 
     }
  СпойлерПриведенный выше код сначала проверяет, нажата ли кнопка мыши ( левая кнопка мыши, которая определяется с помощью константы " mb_left"),
    и если она была нажата, то перемещает экземпляр, выполняющий код, в текущую позицию мыши (определяется с помощью встроенных переменных " mouse_x" и " mouse_y") и
    также устанавливает цвет наложения экземпляра на красный. Если кнопка мыши не была нажата, то проверяется, была ли она отпущена, и если была, то сбрасывается цвет наложения экземпляра на белый (обратите внимание, что
    мы снова используем некоторые встроенные константы - " c_red" и " c_white" - для простого определения цветов).
  
   
  Надеюсь, теперь вы имеете более полное представление о том, что такое программирование, поэтому давайте перейдем к изучению IDE GameMaker Studio 2 и посмотрим, как добавлять активы, такие как спрайты , объекты и другие важные ресурсы, необходимые для вашей игры.
   объекты и другие важные ресурсы, которые понадобятся вашей игре.
   
   
   
  
    
      
        Назад: Указатель
        Следующее: Создание спрайтов
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

