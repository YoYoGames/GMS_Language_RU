
  
  gml_pragma
  Функция gml_pragma влияет на то, как данная цель компилирует ваш код, и должна вызываться с различными командами для дальнейшей оптимизации конечной компиляции вашего проекта. Эти команды эффективно обрабатываются до того, как
    и поэтому функция может быть размещена в любом месте вашего проекта, и она все равно будет обработана до того, как игра будет полностью скомпилирована. Ниже перечислены доступные команды:
  
    " forceinline" - Когда функция вызывается с прагмой "forceinline" в функции скрипта, YYC будет компилировать проект с функцией inline, а не со ссылкой. Это дает дополнительное ускорение обработки
      но при его использовании следует соблюдать осторожность, так как это также увеличит размер конечного исполняемого файла, особенно если встроенный код большой и/или используется в нескольких разных местах, а также значительно увеличит время компиляции. Обратите внимание, что эта прагма
     действительна только при сборке с использованием YYC.
    "global", "[gml code]" - Прагма"global" позволяет вам вызвать некоторый GML-код, отформатированный как строка , в глобальной области видимости, во время компиляции, перед выполнением первой комнаты игры. Например:
     gml_pragma("global", "Init()");
      Это вызовет функцию сценария "Init" перед запуском первой комнаты игры. Обратите внимание, что GML, указанный в качестве второго аргумента, должен быть константой времени компиляции, а также обратите внимание, что вы не можете использовать эту прагму для создания экземпляров
      или выполнения каких-либо операций, требующих функционирования комнаты (или чего-либо в комнате).
    " PNGCrush" - Прагма "PNGCrush" будет использовать программу PNGCrush для каждой созданной текстуры. Обратите внимание, что это может значительно увеличить время, необходимое для
      компиляции игры, поэтому не стоит включать ее постоянно, хотя это может значительно уменьшить конечный размер файла.
    " Texgroup.Scale", "[TextureGroupName]", " [Scale Divisor]" - "Texgroup.Scale" будет масштабировать заданную группу текстур при компиляции. Здесь необходимо указать два дополнительных аргумента: "[TexGroupName]",
      это имя (строка) группы текстур для масштабирования, и "[Scale Divisor]" (также строка), это делитель, который вы хотите использовать для масштабирования, т.е:
     gml_pragma("Texgroup.Scale", "level1", "2");
      Это уполовинит все текстуры в группе текстур "level1".
    " UnityBuild", "[enable/disable]" - Если вы вызовете функцию с этой прагмой и установите аргумент enable/disable в true, то при компиляции она свернет все .cpp файлы в проекте в один файл.
      который затем используется для сборки всего проекта, например:
     gml_pragma("UnityBuild", "true");
      Преимущество unity build в том, что сборка происходит быстрее, но недостатком является то, что каждый раз выполняется полная сборка, так что даже если вы измените одну часть кода, он соберет все заново, не используя никаких кэшированных файлов. Это
      была добавлена специально для экспорта Xbox One с помощью YYC, хотя ее можно вызвать и для других сборок(только YYC). Для получения дополнительной информации о сборках unity смотрите здесь.
  
  ПРИМЕЧАНИЕ: Первый аргумент функции gml_pragma должен быть строковой константой времени компиляции, а не переменной.
   
  Синтаксис:
  gml_pragma(command, [optional...]);
  
    
      
        Аргумент
        Описание
      
      
        команда
        Строка с одной из перечисленных ниже команд.
      
      
        [необязательно]
        Некоторые из доступных команд требуют дополнительного аргумента или аргументов. Они описаны ниже для каждой команды.
      
    
  
   
  Возвращается:
  Н/Д
   
  Пример:
  gml_pragma("forceinline");
  Приведенный выше пример кода заставит функцию скрипта, в которой она используется, быть встроенной при компиляции.
   
   
   
  
    
      
        Назад: ОС и компилятор
        Далее: параметр_счет
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

