
  
  Ввод с клавиатуры
  При работе с клавиатурой в GameMaker Studio 2 у вас есть множество функций, которые можно использовать для распознавания различных состояний клавиатуры, например, нажатой или отпущенной. Есть также функции, которые сохраняют все нажатия клавиш в виде строки или могут
    а также те, которые позволяют полностью очистить состояние клавиатуры.
  ПРИМЕЧАНИЕ: Эти функции предназначены только для настольных платформ Windows/Mac/Ubuntu. Вы можете обнаружить, что некоторые встроенные переменные и константы не действуют на других платформах, а многие функции не будут работать на мобильных устройствах.
  Каждый символ ввода с клавиши (или нескольких клавиш) определяется его кодом UTF8, который представляет собой числовое значение. Это значение может быть получено для любого символа с помощью функции ord()    но в GameMaker Studio 2 также есть ряд констант для наиболее используемых специальных клавиш клавиатуры и специальные функции. Обычно вы используете комбинацию ord( ) с функциями keyboard_check*(),
    примерно так:
  if keyboard_check(ord("A")) {
     hspeed = -5; }
  
  Таким образом, вышеприведенный пример проверит клавишу "A" и, если она нажата, то установит горизонтальную скорость объекта на -5. Обратите внимание, что использование ord() таким образом будет работать правильно только в том случае, если входная строка состоит из одного символа
    Функция ord() вернет полное значение UTF8, но функции keyboard_check*() определят только A - Z и 0 - 9. Но что, если
    вы хотите использовать клавиши со стрелками? Или если вы хотите изменить действие с помощью клавиши "shift"? Для этого в GameMaker Studio 2 есть ряд констант vk_(vk_ означает виртуальную клавишу), которые можно использовать вместо функций
   ord():
   
  
    
      
        Постоянная
        Описание
      
      
        vk_nokey
        код клавиши, означающий, что ни одна клавиша не нажата
      
      
        vk_anykey
        код клавиши, представляющий нажатие любой клавиши
      
      
        vk_left
        код клавиши для клавиши со стрелкой влево
      
      
        vk_right
        код клавиши для клавиши со стрелкой вправо
      
      
        vk_up
        код клавиши для клавиши со стрелкой вверх
      
      
        vk_down
        код клавиши для клавиши со стрелкой вниз
      
      
        vk_enter
        клавиша ввода
      
      
        vk_escape
        клавиша эвакуации
      
      
        vk_space
        клавиша пробела
      
      
        vk_shift
        любая из клавиш shift
      
      
        vk_control
        одна из клавиш управления
      
      
        vk_alt
        клавиша alt
      
      
        vk_backspace
        клавиша обратного хода
      
      
        vk_tab
        клавиша табуляции
      
      
        vk_home
        главный ключ
      
      
        vk_end
        конечный ключ
      
      
        vk_delete
        клавиша удаления
      
      
        vk_insert
        клавиша вставки
      
      
        vk_pageup
        клавиша перехода на страницу
      
      
        vk_pagedown
        клавиша вызова
      
      
        vk_pause
        клавиша паузы/прерывания
      
      
        vk_printscreen
        клавиша printscreen/sysrq
      
      
        vk_f1 ... vk_f12
        код клавиш для функциональных клавиш F1 - F12
      
      
        vk_numpad0 ... vk_numpad9
        цифровые клавиши на цифровой клавиатуре
      
      
        vk_multiply
        клавиша умножения на цифровой клавиатуре
      
      
        vk_divide
        клавиша деления на цифровой клавиатуре
      
      
        vk_add
        клавиша добавления на цифровой клавиатуре
      
      
        vk_subtract
        клавиша вычитания на цифровой клавиатуре
      
      
        vk_decimal
        клавиши с десятичными точками на цифровой клавиатуре
      
    
  
   
  Следующие константы могут быть использованы только с keyboard_check_direct():
   
  
    
      
        Постоянная
        Описание
      
      
        vk_lshift
        клавиша левого сдвига
      
      
        vk_lcontrol
        левая клавиша управления
      
      
        vk_lalt
        левая клавиша alt
      
      
        vk_rshift
        правая клавиша переключения
      
      
        vk_rcontrol
        правая клавиша управления
      
      
        vk_ralt
        правая клавиша alt
      
    
  
   
  Ниже приведен небольшой пример использования функции vk_ константы:
  if keyboard_check_pressed(vk_tab) {
     instance_create_layer(x, y, "Controllers", obj_Menu); }
  
  Приведенный выше код определит, нажата ли клавиша "Tab ", и создаст экземпляр объекта "obj_Menu", если да.
  Если вам нужно проверить наличие символа клавиши, который не является 0 - 9, A - Z или одной из констант VK, то вы должны проверить одну из переменных keyboard_*, например, keyboard_lastchar:
  var _key = keyboard_lastchar; if ord(_key) == ord("ç") {
     show_debug_message("ç key pressed"); }
  
  При работе с клавиатурой доступны следующие функции:
  ПРИМЕЧАНИЕ: Эти функции не будут работать при использовании экранной виртуальной клавиатуры.
  
    io_clear
    keyboard_check
    keyboard_check_pressed
    keyboard_check_released
    keyboard_check_direct
    очистка_клавиатуры
    keyboard_set_map
    keyboard_get_map
    keyboard_unset_map
    keyboard_set_numlock
    keyboard_get_numlock
  
   
  Есть также некоторые функции, которые можно использовать для имитации нажатия клавиш:
   
  
    клавиатура_клавиша_нажатия
    клавиатура_клавиша_отпустить
  
   
  Наконец, следующие переменные встроены в GameMaker Studio 2 и могут быть доступны для получения информации о состоянии и вводе клавиатуры:
  ПРИМЕЧАНИЕ: При использовании виртуальной клавиатуры только переменная строка_клавиатуры переменная будет обновляться
    ввода данных с клавиатуры.
   
  
    клавиша_клавиатуры
    клавиатура_последней клавиши
    keyboard_lastchar
    строка_клавиатуры
  
   
   
   
  
    
      
        Назад: Игровой вход
        Следующий: Ввод данных с помощью мыши
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

