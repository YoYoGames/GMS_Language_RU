
  
  Камеры и видовые экраны
  При создании комнат в GameMaker Studio 2 вам необходимо настроить различные порты обзора и/или камеры, чтобы контролировать то, что отображается игроку. Порты просмотра - это, по сути, маленькие окошки в ваш игровой мир, которые позволяют вам показывать
    игроку части комнаты в масштабе или 1:1, и поэтому они необходимы, когда игровая комната больше, чем размер дисплея. Камеры определяют, что именно будет показано в каждом порте обзора.
  GameMaker Studio 2 позволяет использовать 8 независимых портов просмотра (пронумерованных от 0 до 7) и неограниченное количество камер, из которых только 8 могут быть активны в любой момент времени - по одной на каждый из доступных портов - хотя обычно вам понадобится только
    хотя обычно вам нужны только один или два порта просмотра. Камеры могут показывать разные части одной и той же комнаты и могут быть активированы и деактивированы, а также назначены на порты просмотра в любое время, что означает, что вы можете использовать камеры для рисования элементов HUD или для создания эффектов разделенного экрана,
    или, например, для создания cut-scenes. По сути, вы размещаете камеру в комнате и определяете "вид" (область) комнаты, которая будет ей видна, а затем этот вид рисуется в порте просмотра - обратите внимание, что порт просмотра может быть
    и, следовательно, вы можете исказить и масштабировать вид камеры, если его размер не 1:1 с портом обзора.
  ВАЖНО! Легко запутаться, говоря о камерах, видах и смотровых отверстиях, поэтому поясним:
  
    Камера: Точка в помещении, которая будет использоваться для настройки отображения помещения - обычно с помощью положения, ориентации, поля зрения и соотношения сторон.
    Вид: То, что видит камера, в зависимости от положения, проекции и вращения камеры.
    Порт просмотра: область экрана, где будет отображаться вид камеры.
  
  Если вы добавляете камеры через редактор помещений, то вы можете получить значение ID камеры с помощью переменной view_camera. Затем вы можете управлять видом с помощью функций, описанных ниже, и даже можете уничтожить камеры по умолчанию, если это необходимо, хотя вам придется назначить новую камеру виду, иначе вы получите некоторые
    непредсказуемое поведение. Камеры, добавленные в порт вида в редакторе комнат, являются глобальными, то есть они создаются один раз при запуске игры, а затем, когда вы входите в каждую комнату, они устанавливаются на значения, заданные в редакторе комнат,
    Поэтому если вы уничтожите камеру по умолчанию в любой комнате, она перестанет существовать для всех комнат.
  Следует отметить, что общая площадь ограничивающей области для всех активных портов обзора в первой комнате игры определяет размер фонового холста (или размер окна для macOS, Ubuntu(Linux) и Windows), и все области, не покрытые портами обзора, будут рисоваться по умолчанию с использованием цвета окна, как показано на изображении ниже.
   Windows), и все области, не покрытые портом обзора, по умолчанию будут рисоваться с использованием цвета окна, как показано на рисунке ниже:
  
  ПРИМЕЧАНИЕ: По умолчанию для отображения цвета необходимо выбрать "Clear Display Buffer" в редакторе комнаты, а установить цвет можно только с помощью функции window_set_colour (). Если вы не используете эту функцию, по умолчанию будет установлен
    черным.
  Следует быть осторожным при использовании нескольких камер, поскольку событие draw для всех экземпляров вызывается один раз для каждого видимого вида, поэтому если в одной комнате активны три вида камер, событие draw будет выполняться три раза на каждом шаге (по сути, выполняя три раза одну и ту же работу), что может вызвать замедление, если игра большая и сложная.
    что может стать причиной замедления, если игра большая или сложная. Переменная view_current может быть использована для ограничения вызовов рисования, проверяя, какой вид рисуется, и рисуя только те элементы, которые специфичны для
    для данного порта представления. Также будьте осторожны при создании собственных камер, так как если вы создадите одну камеру в комнате и не удалите ее с помощью функции camera_destroy() вы можете получить утечку памяти.
  Вы можете найти обзор всех доступных функций в различных разделах ниже, но стоит отметить, что некоторые из этих функций требуют установки и использования различных матриц, поэтому вы можете обратиться к разделу руководства
    для матричных функций. Также обратите внимание, что есть несколько функций помещений, которые можно использовать для получения и установки камер и значений портов просмотра в помещениях, отличных от текущего (см. раздел " Помещения").
  
  Для создания и уничтожения камер можно использовать следующие функции:
   
  
    камера_создать
    камера_создания_вида
    уничтожение камеры
    камера_применить
  
   
  Также имеется ряд функций для настройки и получения информации о камере:
   
  
    camera_set_view_mat
    camera_set_proj_mat
    camera_set_update_script
    camera_set_begin_script
    camera_set_end_script
    camera_set_view_pos
    camera_set_view_size
    camera_set_view_speed
    camera_set_view_border
    camera_set_view_angle
    camera_set_view_target
    camera_set_default
    camera_get_view_mat
    camera_get_proj_mat
    camera_get_update_script
    camera_get_begin_script
    camera_get_end_script
    camera_get_view_x
    camera_get_view_y
    camera_get_view_width
    camera_get_view_height
    camera_get_view_speed_x
    camera_get_view_speed_y
    camera_get_view_border_x
    camera_get_view_border_y
    camera_get_view_angle
    camera_get_view_target
    camera_get_default
    camera_get_active
  
   
  При работе с камерами необходимо назначить их на порт просмотра, чтобы они были "активны" и отображали что-либо. Эти порты просмотра пронумерованы от 0 до 7 и могут быть изменены и расположены с помощью различных массивов переменных и функций.
    функции, и вы также можете проверить, какой из них в настоящее время рисует или какая камера в настоящее время подключена к нему.
  Доступны следующие встроенные переменные глобальной области видимости:
   
  
    просмотр_камеры
    view_current
    view_enabled
    view_visible
    view_xport
    view_yport
    view_wport
    view_hport
    view_surface_id
  
   
  Существуют также следующие функции для работы с портами просмотра:
   
  
    view_get_camera
    view_get_visible
    view_get_xport
    view_get_yport
    view_get_wport
    view_get_hport
    view_get_surface_id
    view_set_camera
    view_set_visible
    view_set_xport
    view_set_yport
    view_set_wport
    view_set_hport
    view_set_surface_id
  
   
   
   
  
    
      
        Назад: Камеры и дисплей
        Следующий: Окно игры
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

