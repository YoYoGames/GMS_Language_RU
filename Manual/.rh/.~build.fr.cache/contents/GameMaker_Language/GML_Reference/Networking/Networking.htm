
  
  Работа в сети
  Сетевые функции GameMaker Studio 2 основаны на сокетах, которые являются промышленным стандартом на всех платформах. С помощью сокетов вы можете создавать как клиенты, так и серверы, используя простой GML, что позволяет вам создать даже однопользовательскую игру, используя модель клиент/сервер (что позволит позже легко добавить многопользовательскую игру).
    игру с одним игроком, используя модель клиент/сервер (что позволит впоследствии легко добавить многопользовательскую игру).
  По сути, сокет - это объект, который может отправлять, получать, соединяться и прослушивать порты в сети. Эти функции работают только с соединениями TCP/IP, на которых основан интернет (точнее, IPv4). По сути, это позволяет вам
    соединить один сокет с IP-адресом (допустим, 192.168.1.10) с другим сокетом на другом IP-адресе (допустим, 192.168.1.11). После соединения эти два сокета могут отправлять данные туда и обратно с помощью функций network_send_* (например, таких как network_send_packet())
    и специального асинхронного события, которое вызывается ими. Это асинхронное событие генерирует карту DS, содержащую полученные данные, а также другие подробности.
    в разделе о сетевом асинхронном событии.
  Вместо того чтобы программам приходилось читать и разбираться с каждым битом сетевого трафика, поступающего на машину, IP-адреса также имеют дело с портами, которые нумеруются от 0 до 65535. Это позволяет каждой программе получать только те пакеты данных, которые ее интересуют.
    а не все, что было отправлено каждой программой. Это также значительно экономит процессорное время, так как серьезно сокращает обработку данных, поэтому в GameMaker Studio 2 вы также можете "слушать" порты. Таким образом, сервер создаст сокет, а затем
    привяжет его к определенному порту для прослушивания. Затем он будет получать уведомления о соединениях, разъединениях и передаче данных с этого сокета.
  Сами "пакеты" данных состоят из двоичных данных, взятых из буфера. Этот буфер можно создать и управлять им с помощью функций GameMaker Studio 2 Buffer.
  Стоит отметить, что если вы создаете проект для HTML5, то вы не сможете использовать функции создания сервера из-за ограничений браузера и должны будете написать свой собственный сервер для этой платформы, используя что-то вроде Electron или
   NodeJS. Также обратите внимание, что если ваша игра кроссплатформенная и вы планируете подключаться к экземпляру игры на HTML5 с сервера, работающего на мобильном или настольном устройстве, то ваш сервер может взаимодействовать с экземпляром HTML5 только
    используя протокол Web Socket (для этого используется константа network_socket_ws - см. network_create_server() более подробную информацию). Это означает, что вашему серверу, возможно, придется создать два сокета
    на разных портах, один для подключения к объектам, не связанным с HTML5(Android, Windows и т.д...), и один для подключения к объекту HTML5.
  Существуют следующие функции, которые вы можете использовать для работы в сети:
   
  
    сетевой_создать_сервер
    network_create_server_raw
    network_create_socket
    network_create_socket_ext
    сетевой_коннект
    network_connect_async
    network_connect_raw
    network_connect_async_raw
    сетевое_решение
    network_set_config
    network_set_timeout
    network_send_broadcast
    network_send_packet
    network_send_raw
    network_send_udp
    network_send_udp_raw
    уничтожение сети
  
   
   
   
  
    
      
        Назад: Ссылка наGML
        Следующий: Web
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

