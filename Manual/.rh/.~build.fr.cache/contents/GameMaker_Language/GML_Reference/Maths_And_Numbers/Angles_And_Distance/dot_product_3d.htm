



  
  dot_product_3d
  Точечное произведение - это величина, выражающая угловое отношение между двумя векторами, которое находится путем взятия двух векторов, их умножения и последующего сложения. Название "точечное произведение" происходит от центрированной точки "-"
    которая часто используется для обозначения этой операции (альтернативное название "скалярное произведение" подчеркивает скалярную, а не векторную природу результата).
  Фактическая математическая формула может быть записана следующим образом:
  
  В 2D точечное произведение векторов a[x1,y1] и b[x2,y2] равно x1x2 + y1y2, поэтому в 3D точечное произведение векторов a[x1,y1,z1] и b[x1,y1,z1] равно x1x2 + y1y2 + z1z2. Таким образом, dot_product_3d в GameMaker Studio 2 вычисляется как:
  a - b = (x1*x2) + (y1*y2) + (z1*z2);
  Любопытно, что точечное произведение связано с углом, образованным входными векторами, который может быть выражен как:
  a - b = (длина a) * (длина b) * cos(угол)
  То есть, точечное произведение двух векторов будет равно косинусу угла между этими векторами, умноженному на длину каждого из них. Вот изображение для иллюстрации:
  
  ПРИМЕЧАНИЕ: Более подробную информацию о векторах см. здесь.
  Есть несколько вещей, которые мы теперь можем определить по любым двум векторам в зависимости от результата их точечного произведения:
  
    Если a и b перпендикулярны (находятся под углом 90 градусов друг к другу), результат точечного произведения будет равен нулю, потому что cos(ang) будет равен нулю.
    Если угол между a и b меньше 90 градусов, то точечное произведение будет положительным (больше нуля), так как cos(ang) будет положительным.
    Если угол между a и b больше 90 градусов, то точечное произведение будет отрицательным (меньше нуля), так как cos(ang) будет отрицательным.
  
  Что же это значит для тех из нас, кто создает игры? Эта математическая зависимость может быть использована в довольно многих обстоятельствах, но лучший способ увидеть ее - построить реальный сценарий и посмотреть, что происходит. Один из самых простых
    способов сделать это - сгенерировать простую проверку "высоты" для врага, скажем, в платформенной игре, чтобы враг "видел" игрока, если он находится выше плоскости, образованной вектором нормали врага и 3d-полом.
  По сути, мы получаем вектор нормали от врага перпендикулярно полу, а затем мы
    получаем вектор нормали игрока к врагу. Затем мы получим dot_product этих векторов, и если результат положительный, то игрок находится "выше" плоскости пола противника, а если отрицательный, то ниже. Фактический код для обеспечения работы
    приведен в примере ниже.
   
  Синтаксис:
  dot_product_3d(x1, y1, z1, x2, y2, z2)
  
    
      
        Аргумент
        Описание
      
      
        x1
        Координата x первого вектора.
      
      
        y1
        Координата y первого вектора.
      
      
        z1
        Координата z первого вектора.
      
      
        x2
        Координата x второго вектора.
      
      
        y2
        Координата y второго вектора.
      
      
        z2
        Координата z второго вектора.
      
    
  
   
  Возвращается:
  Реально
   
  Пример:
  var x1, y1, x2, y2; x1 = 0; y1 = 1; z1 = 0; x2 = o_Player.x - x; y2 = o_Player.y - y; z2 = o_Player.z - z; if dot_product_3d(x1, y1, z1, x2, y2, z2) > 0 above=true else above=false;
  Приведенный выше код создает вектор нормали вдоль оси y (вверх) экземпляра, а затем притягивает к себе вектор объекта игрока "o_Player". Наконец, он вычисляет точечное произведение этих двух векторов и, если оно больше 0, устанавливает переменную
    "above" в true, а если она меньше или равна 0, то устанавливает ее в false.
   
   
   
  
    
      
        Назад: Углы и расстояние
        Далее: dot_product_normalised
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

