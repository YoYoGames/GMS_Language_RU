
  
  steam_download_scores
  Эта функция используется для получения последовательного диапазона записей в таблице лидеров по рейтингу таблицы лидеров. Параметры start_idx и end_idx управляют запрашиваемым диапазоном рангов, например, вы можете отобразить топ-10 на доске лидеров для
    вашей игры, задав начальное значение 1, а конечное - 10. Имя таблицы лидеров - это строка, которая была определена при создании таблицы лидеров с помощью функции steam_create_leaderboard(),
    и функция вернет значение, которое затем может быть использовано для идентификации обратного вызова в событииSteam Async Event, или вернет -1 в случае неудачи. Обратите внимание, что при
    загрузке таблицы лидеров, ключ "entries" в async_load карты может иметь дополнительный ключ "data", если какие-либо дополнительные данные буфера были
    загружены вместе с результатом (см. steam_upload_score_buffer()). Этот буфер данных будет закодирован в Base 64, поэтому вам необходимо использовать функцию buffer_base64_decode()    на буфере перед чтением данных.
   
  Синтаксис:
  steam_download_scores(lb_name, start_idx, end_idx);
  
    
      
        Аргумент
        Описание
      
      
        lb_name
        Название таблицы лидеров, с которой вы загружаете результаты (строка).
      
      
        start_idx
        Стартовая позиция в таблице лидеров.
      
      
        end_idx
        Конечная позиция в таблице лидеров.
      
    
  
   
  Возвращается:
  Реально
   
  Расширенный пример:
  В этом расширенном примере мы запросим первую десятку рейтинга для заданной таблицы лидеров и разберем ее результаты в Steam Async Event. Для начала нам нужно запросить баллы с помощью следующего кода:
  score_get = steam_download_scores("Game Scores", 1, 10);
  Это отправит запрос на сервер Steam для получения очков из таблицы лидеров "Game Scores", сохраняя асинхронный идентификатор запроса в переменной "score_get". Затем он будет обработан в событии Steam Async Event следующим образом:
  var async_id = ds_map_find_value(async_load, "id"); if async_id == score_get {
     var entries = ds_map_find_value(async_load, "entries"); var map = json_decode(entries); if ds_map_exists(map, "default") {
     ds_map_destroy(map);
     exit;
     }
     else
     {
     var list = ds_map_find_value(map, "entries"); var len = ds_list_size(list); var entry; for(var i = 0; i < len; i++;) {
     entry = ds_list_find_value(list, i ); steam_name[i] = ds_map_find_value(entry, "name"); steam_score [i]= ds_map_find_value(entry, "score"); steam_rank[i] = ds_map_find_value(entry,
    "rank"); }
     }
     ds_map_destroy(map)
     }
  
  Здесь мы сначала проверяем ключ "id" специальной карты async_load DS. Если это значение совпадает со значением исходной функции обратного вызова (хранится в переменной "score_get"), то мы продолжаем обработку
    данные. Первое, что мы делаем, это анализируем async_load ds_map для ключа "entries", который будет содержать объект JSON, содержащий данные таблицы лидеров. Затем этот JSON-объект декодируется (см. json_decode())
    как еще одна DS-карта, и этот новый идентификатор карты сохраняется в переменной "map".
  Эта карта проверяется на наличие ключа "default", и если он найден, то карта уничтожается и событие завершается. Если ключ "default" не найден, код разбирает карту, чтобы извлечь необходимую информацию о таблице лидеров,
    сначала извлекается список DS из ключа "entries" карты DS, затем выполняется цикл по каждой записи списка, чтобы получить другую карту DS с именем, результатом и рангом каждой записи. Затем эти значения сохраняются в массивах.
  После завершения цикла карта DS JSON уничтожается (что, в свою очередь, уничтожает все внутренние карты и списки). Нет необходимости уничтожать карту DS async_load, так как за вас это сделает GameMaker Studio 2.
   
   
   
  
    
      
        Назад: Таблицы лидеров
        Далее: steam_download_scores_around_user
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

