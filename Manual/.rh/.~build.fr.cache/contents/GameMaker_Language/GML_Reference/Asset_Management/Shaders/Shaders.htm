
  
  Шейдеры
  Шейдеры - это невероятно мощный инструмент для манипулирования тем, что и как выводится на экран с помощью видеокарты. Поскольку эти крошечные программы выполняются на самой видеокарте.
    это означает, что они очень быстро обрабатываются, освобождая ценные циклы процессора для более сложной игровой логики.
  Чтобы создать шейдер, необходимо написать вершинный шейдер и фрагментный шейдер (также известный как пиксельный шейдер) с помощью редакторашейдеров, и даже если (например)
    вы хотите изменить только положение вершин для рисуемого экземпляра или изменить только значения цвета для пикселей, для работы полного шейдера вам все равно понадобятся обе программы.
  ПРИМЕЧАНИЕ: Шейдеры не позволяют изменять значения переменных, которые вы передаете в них, поэтому во всей документации, которая на них ссылается, они будут называться константамишейдера.
  Полный обзор доступных функций и переменных GLSL ES, которые можно использовать для программирования шейдеров, можно найти на справочных страницах OpenGL ES Shading Language (GLSL ES).
    Следующая ссылка также полезна, поскольку содержит несколько кратких справочных карточек по API OpenGL ES (обратите внимание, что только две последние карточки применимы к GameMaker Studio 2): OpenGL ES Reference Cards.
  Использовать шейдер в своих проектах очень просто, и для того, чтобы получить от него самое необходимое, требуется всего пара строк кода:
  shader_set(myShader); draw_self();
     shader_reset();
  
  Как видите, они используются так же, как режимы наложения и поверхности, когда вы сначала выбираете (устанавливаете) шейдер, рисуете с его помощью то, что хотите, а затем снова сбрасываете цель рисования. Если вы хотите отрисовать весь экран через шейдер,
    а не только один спрайт или фон, вам нужно установить поверхность, чтобы поймать текущий вид, а затем передать его в шейдер (см. раздел " Поверхности" для получения дополнительной информации).
  ПРИМЕЧАНИЕ: Шейдеры, как и все, что связано с рисованием, можно использовать только в событии draw. Также стоит отметить, что если вы пытаетесь использовать значение цвета в шейдере, а объект не имеет текстуры, результат получится черным.
  Если используемый шейдер имеет входные значения, они устанавливаются с помощью функций униформы. Сначала нужно получить хэндл униформы (который, по сути, является значением ID для устанавливаемой униформы) с помощью функции shader_get_uniform() в
   Create Event экземпляра, использующего шейдер, а затем сохранить эти дескрипторы в переменных, примерно так:
  color_to_find = shader_get_uniform(sShaderDemo5, "f_Colour1"); color_to_set = shader_get_uniform(sShaderDemo5, "f_Colour2");
  Когда у вас есть равномерные ручки, их можно установить в коде шейдера для события Draw Event следующим образом:
  shader_set(sShaderDemo5); shader_set_uniform_f(color_to_find, 1,1,1 ); shader_set_uniform_f(color_to_set, 1,0,0 ); draw_sprite(sprite_index,image_index,x+24, y); shader_reset();
  
  И последнее, что следует отметить: хотя шейдеры принимаются на всех платформах, они все же зависят от устройства, и если аппаратное или программное обеспечение устройства не может использовать шейдеры, вы получите ошибку. Поэтому рекомендуется проверить, что
   шейдер был скомпилирован перед установкой формы или использованием самого шейдера, например, так:
  if(shader_is_compiled(myShader)) {
     shader_set(myShader);
     draw_self();
     shader_reset();
     }
     else show_debug_message(" Shader failed");
  В качестве дополнительной проверки вы также можете вызвать функцию shaders_are_supported() чтобы узнать, поддерживает ли аппаратное обеспечение шейдеры. В общем случае вы должны выполнять эти проверки при запуске игры и сохранять результаты как
   глобальной переменной для последующей проверки.
  Важно отметить, что GameMaker Studio 2 также поддерживает некоторые макросы условной компиляции, которые можно использовать в шейдерах GLSL ES, чтобы они могли выполнять альтернативный код на определенных поддерживаемых платформах. Макросы и платформы, на которых они будут
    показаны в таблице ниже:
   
  
    
      
        Макросшейдера 
        Значение
        Целевая платформа
      
      
        _YY_GLSLES_
        1
        Все целевые платформы
      
      
        _YY_GLSL_
        2
        Mac и Ubuntu(Linux)
      
      
        _YY_HLSL11_
        3
        Windows, UWP, XboxOne
      
      
        _YY_PSSL_
        4
        PS4
      
    
  
   
  При компиляции проекта GameMaker Studio 2 на любой из перечисленных платформ с использованием шейдера формата GLSL ES будет сгенерирован один из вышеуказанных макросов, который затем можно будет проверить в коде шейдера следующим образом:
  #ifdef _YY_HLSL11_ // Код шейдера HLSL здесь #else
     // Код шейдера GLSL здесь #endif
  
  Если вы новичок в шейдерах или хотите получить более полное руководство по их созданию и использованию в GameMaker Studio 2, то обратитесь к следующей странице руководства:
  
    Руководство по использованию шейдеров
  
   
  Для рисования и настройки шейдеров доступны следующие функции:
   
  
    shader_get_name
    shader_get_uniform
    shader_get_sampler_index
    шейдер_set
    shader_set_uniform_f
    shader_set_uniform_f_array
    shader_set_uniform_i
    shader_set_uniform_i_array
    shader_set_uniform_matrix
    shader_set_uniform_matrix_array
    сброс шейдера
    shader_is_compiled
    шейдеры_поддерживаются
    shader_current
  
   
  У нас также есть специальная функция, которая определяет глобальное состояние для всех шейдеров:
  
    shader_enable_corner_id
  
   
  При работе с текстурными сэмплерами в шейдерах вам понадобится информация об используемой текстуре, и в этом случае вы можете использовать следующие функции:
   
  
    sprite_get_texture
    sprite_get_uvs
    font_get_texture
    font_get_uvs
    texture_get_width
    texture_get_height
    texture_get_texel_width
    texture_get_texel_height
    texture_set_stage
    gpu_set_texfilter_ext
    gpu_set_texrepeat
  
   
  Хотя в данном руководстве не рассматриваются все функции и переменные шейдеров Open GL, оно содержит список тех, которые уникальны для GameMaker Studio 2. Эти константы не являются частью спецификации Open GL для шейдеров и предоставляются
    для упрощения интеграции шейдеров в ваши проекты.
  
    Константышейдера 
  
   
  Наконец, GameMaker Studio 2 позволяет определять собственные форматы вершин, на основе которых можно создавать собственные примитивы. Это может значительно ускорить работу шейдеров или расширить их возможности и создать удивительные эффекты.
    Информацию об этом вы найдете в следующих разделах:
  
    Примитивы и форматы вершин
  
   
   
   
  
    
      
        Назад: Управление активами
        Следующий: Последовательности
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

