
  
  События, моменты и широковещательные сообщения
  Помимо всех свойств, перечисленных здесь для структуры последовательности, у вас также есть возможность добавить в последовательность специальные свойства "действия". Существует три различных типа
    Эти свойства "действия" могут быть добавлены к объекту последовательности - События. Моменты и Широковещательные сообщения - и каждое из них объясняется более подробно
    в следующих разделах.
   
  Последовательность событий
  К объектам последовательности могут быть добавлены события, которые аналогичны событиям, используемым объектами активов. События, которые вы назначаете объекту последовательности, будут происходить в определенном порядке, либо один раз в определенный
    либо один раз в определенный момент жизненного цикла последовательности, либо каждый кадр, когда последовательность выполняется. В этом разделе мы обсудим, как эти события обрабатываются с помощью кода, но их также можно добавить с помощью редактора последовательностей.
    Обратите внимание, что порядок перечисленных здесь событий не зависит от направления движения головки воспроизведения, и даже если последовательность воспроизводится в обратном направлении, события будут выполняться в порядке, указанном ниже.
    ниже.
  Доступными событиями являются:
  
    Create: срабатывает при создании экземпляра последовательности на слое.
    Destroy: срабатывает, когда экземпляр последовательности на слое уничтожается.
    Очистка: запускается, когда экземпляр последовательности собирается в мусор.
    Шаг: срабатывает непосредственно перед обычным событием шага объекта. Важно! Если последовательность поставлена на паузу, то это событие не будет вызвано до следующего шага после начала воспроизведения последовательности.
    Begin Step: срабатывает непосредственно перед событием начала шага объекта. Важно! Если последовательность поставлена на паузу, то это событие не будет вызвано до следующего шага после начала воспроизведения последовательности.
    End Step: срабатывает непосредственно перед событием окончания шага объекта. Важно! Если последовательность поставлена на паузу, то это событие не будет вызвано до следующего шага после начала воспроизведения последовательности.
    Async System: срабатывает так же, как и любой объект Обработчики событий асинхронной системы. Важно!Если последовательность приостановлена, то это событие не будет вызвано.
    Широковещательное сообщение: срабатывает во время обновления последовательности при появлении ключевого кадра широковещательного сообщения.
  
  Все события должны быть связаны с функциями, которые определены в сценарии, поэтому для установки события переменной метода должно быть присвоено свойство с правильным
    которое указывает последовательности, какое событие должно вызвать функцию. Синтаксис для этого следующий:
  
  <последовательность_структуры>.<событие_свойства> = метод(<последовательность_структуры>, <имя_функции>);
  Последовательная структура свойств для различных событий выглядит следующим образом:
  
    событие_создать
    уничтожение события
    событие_очистка
    шаг события
    событие_шаг_начало
    конец_шага_события
    event_async_system
    сообщение_трансляции_события
  
  Чтобы привести пример использования, допустим, мы хотим, чтобы последовательность меняла направление при обнаружении щелчка левой кнопки мыши. Сначала нам нужно создать скрипт с функцией, которую мы хотим вызвать, примерно так:
  /// @function seq_reverse();
     function seq_reverse() {
     if mouse_check_button_pressed(mb_left) {
     if self.headDirection == seqdir_right {
     self.headDirection = seqdir_left; }
     else self.headDirection = seqdir_right; }
     }
  
  В этой функции все, что мы делаем, это слушаем нажатие кнопки мыши и затем меняем направление воспроизведения последовательности, к которой привязан метод. Вы заметите, что в настоящее время вы не можете передавать какие-либо параметры функциям.
    которые связаны с этими свойствами, и во всех случаях self переменной в области видимости функции присваивается экземпляр последовательности.
  ПРИМЕЧАНИЕ: Стоит отметить, что в приведенном выше сценарии идентификатор self может быть опущен и используется только для того, чтобы явно показать область видимости переменной метода, используемой в данном примере.
  Чтобы присвоить это последовательности, сделайте следующее:
  var _seq = sequence_get(Sequence1); _seq.event_step = method(_seq, seq_reverse);
  Теперь мы назначили объекту последовательности событие шага с функцией для обнаружения нажатия кнопки мыши и изменения направления головки воспроизведения экземпляра последовательности после ее
    была создана в комнате.
   
  Моменты
   Момент последовательности - это уникальное действие кода, которое запускается на одном или нескольких определенных кадрах во время воспроизведения последовательности. Эти моменты кода, как и события (о которых говорилось выше), являются просто предопределенными переменными метода, которые
    срабатывают на заданном кадре. Например, если вы хотите, чтобы последовательность создавала экземпляр "пули" на определенном кадре анимации, сначала вам нужно создать функцию, которая будет использоваться для этого действия, примерно так:
  /// @function seq_shoot();
     seq_shoot = function() {
     instance_create_layer(sequence.xorigin, sequence.yorigin, "Instances", obj_Bullet); }
  
  Затем вы добавите его в кадр в свойстве momentKeyframes структуры последовательности. По сути, это "специальный" трек, который используется только для этой цели и поэтому может принимать только данные ключевых кадров , которые 
    связанные с действиями момента, которые вы хотите, чтобы были в последовательности. Эта дорожка создается точно так же, как и любая другая, путем создания структур ключевых кадров и заполнения их данными ключевых кадров, где канал 0 является единственным каналом.
    и тип дорожки - seqtracktype_moment. Ниже приведен пример создания такой дорожки с использованием функции, которую мы определили выше, для запуска по заданным моментам (кадрам):
  var _seq = sequence_get(my_Seq); var _k = array_create(3); _k[0] = sequence_keyframe_new(seqtracktype_moment); _k[0].frame = 60; _k[1] = sequence_keyframe_new(seqtracktype_moment); _k[1].frame = 120; _k[2] = sequence_keyframe_new(seqtracktype_moment); _k[2].frame = 180; var _d = array_create(1); _d[0] = sequence_keyframedata_new(seqtracktype_moment); _d[0].channel = 0; _d[0].event = method(_d[0], seq_shoot); _k[0].channels = _d; _k[1].channels = _d; _k[2].channels
    = _d; _seq.momentKeyframes = _k;
  Приведенный выше код просто установит кадры 60, 120 и 180 трека "момент" для вызова метода seq_shoot. Вы заметите, что в настоящее время вы не можете передавать какие-либо параметры функциям, которые используются для каждого
    момента, и во всех случаях переменная self в области видимости функции присваивается экземпляру последовательности (обычно вам не нужно использовать self , но в некоторых особых случаях это может быть полезно).
    но в некоторых особых случаях это может быть полезно).
   
  Широковещательные сообщения
  Последовательности могут генерировать широковещательные сообщения- простые строки, которые добавляются к определенным кадрам на временной шкале анимации, и когда эта точка временной шкалы будет достигнута, то строка будет передана всем
    экземпляры объектов, которые слушают ее. Эти сообщения можно добавить в IDE с помощью редактора последовательностей, но их также можно создавать и редактировать с помощью кода.
  Чтобы создать широковещательное сообщение на последовательности с помощью GML, необходимо добавить их в кадр в свойстве messageEventKeyframes структуры последовательности. По сути, это "специальная" дорожка, которая используется только
    для этой цели и поэтому может принимать только те данные ключевых кадров, которые связаны с широковещательными сообщениями, которые вы хотите, чтобы были у последовательности. Эта дорожка создается точно так же, как и любая другая дорожка, путем создания структур ключевых кадров и
    заполняя их данными ключевых кадров, где канал 0 - единственный канал, который вы можете использовать, а тип дорожки - seqtracktype_message. Ниже приведен пример того, как это можно сделать:
  var _seq = sequence_get(my_Seq); var _k = array_create(2); _k[0] = sequence_keyframe_new(seqtracktype_message); _k[0].frame = 60; _k[1] = sequence_keyframe_new(seqtracktype_message); _k[1].frame = 120; var _m1 = array_create(2); _m1[0] = "Hello"; _m1[1] = "World"; var _m2 = array_create(1);  _m2[0] = "This is a Broadcast Message"; var _d1 = array_create(1); _d1[0] = sequence_keyframedata_new(seqtracktype_message); _d1[0].channel = 0; _d1[0].events = _m1; var _d2 = array_create(1); _d2[0] = sequence_keyframedata_new(seqtracktype_message); _d2[0].channel = 0; _d2[0].events = _m2; _k[0].channels = _d1; _k[1].channels = _d2; _seq.messageEventKeyframes = _k;
  Вы заметите, что текст сообщения передается в канал данных ключевых кадров в виде массива. Это сделано потому, что вы можете передавать несколько сообщений на одном кадре, а разные экземпляры объектов могут прослушивать их и реагировать по-разному в зависимости от того, какое сообщение они ожидают.
    того, какое сообщение они ожидают.
  Как только последовательность выпустила широковещательное сообщение, вы можете разобрать его с помощью события Other > Broadcast Message в экземплярах объектов, которое подробно описано здесь.
   
   
   
  
    
      
        Назад: Последовательности
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

