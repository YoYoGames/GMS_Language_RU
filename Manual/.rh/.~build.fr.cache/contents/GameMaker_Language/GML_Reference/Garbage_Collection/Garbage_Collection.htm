
  
  Вывоз мусора
   Сборщик мусора в GameMaker Studio 2 существует потому, что методы могут передаваться в стек и оставаться без ссылок, также как и структуры и некоторые другие вещи, которые в свою очередь могут привести к утечке памяти, если они не будут "очищены"
    каким-то образом. Именно здесь на помощь приходит сборщик мусора, который работает в фоновом режиме игры, собирая все, на что не было ссылок, и поддерживая оптимальное использование памяти. Когда мы говорим о том, что что-то было отнесено, мы
    обычно подразумевается любая структура или функция, которая не связана (не обязательно напрямую, но через цепочку других переменных) с глобальной переменной или переменной экземпляра объекта . Также обратите внимание, что
    функции, определенные в скриптах в IDE, также не собираются, поскольку они неявно сделаны глобальными.
  ПРИМЕЧАНИЕ: Обратите внимание, что такие вещи, как поверхности, структуры данных, буферы и другие динамические ресурсы не собираются в мусор и имеют свои собственные функции уничтожения для очистки связанной с ними памяти. Как правило,
    если все, что вы создаете во время выполнения, имеет функцию уничтожения, то это не будет собираться в мусор, и вам придется самостоятельно разбираться с этим в коде. Исключением являются последовательности, анимационные кривые и экземпляры, которые также требуют
    сборщик мусора, но при этом должны вызывать функцию уничтожения.
  Сборка мусора, которую использует GameMaker Studio 2, является "генерационной". Это означает, что для уменьшения объема работы, которую необходимо выполнять каждый кадр, объекты делятся на "поколения". Новые объекты создаются в поколении 0 и
    по мере старения они переходят в более старшие поколения. Общая идея заключается в том, что объекты, которые находятся здесь некоторое время, не нужно постоянно проверять на предмет удаления, а можно проверять реже (обратите внимание, что "объекты"
    здесь относится ко всему, что может быть собрано в мусор, а не к общим экземплярам объектов, определенным в браузере активов). Обратите внимание, что хотя система проверки является генерационной, фактические проверки выполняются "инкрементным" способом, таким образом.
    вместо того, чтобы очищать потенциально тысячи объектов из поколения за один кадр, что вызывает большой скачок в использовании процессора и потенциально влияет на игровой процесс, каждое поколение будет проверяться и, если необходимо, очистка будет распределена
    на несколько кадров, так что сборщик мусора запускается чаще, но выполняет меньше работы на каждом кадре (вы можете установить целевое время, которое сборщик мусора должен потратить на каждый кадр, используя функцию gc_target_frame_time()).
  Как правило, вам никогда не придется взаимодействовать с системой сбора мусора GameMaker Studio 2, и обычно результаты ее работы не видны, но некоторые команды GML доступны для получения информации о том, что делает сборщик, и
    влиять на его поведение в ограниченной степени.
  ВАЖНО! Обратите внимание, что на целевой платформе HTML5 сборкой мусора занимается движок JavaScript, поэтому ни одна из перечисленных ниже функций не повлияет на его работу, а функция gc_get_stats() вернет 0 для всех
    поля.
   
  
    gc_enable
    gc_is_enabled
    gc_collect
    gc_target_frame_time
    gc_get_target_frame_time
    gc_get_stats
  
   
  Чтобы помочь решить, что и когда нужно собирать в мусор, есть несколько функций, которые можно использовать для создания и проверки слабых ссылок на структуры. Слабая ссылка - это ссылка, которая не защищает ссылаемый объект от сбора
    сборщиком мусора, и поэтому может быть использована для проверки того, что структура все еще "жива" (на нее ссылаются) или нет где-то в игре. Для слабых ссылок доступны следующие функции:
   
  
    weak_ref_create
    weak_ref_alive
    weak_ref_any_alive
  
   
   
   
  
    
      
        Назад: Ссылка наGML
        Следующее: Функции переменных
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

