
  
  vertex_format_add_custom
  Эта функция позволяет использовать пользовательский тип данных для определенных атрибутов формата вершин как часть создаваемого нового формата вершин. Доступные для использования значения определяются выбранной вами константой типа данных, перечисленной ниже:
   
  
    
      
        Постоянная
        Описание
      
      
        vertex_type_float1
        Одно значение с плавающей запятой
      
      
        тип_вершины_плоат2
        Два значения с плавающей запятой
      
      
        тип_вершины_плоат3
        Три значения с плавающей запятой
      
      
        vertex_type_float4
        Четыре значения с плавающей запятой
      
      
        тип_вершины_цвета
        Значения четырех компонентов (r, g, b, a)
      
      
        vertex_type_ubyte4
        Четырехкомпонентные беззнаковые байтовые значения (от 0 до 255)
      
    
  
   Также необходимо определить, как будут использоваться эти константы, чтобы их значения можно было правильно "привязать" к создаваемому шейдеру. Это необходимо в связи с тем, что DX и OpenGL имеют разные требования, поэтому если
    вы не свяжете их должным образом, они не будут правильно отображаться в шейдере. Доступные константы использования, которые вы можете выбрать, перечислены ниже, и их использование будет зависеть от специфики создаваемого шейдера:
   
  
    
      
        Постоянная
        Описание
      
      
        вершина_использования_позиции
        значения положения (x, y, z)
      
      
        цвет_использования_вершины
        значения цветов (r, g, b, a)
      
      
        нормальное_использование_вершины
        нормальные значения вершин (nx, ny, nz)
      
      
        вершинный_пользовательский_текстовый_корд
        Ультрафиолетовые координаты (u, v)
      
      
        вес смешивания вершин
        вес смеси входной матрицы (например, для скелетной анимации)
      
      
        вершинные_использования_блиндинды
        индексы матриц для использования (например, для скелетной анимации)
      
      
        глубина использования вершин
        значение буфера глубины вершины
      
      
        вершина_использования_тангенса
        значения касательных
      
      
        вершинное_использование_бинормальное
        бинормальные значения
      
      
        вершина_использования_тумана
        значения тумана
      
      
        образец_использования_вершин
        индекс пробоотборника
      
    
  
   Есть несколько важных моментов, на которые следует обратить внимание при использовании таких пользовательских форматов:
  
    Функция vertex_format_add_custom() поддерживает только vertex_usage_position, vertex_usage_colour, vertex_usage_normal и vertex_usage_textcoord при использовании шейдеров GLSL. Они будут отображаться на атрибуты шейдера 
     in_Position, in_Colour[0 - ...], in_Normal соответственно (все, что не является одним из этих трех атрибутов - например, текстурные координаты - может быть отображено на любой определенный вами атрибут).
    В общем случае следует использовать vertex_usage_textcoord для всех дополнительных параметров, где это возможно, так как такие типы, как vertex_usage_blendweight и vertex_usage_tangent близки к устаревшим в большинстве шейдерных языков и, вероятно, не будут
      конвертироваться правильно. Вместо этого используйте vec, vec2, vec3 или vec4 типы vertex_usage_textcoord, и все должно работать нормально.
    GLSL ES не поддерживает целочисленные атрибуты, поэтому передача ivec4 не работает (этот тип обычно используется при передаче vertex_usage_blendindices ). Что вам нужно сделать, так это передать координаты текстуры, а затем в
     шейдере преобразовать их в ivec4 следующим образом:
  
   
  атрибут vec3 in_Position; атрибут vec4 in_BlendIndices; атрибут vec4 in_BlendWeights;
     изменяемый vec4 v_vColour; изменяемый mat4 v_mat;
     void main() {
     gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * vec4( in_Position.xyz, 1.0); v_vColour = in_BlendWeights; ivec4 t = ivec4(in_BlendIndices); v_mat = gm_Matrices[ t.x ]; }
  
  
    Веса блендов обычно хранятся в массиве, а затем доступ к ним осуществляется с помощью индексов блендов, но здесь вы видите, что вместо определения in_BlendIndices как атрибута ivec4, это vec4 , затем приведенный к ivec4 в 
      коде. Это затем используется для индексации массива, созданного с помощью gm_Matrix (доступ к массиву можно получить только с помощью значения INT - не float).
    
  
  Синтаксис:
  vertex_format_add_custom(type, usage);
  
    
      
        Аргумент
        Описание
      
      
        тип
        Тип данных, которые будут содержать эти пользовательские данные вершины (см. константы типа перечисленные ниже).
      
      
        использование
        Использование, которое получат данные (см. константы использования перечисленные ниже).
      
    
  
   
  Возвращается:
  Н/Д
   
  Пример:
  vertex_format_begin(); vertex_format_add_textcoord();
     vertex_format_add_custom(vertex_type_float3, vertex_usage_position); my_format = vertex_format_end();
  Приведенный выше код создаст новый формат вершин, содержащий только текстуру и 3 пользовательских значения с плавающей точкой для позиции. Затем он сохраняет идентификатор формата в переменной "my_format".
   
   
   
  
    
      
        Назад: Примитивы и форматы вершин
        Далее: vertex_format_end
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

