
  
  Обращение к переменным в других случаях
  В разделах, посвященных переменным, вы узнали, как создавать и использовать переменные в пределах одного экземпляра или в глобальной области видимости, но что произойдет, если вы хотите, чтобы один экземпляр обращался к переменной в другом,
    другом экземпляре? Есть много случаев, когда вы можете захотеть сделать это, например, при столкновении с объектом пули вы можете захотеть узнать, сколько повреждений нанесла пуля, обратившись к переменной в пуле, или вы можете захотеть остановить движение
    или остановить движение всех шариков в головоломке, или переместить главного героя в определенную позицию, или в любой другой ситуации, с которой вы обычно сталкиваетесь в любой игре. К счастью, язык GameMaker Language оснащен механизмами для достижения этой цели.
    этого.
  Одним из наиболее распространенных методов доступа к переменной или ее изменения в другом экземпляре является использование имени объекта в качестве идентификатора, а затем использование точки "." для указания GameMaker Studio 2, что переменная, используемая после точки
    должна быть присвоена или изменена в этом объекте. Синтаксис для этого следующий:
  <object_id>.<переменная>= <значение>;
  На практике это будет выглядеть следующим образом:
  obj_ball.speed = 0;
  С помощью приведенного выше кода вы устанавливаете скорость экземпляра " obj_ball". Однако если у вас в комнате более одного экземпляра данного объекта, то это значение будет применяться ко всем им одинаково - если только вы не используете HTML5,
    в этом случае он будет действовать только на один, но у вас нет возможности узнать, на какой именно - поэтому, если вам нужно получить доступ ко всем экземплярам объекта, вы должны использовать with(), так как это
    100% кроссплатформенная совместимость. В общем, этот формат следует использовать только тогда, когда в комнате находится единственный экземпляр объекта, или (как вы увидите в следующей части) когда у вас есть определенный  ID экземпляра.
  Вы также можете получить доступ к одному экземпляру объекта, если в комнате имеется несколько экземпляров, используя уникальное имя экземпляра, чтобы сообщить GameMaker Studio 2, к какому именно экземпляру мы хотим обратиться. Константа имени экземпляра - это
    уникальная идентифицирующая константа, которая присваивается каждому экземпляру, добавленному в комнату в вашей игре. Вы можете найти эту константу, дважды щелкнув на экземпляре в редакторе комнат:
  Обратите внимание, что это имя можно отредактировать и дать ему более описательное название - хотя оно должно быть
    уникальным для всей игры - и оно может быть использовано в качестве левой части точки:
  inst_4DB70D2.speed = 0;
  Однако наиболее распространенным и практичным методом является использование переменной слева от точки, при условии, что данная переменная хранит действительный идентификатор экземпляра. Следующие примеры иллюстрируют это.
  // Пример 1 var _inst = instance_position(mouse_x, mouse_y, all); if instance_exists(_inst) {
     _inst.speed = 0; }
    
     // Пример 2 var _inst = instance_create_layer(mouse_x, mouse_y, "Enemies", obj_E_Parent); _inst.direction = point_direction(_inst.x, _inst.y, x, y); _inst.target = id;
  В приведенном выше коде для примера 1 имеется экземпляр_существует() вызов в блоке кода. Это связано с тем, что использование метода point для доступа или изменения другого экземпляра
    приведет к ошибке и аварийному завершению игры, если экземпляр не существует, а в данном примере есть вероятность, что так и есть. Однако в примерах 2 и 3 проверка не нужна, поскольку мы знаем, что экземпляр существует.
    поскольку в примере 2 мы создали его, а в примере 3 - другой экземпляр в событии столкновения. Однако, если существует вероятность того, что экземпляр может быть уничтожен, деактивирован или иным образом удален из комнаты при использовании этого метода,
    следует всегда проверять это заранее с помощью функции instance_exists() или функции instance_number() функция.
  Обратите внимание, что вы не можете использовать специальное ключевое слово " all" с этим методом, чтобы нацелить все экземпляры (например: all.val = 10 выдаст ошибку), но вы можете использовать ключевые слова 
    " other" и" self" без проблем. Например, использование other в событии столкновения:
  // Пример 3 other.hp -= 10; if other.hp <= 0 {
     other.sprite_index = spr_E_Dead; }
  
  Также важно отметить, что нельзя использовать любую функцию саму по себе в качестве левой части присваивания. Например, следующий код приведет к ошибке:
  instance_nearest(x, y, obj).speed = 0;
  Возвращаемое значение для выражения в этом примере кода является целым числом (уникальное значение ID для ближайшего экземпляра), поэтому оно должно быть заключено в скобки (), чтобы использоваться таким образом и правильно обращаться к экземпляру.
    требуется. Приведенный выше код будет правильно записать как:
  (instance_nearest(x, y, obj)).speed = 0;
     //or
    
     var inst = instance_nearest(x, y, obj); inst.speed = 0;
  Все эти способы чтения, изменения и установки переменных в других экземплярах являются вполне допустимыми и работают потому, что точка на самом деле является оператором. Он принимает значение в качестве левого операнда, переменную в качестве правого операнда и возвращает адрес этой конкретной переменной в указанном объекте или экземпляре. Все имена объектов, константы, идентификаторы и т.д... просто представляют значения, и с ними можно работать как с любыми другими значениями.
  Другим способом ссылки на переменные в другом экземпляре является использование функции языка GameMaker with(), которая подробно рассматривается здесь:
  // Это повлияет на все экземпляры объекта "obj_Enemy" with (obj_Enemy) { target = other.parent; } 
     // Это повлияет на один экземпляр объекта "obj_Enemy" var _enemy = instance_nearest(x, y, obj_Enemy); if instance_exists(_enemy) { with (_enemy) { target_x = mouse_x; target.y = mouse_y; }  }
   
   
   
  
    
      
        Назад: ОбзорGML
        Следующее: Порядок оценки
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

