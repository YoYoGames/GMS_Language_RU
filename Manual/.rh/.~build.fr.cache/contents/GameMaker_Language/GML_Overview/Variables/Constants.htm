
  
  Константы
  Константа - это тип переменной, которая устанавливается один раз в начале игры и затем никогда не изменяется. На самом деле, значения констант нельзя изменить после того, как они были объявлены. Это делает их идеальными для хранения значений, которые используются на протяжении всей игры для идентификации специальных данных.
    игры для идентификации специальных данных.
  В языке GameMaker есть два типа пользовательских констант: макросы и перечисления, оба из которых объясняются ниже. Также обратите внимание, что любое значение, которое всегда одно и то же, считается константой, независимо от типа данных.
   типа данных, например, строка или число 3.
  ПРИМЕЧАНИЕ: Язык GameMaker Language также имеет ряд встроенных константных значений, которые используются для идентификации определенных вещей. Они описаны на соответствующих страницах для функций времени выполнения, которым они требуются, в разделе " СправочникGML ".
   
  Макросы
  Хотя это не совсем переменные, макросы похожи на них по способу использования, т.е. это именованные значения, которые вы можете использовать в своем коде для замены жестко закодированных значений. По сути, макрос
    это именованная переменная, которая содержит постоянное единственное значение любого типа данных. Вы можете определить свои собственные макросы с помощью редактора сценариев и затем использовать их в коде и DnD™так же, как если бы это были
    как обычные переменные, с той лишь разницей, что их нельзя изменить в игре.
  Синтаксическая структура макроса выглядит следующим образом:
  #macro <переменная> <значение> 
  Например, определите следующий макрос "total_weapons" (обратите внимание на предшествующий "#" и отсутствие двоеточия ";" в конце):
  #macro total_weapons 10
  Затем вы вызовете это в своем коде следующим образом:
  if ++pos == total_weapons {
     pos = 0; }
  
  Обратите внимание, что вы не сможете изменить значение константы, поэтому подобный код приведет к аварийному завершению игры:
  total_weapons = 11;
  Вы можете определить макрос в любом месте вашего кода или в сценарии, и он будет предварительно скомпилирован и включен в вашу игру, как если бы он был там с самого начала, но мы рекомендуем вам создать специальный актив сценария и определить все ваши макросы в нем.
    Это будет проще организовать и отладить в дальнейшем!
  Если вам нужно, чтобы значение макроса менялось во время выполнения, то вам, вероятно, следует сделать его глобальной переменной, поскольку они могут быть изменены из кода во время игры, если только вы не установите макрос в качестве runtime    функцией. Установка макроса в качестве функции означает, что эта функция будет вызываться каждый раз, когда вы используете макрос. Например:
  #macro col make_colour_hsv(irandom(255), 255, 255)
  Затем вы вызовете этот макрос следующим образом:
  image_blend = col;
  При использовании этого кода изображение будет окрашиваться в разные цвета каждый раз, когда используется макрос. Стоит отметить, что макросы можно также разделить на несколько строк с помощью символа \, чтобы показать место разрыва строки.
    В качестве примера можно привести следующее:
  #macro hello show_debug_message("Hello" + \ string(player_name) + \ ", how are you today?");
  Это чисто косметическое действие, так как разделение макроса таким образом никак не повлияет на результат конечного макроса при его использовании, и просто обеспечивает поддержку многострочного текста в макросах, содержащих более длинные строки кода.
  Очень важной особенностью макросов является то, что они могут быть определены для использования с определенными конфигурациями (configs), то есть вы можете иметь одно и то же имя макроса, но давать ему разные значения в зависимости от выбранной в данный момент конфигурации.
    выбранной конфигурации. Например, если у вас есть конфигурация для Android Ads и другая для iOS Ads, то вы можете определить один макрос для хранения требуемого значения ID приложения:
  #macro ad_id ""; #macro Android:ad_id "com.yoyogames.googlegame" #macro iOS:ad_id "com.yoyogames.appstoregame"
  Как видите, сначала указывается имя конфигурации, затем двоеточие :, а затем имя и значение макроса. Обратите внимание, что между двоеточием : и именем конфигурации или именем макроса не должно быть пробелов, иначе возникнет ошибка.
    иначе вы получите ошибку.
   
  Enums
  Перечисление - это "перечислитель", и оно, по сути, позволяет вам создать свой собственный ограниченный тип данных со списком постоянных значений, и они имеют следующую структуру:
  перечисление <переменная> 
    {
        <константа> [= <значение> ],
        <константа> [= <значение> ], // и т.д... }
  В следующем примере мы создаем перечисление для цветов радуги и присваиваем ему различные константы и значения по умолчанию:
  enum rainbowcolours { red, orange, yellow, green, blue, indigo, violet }
  Элементы перечисления могут быть только целыми числами или выражениями с предыдущими перечислениями, которые оцениваются в целое число, и по умолчанию они нумеруются
    от 0 и выше, поэтому в нашем примере, приведенном выше, по умолчанию красный = 0, оранжевый = 1, желтый = 2 и т.д..
  Вы также можете присвоить значения переменным enum во время создания:
  enum enum_test { val = 10; } 
     enum rainbowcolours { red = 5, orange = 5 * 2, yellow = 15, green = 20, blue = 25, indigo = 30, violet = 35 * enum_test.val }
  Обратите внимание, что в приведенном выше примере мы используем другое перечисление для создания выражения для "violet". Это работает только в том случае, если перечисление, на которое ссылаются, было создано до перечисления, которое используется в выражении, но это не будет работать для переменных или
    функций, поскольку значение перечисления должно быть оценено как константа при компиляции проекта. Также обратите внимание, что все значения перечисления оцениваются в целые числа, и когда вы создаете
    вы должны знать, что для работы перечислений допускаются только целочисленные значения. Это значение может быть любым целым числом, которое может быть представлено числом с плавающей точкой двойной точности, включая отрицательные значения.
  Для последующего доступа к значению внутри данного типа перечисления можно использовать  метод точки ".", например, так:
  переменная = <имя_переменной>.<переменная_переменной>;
  В качестве примера давайте воспользуемся перечислением "rainbowcolours", которое мы создали в приведенном выше коде:
  color_value = rainbowcolours.green * rainbowcolours.red;
  Теперь переменная colour_value будет содержать значение 100 (20 * 5).
  Обратите внимание, что вы не можете изменять значения для любой константы перечисления после ее создания, точно так же, как вы не можете изменять макросы после их создания.
  ПРИМЕЧАНИЕ: Значения Enum хранятся как int64, поэтому выполнение is_real() на них будет возвращать false.
   
  Встроенные константы
  В следующей таблице приведен список встроенных констант, которые могут быть возвращены некоторыми функциями и операциями в ваших проектах:
   
  
    
      
        Постоянная
        Описание
      
      
        pointer_null
        Эта константа указывает на то, что указатель не указывает ни на что значимое (то же самое, что NULL в C++ или null в C#).
      
      
        pointer_invalid
        Эта константа просто означает, что значение не является действительным указателем
      
      
        undefined
        Эта константа возвращается, когда функция должна что-то вернуть, но не имеет подходящего или "правильного" значения для возврата.
      
      
        NaN
        Это константа, которая может быть возвращена, когда компилятор не может оценить результаты операции как число - например, 0 / 0 не может быть определено как действительное число, и поэтому представляется как NaN
      
      
        infinity
        Эта константа относится к числу, которое считается бесконечным, например, результат, который вы получите при делении любого значения с плавающей запятой на ноль, например: 1.0/0.
      
      
        true
        Эта константа представляет собой значение 1, которое GameMaker Studio будет оценивать как булево значение "true" (обратите внимание, что любое значение, равное или большее 1, будет оцениваться как true).
      
      
        false
        Эта константа представляет значение 0, которое GameMaker Studio будет оценивать как булево значение "false" (обратите внимание, что любое значение меньше или равно 0 будет оцениваться как false).
      
      
        pi
        Эта константа представляет собой значение числа Пи: 3,141592653589793280 и т.д... хотя точное значение будет зависеть от различных факторов, таких как ОС или целевая платформа.
      
    
  
   
   
   
   
  
    
      
        Назад: Переменные и область применения переменных
        Следующее: Локальные переменные
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

