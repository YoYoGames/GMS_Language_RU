
  
  Типы данных
  В предыдущих разделах мы рассмотрели переменные и правила их определения, но мало что было сказано о различных типах данных, которые может хранить переменная. Поэтому в этом разделе мы объясним различные
    типы и для чего они могут быть использованы.
  Прежде чем продолжить, давайте вкратце объясним, что мы подразумеваем под "типами данных". Когда вы создаете переменную, она может использоваться для хранения информации, а когда вы вызываете функцию, она также может хранить возвращаемую информацию. Однако эта информация
    может иметь различные "вкусы" - например, это может быть вещественное число или строка. Эти различные типы используемых значений называются типами данных, и при использованииязыка GameMaker они могут
    быть любыми из следующих:
   
  Струны
  
    Строка - это любой текст, заключенный в кавычки "...". Со строками можно выполнять определенные операции, например, складывать две строки вместе для создания более длинной строки (конкатенация), а также изменять свойства строки и даже извлекать из нее вещественные числа. Более подробную информацию о строках и строковых функциях см: GML Reference - Strings.
     
  
  Реальные цифры
  
    Вещественные числа - это любое значение, которое не является ни строкой, ни одним из других возможных типов данных. Так, 124, 45639.566546456, 0, -45.5 и т.д... - все это примеры вещественных чисел. Все вещественные числа хранятся в виде значений с плавающей точкой двойной точности или целых чисел (либо 32-битных целых чисел).
      (либо 32-битные целые числа - int32 - либо 64-битные целые числа - int64), и компилятор оптимизирует их там, где это возможно (например, 0.0 будет оптимизировано до целочисленного значения 0). При работе
      с любым значением, которое не является целым числом, вы можете столкнуться с небольшими ошибками округления из-за природы математики с плавающей запятой. Для получения дополнительной информации об этой и других функциях, связанных с числами, см: GML Reference - Number Functions.
    ПРИМЕЧАНИЕ: В цели HTML5 все действительные числа являются двойными.
    Обратите внимание, что хотя все созданные переменные в GameMaker Studio 2 хранятся как числа с плавающей точкой двойной точности или целые числа, вы можете использовать другие форматы при работе с расширениями. Они могут быть переданы в GameMaker Studio 2 из расширения
      и затем проверить с помощью соответствующей функции is_*(), список которых можно найти здесь.
     
  
  Массивы
  
    Массив - это специальный тип данных, который можно использовать для хранения нескольких значений. Вы присваиваете массив переменной, а затем "заполняете" различные индексы массива значениями. Этот массив можно передавать скриптам и функциям по ссылке, однако если вы измените переданный массив, он станет копией исходного массива, поэтому для обновления массива его нужно будет вернуть обратно в исходную переменную. Для получения дополнительной информации о массивах см: ОбзорGML- Массивы.
     
  
  Структуры
  
    Структура (иногда называемая "легким объектом") - это необработанная структура данных, которая служит контейнером для переменных всех типов данных. Вы присваиваете структуру переменной, а в структуре можно определить дополнительные переменные, которые можно читать или записывать по мере необходимости. Более подробную информацию о структурах можно найти в разделе ОбзорGML- Структуры.
     
  
  Переменные метода
  
    Переменная метода - это переменная, которой присвоена функция, и ее можно использовать точно так же, как и функцию времени выполнения GML. Для получения более подробной информации см. раздел Переменные метода.
     
  
  Шестнадцатеричные значения
  
    GameMaker Studio 2 может принимать шестнадцатеричные литералы в качестве законных значений. Шестнадцатеричные значения особенно часто встречаются при работе с цветами, но могут использоваться везде, где требуется целочисленное положительное значение. Обратите внимание, что шестнадцатеричные значения могут
      быть отформатированы одним из следующих двух способов, где <abcd> - это фактическое шестнадцатеричное значение:
    $< abcd> 0x<
     abcd>
    Например, следующие значения могут быть выражены в шестнадцатеричном виде, как показано на рисунке:
    11406 = $2c8e = 0x2c8e 16777215 = $ffffffff = 0xffffffff
     
  
  Булево
  
    Булево число - это просто значение, которое может быть либо истинным, либо ложным. Обратите внимание, что в настоящее время GameMaker Studio 2 интерпретирует вещественное число, равное или меньшее 0,5, как ложное значение, а любое вещественное число, большее 0,5, как истинное.
      Однако это не означает, что вы должны проверять 1 и 0 (или любое другое вещественное число) на истинность и ложность, поскольку вам также предоставляются константы true и false, которые всегда должны использоваться в вашем коде, чтобы
      предотвратить любые проблемы в случае добавления реальных булевых типов данных в будущем обновлении.
    Вы можете преобразовать любое вещественное число в неявное булево значение с помощью следующей функции:
    
      bool
    
     
  
  Указатель
  
    Указатель - это тип данных, который "указывает" на область памяти. Вы не можете выполнять операции с указателем, и он используется только для некоторых очень специфических функций, например, для получения адреса текстуры или буфера из памяти для другой функции. Для примера
      функций, возвращающих указатель, вы можете посмотреть в разделе buffer_get_address() или sprite_get_texture().
    Существует также функция для проверки того, является ли значение указателем (см. раздел "Проверкатипов данных", ниже), и функция для преобразования значения в указатель:
    
      ptr
    
    Вы также можете использовать (и получать обратно) следующие встроенные константы при использовании указателей:
     
    
      
        
          Постоянная
          Описание
        
        
          pointer_null
          Эта константа указывает, что указатель не указывает ни на что значимое (то же самое, что NULL в C++ или null в C#).
        
        
          pointer_invalid
          Эта константа просто означает, что значение не является действительным указателем
        
      
    
     
  
  Enum
  
    Перечисление - это "перечислитель", и оно позволяет создать собственный ограниченный тип данных со списком постоянных значений. Перечисления подробно описаны на странице Константы.
     
  
  Неопределенный
  
    Неопределенное значение (также известное как "нулевое" значение) - это такое значение, когда выражение не имеет правильного значения, хотя синтаксически оно правильно, и поэтому должно что-то вернуть. Например, допустим, у вас есть карта DS и вы используете функцию ds_map_find_value(). Что произойдет, если в карте не будет искомого значения? Ну, поскольку функция правильно отформатирована, и проблема в том, что такого значения не существует, то она вернет константу undefined, и вы можете проверить эту константу так же, как проверяли бы true или любое другое значение.
     
  
  NaN
  
    NaN означает "не число" и является константой, которая может быть возвращена, когда компилятор не может оценить результаты операции как число. Например, 0/0 не может быть определено как действительное число и поэтому представляется NaN, или квадратный корень из отрицательного числа - которое считается "мнимым" числом - не может быть представлен как действительное число и поэтому представляется NaN.
     
  
  Бесконечность
  
    Постоянная бесконечность относится к числу, которое считается бесконечным, например, результат, который вы получите при делении любого значения с плавающей запятой на ноль, например: 1.0/0.
  
   
  Вы можете проверить тип данных любой переменной с помощью функций, перечисленных на следующей странице:
  
    Переменные функции
  
  Здесь вы также можете найти таблицы арифметических типов, которые показывают результаты различных операций с использованием смешанных типов данных переменных:
  
    Типовые столы
  
   
   
   
  
    
      
        Назад: ОбзорGML
        Следующий: Ключевые слова экземпляра
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

