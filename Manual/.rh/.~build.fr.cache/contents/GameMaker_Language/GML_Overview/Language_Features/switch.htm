
  
  переключатель
  В ряде ситуаций вы хотите, чтобы ваши экземпляры выполняли различные действия в зависимости от определенного значения. Вы можете сделать это, используя ряд последовательных if / else операторов, но
    когда количество возможных вариантов становится больше двух или трех, обычно проще использовать оператор switch. Оператор switch имеет следующую форму:
  switch (<выражение>) {
     case <constant1>: <statement1>; ... ; break; case <constant2>: <statement2>; ... ; break;...
     default: <statement>; }
  
  Это работает следующим образом:
  
    Сначала выполняется выражение.
    Затем он сравнивается с результатами различных констант после каждого изутверждений case.
      Когда мы говорим "константа", мы имеем в виду, что значение в данном случае не может быть переменной выражения и должно быть фиксированным значением любого типа данных, например, "бой" или 3, или ключевое слово noone. 
    Выполнение продолжается после первого оператора case с правильным значением, пока не встретится оператор break.
    Если ни один из операторов case не имеет нужного значения, то будет выполнен оператор default (наличие оператора default не обязательно, и если он отсутствует, то никаких действий не будет предпринято).
  
  Простой пример использования оператора switch будет выглядеть следующим образом:
  switch (global.state) { case "alert": if (instance_exists(obj_Player)) { if (point_distance(x, y, obj_Player.x, obj_Player.y) < 100) { 
    global.state = "chase"; }  }  break; case "chase": var _lost = false; if (instance_exists(obj_Player)) { move_towards_point(obj_Player.x,
    obj_Player.y, 2); if (point_distance(x, y, obj_Player.x, obj_Player.y) > 100) { _lost = true; }  }  else _lost = true; if (_lost) { speed = 0; global.state = "alert"; }  break; }
  Здесь у нас есть глобальная переменная, содержащая строковое значение, которое используется для установки поведения (состояния) экземпляра. В этом примере экземпляр просто переключается между двумя состояниями, но это очень легко расширить, чтобы включить больше состояний, добавив
    дополнительные операторы case для дополнительных строк состояний, таких как "сражаться", "умереть" и т.д..
  Обратите внимание, что для выполнения одного и того же оператора можно использовать несколько операторов case, поскольку прерывание не всегда требуется для каждого case. Если не существует оператора break для
    конкретного case, выполнение просто продолжается с кода для следующего случая, например:
  switch (keyboard_key) {
     case vk_left: case ord("A"): x -= 4; break;
     case vk_right: case ord("D"): x += 4; break;
     case vk_up: case ord("W"): y -= 4; break;
     case vk_down: case ord("S"): y += 4; break;
     }
  
  Приведенный выше код использует switch для проверки события клавиатуры, а затем сравнивает его с каждым из перечисленных case. Если оно соответствует любому из требуемых значений, то выполняется соответствующий код. Обратите внимание, как в коде мы использовали
    то, как переключатель может проверять несколько cases и продолжать, если не встречается break, что позволяет использовать различные клавиши для получения одного и того же результата. Обратите внимание, что каждый case может иметь свой собственный код, и таким образом можно создать своего рода систему "наследования", в которой более одного case и его код будут выполняться последовательно со следующим, пока не будет достигнут прерывающий момент, зависящий от значения
    начального выражения switch.
   
   
   
  
    
      
        Назад: Особенности языка
        Далее: перерыв
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

