
  
  try / catch / finally
  Операторы try, catch и finally могут быть использованы в вашей игре для проверки ошибок и позволяют вам тестировать блоки кода и контролировать, что произойдет, если возникнут какие-либо исключенияво время выполнения. Использование этих операторов предотвратит завершение игры и показ стандартного сообщения об ошибке пользователю, но это означает, что вам придется позаботиться о том, что произойдет дальше в этом случае, например, сохранить лог-файлы и завершить
    (обратите внимание, что если вы ничего не сделаете, ваша игра может стать нестабильной и работать некорректно).
  В самом простом виде синтаксис попытки выглядит следующим образом:
  try {
     <statement1>;
     <statement2>;
     ... }
  
  Однако попытка, не имеющая ничего для обработки исключений, которые может создать код, будет не очень полезна, поэтому мы обычно используем ее в паре с catch, используя следующий синтаксис:
  try {
     <statement1>;
     <утверждение2>;
     ...
     }
     catch(<переменная>)
     {
     <statement1>;
     <statement2>;
     ...
     }
  
  Что делает catch, так это позволяет вам запускать дополнительный код, поставляемый в следующем блоке, когда исключение из предыдущей попытки было поймано. Если это исключение времени выполнения, то предоставленная переменная может быть использована для доступа к структуре, которая будет содержать следующую информацию:
  { message : "", // строка, которая является коротким сообщением для этого исключения longMessage : "", // строка, которая является более длинным сообщением для этого исключения script : "", // строка
    которая описывает, откуда пришло исключение stacktrace : [ "", "" ], // массив строк, который является кадром стека, на котором было сгенерировано исключение }
  
  Простой пример использования показан ниже:
  var a = 0, b = 0, c = 0; try
     {
     c = a div b; }
     catch( _exception) {
     show_debug_message(_exception.message);
     show_debug_message(_exception.longMessage);
     show_debug_message(_exception.script);
     show_debug_message(_exception.stacktrace);
     }
  
  Может оказаться, что вы хотите выполнить некоторый код независимо от того, было ли выброшено исключение или нет, и для этого вы можете добавить блок finally. Синтаксис finally следующий:
  finally {
     <утверждение1>;
     <утверждение2>;
     и т.д..
     }
  
  Стоит отметить, что вы можете иметь любую комбинацию из них вместе, т.е:
  
    попробовать / наконец
    попытка / уловка
    try / catch / finally
  
  Обратите внимание, что внутри блока finally нельзя использовать перерыв, продолжить, выход или return утверждения, так как
    они не имеют смысла в данном контексте, и компилятор выдаст ошибку, если они будут использованы.
  Наконец, вы также можете вложить различные try / catch / finally друг в друга, например:
  var a = 0, b = 0, c = 0; try
     {
     try
     {
     c = a div b; }
     finally
     {
     ++a;
     }
     }
     catch(_exception)
     {
     ++a;
     show_debug_message(_exception.message);
     show_debug_message(_exception.longMessage);
     show_debug_message(_exception.script);
     show_debug_message(_exception.stacktrace);
     }
     finally
     {
     show_debug_message("a = " + string(a)); }
  
  Стоит отметить, что вы можете заменить стандартное сообщение об ошибке GML и использовать свой собственный код обработчика, вызвав функцию exception_unhandled_handler(). Этот
    позволяет Runtime_Functions.htm">указать пользовательский метод, который будет вызываться всякий раз, когда в игре возникают необработанные исключения.
   
   
   
  
    
      
        Назад: Особенности языка
        Далее: бросок
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

