
  
  для
  Одним из наиболее часто используемых способов многократного повторения оператора (или операторов) является цикл for, который имеет следующий вид:
  for (<назначение>; <выражение>; <операция>;) { <задание>; <задание>;... }
  Это работает следующим образом - сначала выполняется присвоение, которое присваивает значение переменной, затем оценивается выражение и, если оно истинно, выполняются утверждения в фигурных скобках{}
    выполняются. Далее выполняется операция над присвоенной переменной, а затем выражение оценивается снова. Этот цикл будет продолжаться до тех пор, пока выражение не окажется ложным.
  В таком виде это может показаться сложным, но вы должны понимать это так:
  
    Первое присваивание инициализирует цикл for
    Выражение проверяет, следует ли завершить цикл
    Заявление выполняется
    Операция выполняется
    Вернитесь к шагу 2, выполните выражение еще раз и продолжите или выйдите из цикла
  
  Это чрезвычайно полезно для выполнения повторяющихся задач, которые в любом другом случае потребовали бы много строк кода, и обычно используется в качестве счетчика для оценки массивов, рисования, установки инкрементных значений и т.д.. Следующий пример кода иллюстрирует
    типичное использование этого типа оператора:
  for (var i = 0; i < 10; i += 1) {
     draw_text(32, 32 + (i * 32), string(i) + ". "+ string(scr[i])); }
  
  Приведенный выше код инициализирует цикл for, начиная с 0 и считая до (включительно) 9, а затем использует значение цикла i для вывода на экран значений, хранящихся в массиве. Обратите внимание, как переменная цикла for 
   i используется не только для прохождения цикла по массиву, но и для рисования числа, а также для указания GameMaker Studio 2, куда рисовать значения в комнате. Такая гибкость является одной из основных причин, по которым циклы for так важны в программировании.
  Когда следует использовать цикл for? В любое время, когда вам нужно выполнить фиксированное количество итераций над одним или несколькими утверждениями, отслеживая при этом итерацию, которая выполняется в данный момент, и используя значение этой итерации.
    в данный момент и использовать это значение итерации.
  ПРИМЕЧАНИЕ: При работе с другими людьми вы увидите множество примеров использования переменных " i"и" j" для переменной счетчика цикла. Это не обязательные имена переменных, и вы можете использовать что угодно
    например, " a" или " foo" иличто угодно. Использование " i"и" j" - это просто стандартное соглашение в программировании.
  Стоит отметить, что в цикле for можно использовать специальные операторы break и continue. Использование break приведет к немедленному выходу из цикла и переходу к любому коду, который находится в событии или функции после того, как цикл должен был завершиться, например
  var _inst = noone; for (var i = 0; i < 10; i += 1) {
     _inst = instance_find(obj_Enemy_Parent, i); if instance_exists(_inst) { if _inst.object_index == obj_Enemy_Melee { break; }  }  }  target = _inst;
  Приведенный выше код перебирает 10 ближайших экземпляров заданного "родительского" объекта, и если экземпляр найден, то проверяется ID объекта, и если это экземпляр obj_Enemy_Melee, то цикл завершается.
    с использованием break и присвоением значения ID переменной (если экземпляр не найден, то к переменной будет добавлено ключевое слово noone ).
  Примером использования continue в цикле for может быть:
  var _val = 0; for (var i = 0; i < 10; i += 1) {
     if (val_array[i] <= 0) { continue; }  _val += val_array[i]; }
     draw_text(32, 32, "Всего положительных значений = " + string(_val));
  Этот код проверит значение, хранящееся в каждой позиции массива 1D длины 10, и если любое из них меньше или равно 0, он continue цикл, что означает завершение текущей итерации,
    i будет увеличено, и начнется следующая итерация цикла. Если значение больше 0, то оно прибавляется к локальной переменной _val, а после завершения цикла итоговое значение
    выводится на экран.
  Другие примеры ключевых слов цикла см. в разделах повторить, пока, и do / until.
   
   
   
  
    
      
        Назад: Особенности языка
        Далее: переключатель
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

