
  
  в то время как
  В языке GameMaker есть несколько способов выполнения циклов, один из самых важных - цикл while. Эта функция цикла имеет вид:
  while (<выражение>) { <выражение>; <выражение>;... }
  Здесь у вас есть утверждение, которое итерируется снова и снова на основе результатов оценки выражения, т.е.: с помощью
    цикле while, пока выражение оценивается в true, утверждение (которое также может быть блоком кода из нескольких утверждений с фигурными скобками {}) выполняется. Ниже вы можете найти
    пример типичного способа использования "while":
  while (place_meeting(x, y, obj_Wall)) {
     x -= 1; }
  
  Приведенный выше код проверяет столкновение между вызывающим экземпляром и экземпляром "стены", и он будет выполнять несколько итераций , покане произойдетстолкновение.
    перемещая экземпляр влево на один пиксель, пока экземпляр не перестанет сталкиваться.
  Когда следует использовать цикл while? Его следует использовать в любом случае, когда вы хотите повторить одно или несколько утверждений, но не знаете - или не заботитесь - сколько раз они должны повториться.
    начальная оценка false, утверждения могут даже не выполняться.
  Обратите внимание, что с циклами while нужно быть очень осторожным! Вы можете легко сделать бесконечные циклы, и в этом случае ваша игра зависнет и больше не будет реагировать на ввод пользователя, и ее придется принудительно закрыть. Например:
  while (!place_free(x, y)) {
     x = random(room_width); y = random(room_height); }
  
  Приведенный выше код может работать нормально, но он также может вызвать бесконечный цикл, если экземпляр не сможет найти пустую позицию для перемещения, что приведет к зависанию игры. Если вы окажетесь в ситуации, когда такое возможно,
    то вам следует либо использовать другой вид неблокирующего цикла, либо использовать дополнительную проверку переменной в выражении (вы можете использовать несколько выражений вместе с and (&&),
    or (||) и xor (^^)операторы для проверки):
  var _check = 0; while ((!place_free(x, y)) && (_check < 100)) {
     x = random(room_width); y = random(room_height); _check += 1; }
     if _check >= 100 { // код не сработал, так что разбирайтесь с этим }
  В качестве альтернативы можно использовать оператор break для выхода из цикла, например, следующий код будет генерировать 100 случайных чисел, а затем продолжит, несмотря на то, что оценка while всегда будет true:
  var i = 0; while (true) {
     x[i] = random(room_width); y[i] = random(room_height); if ((i++) >= 100) { break; }  }
  
  Вы также можете использовать оператор continue в цикле while. При его использовании текущая итерация цикла завершится и цикл будет запущен заново на новой итерации, например:
  var file = file_text_open_read("Game_Data.txt"); var _num = 0; while (!file_text_eof(file)) { var _s = file_text_readln(file); if (_s == "") { continue; }  str[num++] = _s; }  file_text_close(file);
  
  Приведенный выше код открывает файл и читает из него строку в каждом цикле до тех пор, пока не будет достигнут конец содержимого файла. Если прочитанная строка является пустой строкой, то текущая итерация цикла завершается с помощью оператора continue и начинается новая итерация, в противном случае строка добавляется в массив и позиция массива увеличивается.
  Другие примеры функций цикла см. в разделах повторить, делать... до, и для.
   
   
   
  
    
      
        Назад: Особенности языка
        Далее: делать / пока
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

