
  
  if / else и условные операторы
  Фундаментальной особенностью большинства языков программирования является возможность задать простой вопрос, который дает булевский ответ true или false, и в GML это достигается с помощью ключевого слова if. Простое условие if принимает
   выражение и выполняет один или несколькооператоров, если выражение разрешается как true,
    со следующей базовой формой:
  if (<выражение>) { <выражение>; <выражение>;... }
   Здесь вы говорите, что если выражение разрешается как true, то сделайте что-то. Обратите внимание, что часть условия "then" является неявной, но есть ключевое слово then, которое может быть использовано (хотя
    его почти всегда опускают), поэтому вы можете создавать подобные условия:
  if (<выражение>) then { <выражение>; <выражение>;... }
  Помимо if и then, вы также можете использовать ключевое слово else, чтобы сделать что-то еще, если проверяемое выражение оценивается как false. Такая форма " if...then... else... "
    выглядит следующим образом:
  if (<выражение>) { <выражение>; }  else
     { <выражение>; }
  В этом случае выражение будет оценено, и если оно оценивается как false, то выполняется оператор после else, иначе выполняется начальный оператор (он истинен ).
  ПРИМЕЧАНИЕ: В языке GameMaker любое значение, которое меньше или равно 0, будет оцениваться как false, а любое значение, которое больше 0, будет оцениваться как true.
  Хорошей привычкой является всегда ставить скобки вокруг выражений и фигурные скобки {} вокруг утверждений в if (иначе будет выполнено только первое утверждение), и занимать новую строку в блоке для каждого утверждения, например:
  // Это будет работать if <выражение> <запрос>;
     // Пример: if test == true переменная = false else переменная = true;
  // Это лучше if (<выражение>) {
     <выражение>
     }  else
     {
     <выражение>
     }
    
     // Пример if (test == true) { variable = false; }  else
     { переменная = true; }
  Обратите внимание, что хотя этот вариант немного более многословен, он означает, что в коде нет двусмысленности и что он всегда будет правильно компилироваться на всех платформах. Однако в исходном примере это может быть не так, как объясняется в разделе на странице " Выражения и операторы ".
  ПРИМЕЧАНИЕ: При сравнении двух значений для проверки их равенства следует использовать оператор "==", а для присвоения - только оператор "=". В настоящее время GameMaker 
    рассматривать их как взаимозаменяемые, но это может измениться в будущем, и ваш код станет чище и нагляднее при использовании правильных операторов для сравнения и присваивания.
  Чтобы привести пример использования if, рассмотрим следующий код, который будет перемещать экземпляр в направлении позиции x=200 в комнате, когда он помещен в событие Step:
  если (x < 200) {
     x += 4; }
     else
     {
     x = 200; }
  
  Обратите внимание, что вы также можете выполнять составные проверки в if, т.е. проверять различные значения или выражения в одном операторе. В этих проверках могут использоваться различные комбинированные операторы (&& and, || or  и ^^ xor). Когда вы это сделаете, GameMaker Studio 2 будет оценивать каждое из них по очереди, и в зависимости от того, как они оценены, остальные могут быть пропущены. Например:
  if (keyboard_check_pressed(vk_enter)) && (instance_exists(obj_Player)) {
     go = false; alarm[0] = room_speed; }
  
  Здесь мы проверяем с помощью оператора && "и", поэтому он проверяет, истинны ли оба условия в if, и если первое из них ложно, то второе даже не будет
    даже не проверяется. Это называется "замыканием" кода, поэтому при комбинировании выражений для проверки следует убедиться, что самым дешевым по производительности всегда является первое, чтобы избежать оценки более дорогих выражений, если первое из них
    оценивается в false. Аналогично, если условие может быть оценено как true или false во время компиляции, то все условие будет удалено из кода,
    Например, у вас есть макрос DEBUG_ON для отладки, и он может быть либо true, либо false - если он установлен в false, то следующий блок кода будет удален из игры при компиляции:
  if DEBUG_ON == true { show_debug_message("Instances = " + string(instance_count)); }
  Вы также можете выполнять условные операции (также известные как тернарные операции), которые по сути являются "коротким" способом выполнения базового if. Они имеют следующий синтаксис:
  переменная = <условие> ? <условие1 (если истинно)> : <условие2(если ложно)>
  Условный оператор "?" вернет одно из двух заданных значений в зависимости от того, оценивается ли выражение условия в true или false, например:
  var temp_x = (x < (room_width / 2)) ? 32: (room_width - 32);
  Приведенный выше код проверит значение "x" на значение половины ширины комнаты, и если оно меньше, то установит значение "temp_x" равным 32, иначе "temp_x" будет равна ширине комнаты
    ширина - 32. Вот еще несколько примеров использования:
  draw_text(x, y, "Плата составляет " + (global.Member ? "$2.00" : "$10.00")); path_start(((global.level > 10) ? path_hard : path_easy;), 2, path_action_reverse, true); (--hp <= 0) ? instance_destroy() : score +=
    10;
  Стоит также отметить, что вы можете вложить условные операции, но в этом случае каждая операция должна быть заключена в скобки, например:
  var c = a ? "foo" : (b ? "bar" : "whee"); // Правильный var c = a ? "foo" : b ? "bar" : "whee"; // Вызовет ошибку
   
   
   
  
    
      
        Назад: Особенности языка
        Далее: повторить
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

