
  
  Структуры и конструкторы
   Структура - это, проще говоря, переменная, которая содержит коллекцию других переменных. Переменные, которые хранит struct, могут быть любого типа данных, упомянутого ранее, и эти переменные можно читать из struct и записывать в struct после первоначального объявления struct.
    и записывать в них после первоначального объявления struct, а также можно добавлять дополнительные переменные в struct после ее объявления. Переменные, используемые в struct, должны соответствовать традиционным схемам именования, т.е. они не могут начинаться с цифр и должны состоять только из букв.
    состоять только из буквенно-цифровых символов и символа подчеркивания "_", а также обратите внимание, что содержимое структуры не зависит от экземпляра или функции, которая ее создала, и поэтому вы можете - при желании - использовать встроенные имена переменных, такие как image_index.
    имена переменных, такие как image_index или x и y.
  После первоначального создания структуры не требуют никаких затрат на обработку, пока они существуют, хотя и занимают место в памяти. Синтаксис struct выглядит следующим образом:
  <переменная> = {
   
        <переменная> : <значение> ,
        <переменная> : <значение> ,  и т.д....
     };
  
  Так, примером этого на практике может быть:
  mystruct = {
     a : 20, b : "Hello World" };
  
  Приведенный выше код создает структуру в переменной mystruct в масштабе экземпляра и заполняет ее некоторыми значениями (структуры могут быть созданы в локальном, экземпляровом и глобальном масштабах, как и любые другие переменные - более подробную информацию см. в разделе " Переменные и масштабы переменных "). Обратите внимание, что вам не обязательно заполнять содержимое структуры при ее первоначальном создании, и вы можете создать пустую структуру, просто сделав это:
  mystruct = {};
  Этот struct может быть добавлен позднее в код игры. Вот пример структуры с различными переменными и типами данных:
  var _xx = 100; mystruct = {
     a : 10, b : "Hello World", c : int64(5), d : _xx + 50, e : function(a, b) {
     return a + b; },
     f : [ 10, 20, 30, 40, 50 ], g : image_index };
  
  В приведенном выше коде вы заметите, что в структурах можно определять методы и использовать функции времени выполнения, а также использовать локальные переменные и переменные экземпляра в объявлении структуры.
  Например, в приведенном выше примере вы заметите, что переменная struct "g" устанавливается в значение image_index, которое является переменной экземпляра. Вы можете подумать, что в этом случае вам нужно использовать ключевое слово other, чтобы получить переменную экземпляра, но это не обязательно. По сути, когда вы определяете struct, все переменные-члены, расположенные слева от двоеточия ":", являются переменными struct, а значения и переменные, расположенные справа, используют область видимости того, что определяет struct (в данном случае, экземпляра).
  Давайте рассмотрим простой пример, чтобы проиллюстрировать это. Допустим, вы хотите определить структуру с переменными "x" и "y" и хотите установить их на "x" и "y" экземпляра, определяющего структуру. На практике
    код будет выглядеть следующим образом:
  mystruct = {
     x : x, y : y };
  
  В приведенном выше коде переменные-члены struct x и y устанавливаются в значения, хранящиеся в переменных экземпляра x и y, так как правая часть двоеточия ":" относится к экземпляру, определяющему
    структуру. Стоит отметить, что это означает, что вы не можете использовать переменные-члены struct для определения последующих переменных внутри объявления struct. Например, в следующем случае вы получите ошибку:
  mystruct = {
     a : 10, b : 10, c : a + b }
  
  Ошибка возникает потому, что переменные a и b на самом деле оцениваются в области видимости того, что определяет структуру (они находятся справа от двоеточия ":"), а не определяются внутри
    в самой структуре.
  ВАЖНО!  Вы не можете использовать какие-либо встроенные глобальный переменные области видимости в качестве имен членов структуры, например: game_id или fps.
    Полный список этих глобальных переменных вы можете найти на следующей странице:
  
    Структура Запрещенные переменные
  
  После того, как структура определена, вы можете получить доступ к данным в ней, используя нотацию "точка", как показано ниже:
  mystruct = {
     a : 20, b : "Hello World" }
    
     mystring = mystruct.b + string(mystruct.a);
  Вы также можете выполнять операции над переменными внутри struct или использовать их в функциях, как и любые другие переменные. Например:
  mystruct.a += 1; mystruct.b = mystruct.a + 20; mydir = point_direction(mouse_x, mouse_y, mystruct.xx, mystruct.yy);
  Наконец, структуры могут иметь другие структуры, вложенные в них, например, так:
  mystruct = {
     a : { aa : "Это пример" },
     b : { bb : "И еще один" },
     };
  
  Для доступа к таким вложенным структурам по-прежнему используется точечная нотация, например, так:
  var _str = mystuct.a.aa + " " + mystruct.b.bb; show_debug_message(_str);
  
  Другим способом доступа к данным в структуре является использование функции with() функцию. Так, например, вы можете сделать следующее:
  with(mystruct) {
     a += other.x; }
  
  Использование with() изменяет область видимости кода на данную структуру, где вы можете манипулировать переменными-членами в области видимости структуры. Обратите внимание, что в примере мы также используем ключевое словоother .
    Это работает так же, как и в экземпляре при использовании with(), и будет ссылаться на экземпляр (или struct), который фактически выполняет блок кода.
  Когда структура больше не нужна, она может быть удалена из памяти с помощью оператора delete оператор, который помечает, что структура может быть собрана. Это не является строго обязательным, поскольку сборщик мусора может сделать это автоматически, если структура больше не упоминается в вашем коде, но это хорошая практика, и мы рекомендуем это делать (например, вызвать delete в событии Clean Up экземпляра, чтобы явно сообщить сборщику мусора, что структура в области видимости экземпляра должна быть удалена). Вот пример:
  // Создаем событие mystruct = {
     pos_x : x, pos_y : y, count : 1000 };
    
     // Очистка события delete mystruct;
  Функции конструктора
  Вы также можете использовать функции или методы скрипта для создания функций, которые могут быть использованы для создания новых структур, что требует использования ключевого слова constructor для функции
    и оператора новый при создании структуры из такой функции. См. следующую функцию:
  function Vector2(_x, _y) constructor {
     x = _x; y = _y;
     static Add = function(_vec2) {
     x += _vec2.x; y += _vec2.y; }
     }
  
  Или, используя синтаксис переменной метода:
  Vector2 = function(_x, _y) constructor {
     x = _x; y = _y;
     static Add = function(_vec2) {
     x += _vec2.x; y += _vec2.y; }
     }
  
  Здесь мы создаем функцию под названием Vector2 и сообщаем GameMaker Studio 2, что это функция, используемая для создания структур, добавляя ключевое слово constructor после ее определения. Затем вы можете вызвать эту функцию-конструктор следующим образом
    this:
  v2 = new Vector2(10, 10);
  Теперь переменная v2 будет содержать struct с переменными x и y и статическую переменную метода Add.
  Вы также можете использовать необязательные аргументы в функциях конструктора:
  function Vector2(_x = 0, _y = 0) constructor {
     x = _x; y = _y; }
  
  Теперь этот конструктор будет использовать 0 для аргументов _x и _y, если они не указаны при вызове функции. Это означает, что вы можете создать новую структуру Vector2 без необходимости указывать какие-либо аргументы:
  empty_vector = new Vector2();
  Наследование
  Функции, созданные таким образом, также будут поддерживать одиночное наследование, то есть: вы можете создать функцию-конструктор, которая наследует данные от другой функции-конструктора.
  ПРИМЕЧАНИЕ: При работе с наследованием вы не можете использовать переменные метода для определения функции конструктора, только функции сценария.
  Например, выше мы создали функцию-конструктор Vector2, поэтому мы можем использовать ее в качестве "родителя" для другой функции-конструктора, которую мы назовем Vector3:
  function Vector3(_x, _y, _z) : Vector2(_x, _y) constructor {
     z = _z;
     static Add = function( _vec3 ) {
     x += _vec3.x; y += _vec3.y; z += _vec3.z; }
     }
  
  Как вы видите, при определении функции мы используем двоеточие ":", чтобы отделить новый конструктор от родительского конструктора, от которого он наследуется. Дочерний конструктор(Vector3) передает аргументы _x и
   _y аргументы в родительский конструктор(Vector2), которые используются для запуска сначала родительского конструктора, после чего выполняется дочерний конструктор. Таким образом, дочерний конструктор получает родительские переменные (x и y), а также может определять свои собственные (z).
  Вы также можете передавать постоянные значения в родительский конструктор, чтобы определенный дочерний конструктор всегда предоставлял одни и те же значения своему родительскому конструктору:
  function Item(damage) constructor {
     my_damage = damage; }
    
     function BasicSword() : Item(10) constructor {}
    
     var _basic_sword = new BasicSword(); show_debug_message(_basic_sword.my_damage); // Выводит 10
  Это означает, что урон базового меча всегда будет равен 10, так как он передает это значение своему родительскому конструктору независимо от того, какими могут быть его собственные аргументы.
  Обратите внимание, что присвоение значения по умолчанию аргументу в дочернем конструкторе отменяет значение по умолчанию для этого аргумента в родительском. Смотрите следующий пример:
  function Parent(value = 10) constructor {
     show_debug_message(value); }
    
     function Child(value = 20) : Parent(value) constructor {
     show_debug_message(value); }
    
     var _child = new Child();
  Оба этих конструктора выведут 20 в выходной журнал, поскольку это значение по умолчанию для аргумента, установленного дочерним конструктором, и это же значение было передано в родительский конструктор.
  Более подробную информацию о новых и удаленных операторах см. на следующих страницах:
  
    новый
    удалить
      
    
  
  Строковый вывод
  И последнее, что следует упомянуть о структурах, это то, что вы можете изменить то, что выводится на консоль из них для отладки. По умолчанию вызов функции show_debug_message() на
    struct выводит содержимое struct (как показано выше). Однако можно настроить это сообщение, добавив в struct специально названный метод toString:
  mystruct = {
     a : 20, b : "Hello World",
     toString : function() { return "This stuct says " + b + ", " + string(a) + " times!"; }  }
     show_debug_message(mystruct);
  
  Теперь, когда вызывается функция show_debug_message(), для генерации вывода будет использоваться метод toString, и - в приведенном выше примере - вы получите:
  Эта структура говорит Hello World 20 раз!
  Обратите внимание, что вы также можете вызвать string() функцию по ссылке на struct и использовать ее для вывода содержимого - или метода toString - на экран.
    экрана, или сохранить его в файл, или что угодно, например:
  var _str = string(mystruct); draw_text(32, 32, _str);
  Наконец, существует ряд функций времени выполнения, которые вы можете использовать для структур, чтобы получить переменные, которые они содержат, а также несколько других вещей. Вы можете найти их в следующем разделе:
  
    Переменные функции
  
   
   
   
  
    
      
        Назад: ОбзорGML
        Следующее: Особенности языка
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

