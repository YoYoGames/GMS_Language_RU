
  
  Ключевые слова экземпляра
  Чтобы упростить некоторые вещи в GameMaker Studio 2, вы можете использовать одно из нескольких ключевых слов экземпляра в своем коде (будь то GML или Drag and Drop™). Эти ключевые слова используются в основном для идентификации экземпляров - а в некоторых случаях и структур - в различных ситуациях.
    ситуациях, и каждое из них объясняется в тексте ниже. Обратите внимание, что все ключевые слова внутри представлены отрицательным целым числом, поэтому следует соблюдать осторожность при присвоении или проверке значений переменных с этими ключевыми словами,
    так как впоследствии вы можете получить неожиданные результаты, поскольку GameMaker Studio 2 интерпретирует использованное вами значение как нечто иное. Следует также отметить, что использование значений вместо ключевых слов в коде не рекомендуется и может привести к проблемам
    в дальнейшем.
   
  self
  
    
      
        
          Ключевое слово
          Описание
          значение
        
        
          self
          Экземпляр/структура, выполняющая текущий блок кода.
             -1
        
      
    
     
    self можно использовать для идентификации текущей структуры или экземпляра, который находится в области видимости в текущем блоке кода. Например:
    var val = 100; with (instance_create_layer(x, y, "Instances", obj_Fire)) {
       self.val = val; }
    
    В этом примере видно, что у нас есть локальная переменная val, и мы хотим, чтобы она установила переменную экземпляра с тем же именем во вновь созданном экземпляре объекта. Чтобы правильно определить переменную экземпляра
      и указать GameMaker Studio 2 установить ее в экземпляре, вызывающем блок кода, мы используем ключевое слово self. В большинстве случаев можно также использовать встроенную переменную экземпляра id вместо self,
      но self дает определенные преимущества. Во-первых, компилятор быстрее определяет экземпляр (или структуру), используя self, а не id, так как значение id проходит через таблицу поиска экземпляра, а self - нет. Во-вторых, для тех, кто создает расширения, очень полезно обеспечить правильную привязку переменных, так как возможно, что проект, использующий
      расширение, может иметь переменную глобальной области видимости или что-то с тем же именем, что и переменная в расширении.
    ПРИМЕЧАНИЕ: Ключевое слово self не является сокращением для фактического значения ID экземпляра или структуры и должно использоваться только в контексте, описанном выше. Если вам требуется значение ID для
      экземпляра, то необходимо использовать self.id, например:
    var myID = id; with (all) {
       if self.id == myID { // делаем что-нибудь }  }
    
    Стоит также отметить, что self может также использоваться внутри структур - при очень специфических обстоятельствах - для ссылки на переменные-члены структуры.
     
  
  other
  
    
      
        
          Ключевое слово
          Описание
          значение
        
        
          other
          Другой экземпляр, вовлеченный в событие столкновения, или другой экземпляр или структура из функции with.
             -2
        
      
    
     
    Специальное ключевое слово other может использоваться для ссылки на конкретный экземпляр (а в некоторых случаях и на структуру) двумя различными способами: при использовании в функции with (объясняется здесь)
      или при использовании в событии столкновения, о чем и пойдет речь в этом разделе.
    Событие столкновения может произойти только между двумя экземплярами. Вы можете иметь несколько столкновений между несколькими экземплярами, но все они разрешаются GameMaker Studio 2 по принципу "один на один", с экземпляром, в котором произошло событие столкновения, и с
      "другой" экземпляр, который участвует в столкновении. Представьте, что у вас есть объект игрока, несколько вражеских объектов и несколько объектов пуль, которыми враги могут стрелять в вас. Вы можете назначить каждому врагу один экземпляр пули, но с другой переменной урона.
      случайным образом назначенной ему при создании, например:
    var nnn; nnn = instance_create_layer(x, y, "Bullets", obj_Bullet); nnn.damage = 5 + irandom(5); nnn.speed = 8; nnn.direction = point_direction(x, y, obj_Player.x, obj_Player.y);
    Вы можете видеть, как мы устанавливаем его переменные, используя "метод точки", описанный в разделе Обращение к переменным в других экземплярах. Это даст объектам пули разные значения урона
      значение. Но как быть с объектом игрока? Как он будет определять урон, который он должен получить? С помощью other в событии столкновения:
    hp -= other.damage; if hp <= 0 instance_destroy();
    Приведенный выше код вычтет из переменной "hp" игрока сумму, хранящуюся в другом экземпляре в переменной "damage" столкновения, затем проверит, меньше ли "hp" или равно 0. Если это так
      то он уничтожит объект игрока. Обратите внимание, что other, используемое таким образом, работает только в событии столкновения, и что другой экземпляр должен иметь проверяемую переменную, иначе будет выдана ошибка. Однако вы можете присваивать
      значения переменным или даже создать новые, используя other в событии столкновения, например, так:
    //добавьте десять к переменной "mana" другого экземпляра other.mana += 10; //установите переменную "hit" другого экземпляра в true, создав ее, если переменная еще не существует other.hit = true;
    Стоит также отметить, что other может также использоваться внутри структур - при очень специфических обстоятельствах - для ссылки на переменные-члены структуры. 
     
  
  all
  
    
      
        
          Ключевое слово
          Описание
          значение
        
        
          all
          Все экземпляры, активные в данный момент в комнате.
             -3
        
      
    
     
    Это ключевое слово используется, чтобы сообщить GameMaker Studio 2 о необходимости применения функции или проверки всех активных экземпляров в комнате (отключенные экземпляры не будут проверяться и к ним не будет доступа). Нельзя использовать all для доступа
      или установить переменные в других экземплярах с помощью метода point (см. здесь), но вы можете использовать его при вызове функции with()например:
    с (все) {
       скорость = 0; }
    
    Приведенный выше код установит скорость всех экземпляров в комнате на 0. Вы также можете использовать all внутри функций, чтобы, например, нацелить или проверить все экземпляры в комнате:
    //Проверьте точку для любого активного экземпляра в комнате inst = instance_position(mouse_x, mouse_y, all); 
       //Проверьте все экземпляры на столкновение вдоль линии if collision_line(x, y, mouse_x, mouse_y, all, false, true) {}
       //Добавьте все экземпляры в комнате в сетку планирования движения mp_grid_add_instances(grid, all, false);
    all - это очень полезное ключевое слово, которое можно использовать во многих ситуациях в коде и действиях, часто сокращая объем кода, который необходимо написать для достижения желаемого эффекта.
     
  
  noone
  
    
      
        
          Ключевое слово
          Описание
          значение
        
        
          noone
          Ни одного экземпляра.
             -4
        
      
    
     
    Это может показаться странным, но много раз при программировании игр вы столкнетесь с необходимостью проверить, нет ли экземпляров, найденных в определенном месте, или в столкновении и т.д.. В этих случаях вы можете использовать это ключевое слово, чтобы проверить, что ничего нет, примерно так:
    if instance_nearest(x, y, obj_enemy) != noone {
       //делайте что-нибудь, так как рядом есть враг }
    
    В этом примере функция instance_nearest() вернет либо noone, либо уникальный идентификатор ближайшего найденного экземпляра. В принципе, в любой момент, когда вам нужно проверить наличие экземпляра, вы можете ожидать
      получить в ответ либо noone, либо уникальный идентификатор экземпляра.
     
  
   
   
   
  
    
      
        Назад: ОбзорGML
        Следующее: Обращение к переменным в других случаях
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

