
  
  Функциивремени выполнения 
  Общее определение функции выглядит примерно так:
  Функция имеет вход и выход, и выход каким-то образом связан с входом.
  В GameMaker Studio 2 это означает две разные вещи, но работают они одинаково:
  
    Функциивремени выполнения - Функция время выполнения функция - это функция, которая поставляется как часть проекта Язык GameMaker(GML). Они встроены в язык и могут быть использованы для того, чтобы что-то происходило в ваших играх .
      Функции времени выполнения доступны для вас, все они объясняются в разделе руководства " Справочник по языку ".
    Функции и методы сценария - Скрипт функции и MПеременные метода это функции, которые вы создали сами, используя основные строительные
      блоки Язык GameMaker(GML), и они могут включать функции времени выполнения как часть своего кода.
  
  В обоих вышеприведенных случаях функция имеет вид имени функции, за которым следуют входные аргументы, заключенные в скобки () и разделенные
    запятыми (если функция не имеет входных аргументов, то используются просто скобки). Эта страница посвящена функциямвремени выполнения (т.е. тем, которые встроены в GameMaker и образуют язык GameMaker Language), но общие правила, приведенные ниже, действуют для всех типов функций.
    ниже, применимы ко всем типам функций.
  Вот примерная структура функции:
  <функция>(<arg0>, <arg1> ,... <argN>);
  Некоторые функции могут возвращать значения и могут использоваться в выражениях, в то время как другие просто выполняют команды, как показано в следующих двух примерах функций времени выполнения 
    примеры:
  // Уничтожение вызывающего экземпляра // Это не требует аргументов и ничего не возвращает instance_destroy();
    
     // Получение расстояния от текущей позиции экземпляра до позиции мыши // Принимает четыре аргумента и возвращает вещественное значение dist = point_distance(x, y, mouse_x, mouse_y);
  ПРИМЕЧАНИЕ: Везде, где в руководстве в качестве возвращаемого значения функции указано "N/A", это означает, что функция не предназначена для возврата какого-либо значения в рамках своей работы. Если вы попытаетесь проверить возвращаемое значение этих функций, то вы
    вы получите значение undefined. 
  Иногда возвращаемое значение функции может быть значением, которое вы хотите использовать в присваивании, но вы должны заметить, что невозможно использовать любую функцию непосредственно в качестве левой стороны
    стороны присваивания. Например, следующий код для установки скорости на экземпляре выдаст ошибку:
  instance_nearest(x, y, obj).speed = 0;
  Возвращаемое значение для выражения в этом примере кода является целым числом (уникальное значение ID для ближайшего экземпляра), поэтому для его использования таким образом и правильного обращения к требуемому экземпляру оно должно быть заключено в скобки (более подробная информация приведена в разделе Обращение к переменным в других экземплярах ). Приведенный выше код будет правильно записать как:
  (instance_nearest(x, y, obj)).speed = 0;
     // или более правильно
     var inst = instance_nearest(x, y, obj); inst.speed = 0;
  В разделе " Справочник по языку " руководства перечислены все доступные вам функции времени выполнения и приведены примеры их использования, а также другая важная информация о том, что они могут возвращать
    или какие события они могут вызывать, и т.д... Для получения дополнительной информации о функциях и методах сценария, определяемых пользователем, см. раздел " Функции сценария " и раздел " Переменные метода".
   
   
   
  
    
      
        Назад: ОбзорGML
        Следующее: Комментирование кода
      
    
    © Copyright YoYo Games Ltd. 2021 Все права защищены
  
  
  

